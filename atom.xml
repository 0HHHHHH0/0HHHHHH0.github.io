<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HHHH</title>
  
  <subtitle>总有人间一两风，填我十万八千梦</subtitle>
  <link href="https://0hhhhhh0.github.io/atom.xml" rel="self"/>
  
  <link href="https://0hhhhhh0.github.io/"/>
  <updated>2025-10-31T02:32:15.000Z</updated>
  <id>https://0hhhhhh0.github.io/</id>
  
  <author>
    <name>HHHH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LD-Block 连锁不平衡分析</title>
    <link href="https://0hhhhhh0.github.io/2025/10/31/ld-block-lian-suo-bu-ping-heng-fen-xi/"/>
    <id>https://0hhhhhh0.github.io/2025/10/31/ld-block-lian-suo-bu-ping-heng-fen-xi/</id>
    <published>2025-10-31T02:26:00.000Z</published>
    <updated>2025-10-31T02:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关键词</strong>：LD Block分析、连锁不平衡、LDBlockShow、群体遗传学、VCF处理、基因组可视化</p><hr><h1 id="使用LDBlockShow进行LD-Block分析"><a href="#使用LDBlockShow进行LD-Block分析" class="headerlink" title="使用LDBlockShow进行LD Block分析"></a>使用LDBlockShow进行LD Block分析</h1><blockquote><p>在群体遗传学研究中，连锁不平衡（Linkage Disequilibrium, LD）分析是理解基因组结构和识别候选基因的重要工具。本文将介绍如何使用LDBlockShow工具对特定基因组区域进行LD block分析。本文详细介绍如何使用LDBlockShow工具对特定基因组区域进行连锁不平衡（LD）Block分析，涵盖从数据预处理、样本名修正、目标区域提取到最终可视化分析的完整流程。</p></blockquote><h2 id="1-分析背景与工具准备"><a href="#1-分析背景与工具准备" class="headerlink" title="1. 分析背景与工具准备"></a>1. 分析背景与工具准备</h2><h3 id="1-1-分析目标"><a href="#1-1-分析目标" class="headerlink" title="1.1 分析目标"></a>1.1 分析目标</h3><p>对基因LOC105322102区域（NC_047567.1:32646664-32667511）进行LD Block分析，了解该区域的连锁不平衡结构。</p><h3 id="1-2-所需工具安装"><a href="#1-2-所需工具安装" class="headerlink" title="1.2 所需工具安装"></a>1.2 所需工具安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生物信息学工具</span>conda create <span class="token parameter variable">-n</span> vcftools_env <span class="token parameter variable">-c</span> bioconda <span class="token parameter variable">-c</span> conda-forge <span class="token punctuation">\</span>    bcftools <span class="token punctuation">\</span>    ldblockshow <span class="token punctuation">\</span>    plink <span class="token punctuation">\</span>    tabix <span class="token punctuation">\</span>    vcftools <span class="token punctuation">\</span>    ldblockshow <span class="token punctuation">\</span>    r-base <span class="token punctuation">\</span>    r-tidyverse <span class="token punctuation">\</span>    r-hexbin <span class="token punctuation">\</span>    r-patchwork <span class="token punctuation">\</span>    r-viridis <span class="token parameter variable">-y</span>    <span class="token comment"># R包（用于可视化）</span>R <span class="token parameter variable">-e</span> <span class="token string">"install.packages(c('tidyverse', 'hexbin', 'patchwork', 'viridis'))"</span>conda activate vcftools_env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-数据预处理"><a href="#2-数据预处理" class="headerlink" title="2. 数据预处理"></a>2. 数据预处理</h2><h3 id="2-1-原始数据"><a href="#2-1-原始数据" class="headerlink" title="2.1 原始数据"></a>2.1 原始数据</h3><ul><li>输入文件：<code>/home/wanglab/Ywh/adductor_muscle_scar/Variants/NC_047567.1_results_snps.vcf.gz</code></li></ul><h3 id="2-2-解决样本名问题"><a href="#2-2-解决样本名问题" class="headerlink" title="2.2 解决样本名问题"></a>2.2 解决样本名问题</h3><p>原始VCF文件中的样本名包含下划线，会导致PLINK（LDBlockShow内部调用）报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出样本名并替换下划线</span>bcftools query <span class="token parameter variable">-l</span> /home/wanglab/Ywh/adductor_muscle_scar/Variants/NC_047567.1_results_snps.vcf.gz <span class="token operator">&gt;</span> samples.txt<span class="token function">sed</span> <span class="token string">'s/_/-/g'</span> samples.txt <span class="token operator">&gt;</span> new_samples.txt<span class="token comment"># 重新写入header生成修正后的VCF文件</span>bcftools reheader <span class="token parameter variable">-s</span> new_samples.txt /home/wanglab/Ywh/adductor_muscle_scar/Variants/NC_047567.1_results_snps.vcf.gz <span class="token parameter variable">-o</span> fixed_samples.vcf.gztabix <span class="token parameter variable">-p</span> vcf fixed_samples.vcf.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-目标SNP位点提取"><a href="#3-目标SNP位点提取" class="headerlink" title="3. 目标SNP位点提取"></a>3. 目标SNP位点提取</h2><h3 id="3-1-创建目标位点列表"><a href="#3-1-创建目标位点列表" class="headerlink" title="3.1 创建目标位点列表"></a>3.1 创建目标位点列表</h3><p>创建包含108个目标SNP位点的列表文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&gt;</span> selected_positions.txt <span class="token operator">&lt;&lt;</span> <span class="token string">EOF32667511326618313266181732661895...（此处省略具体位点列表）32646664EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-提取目标SNP"><a href="#3-2-提取目标SNP" class="headerlink" title="3.2 提取目标SNP"></a>3.2 提取目标SNP</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 转换为BED格式</span><span class="token function">awk</span> <span class="token string">'{print "NC_047567.1\t"$1-1"\t"$1}'</span> selected_positions.txt <span class="token operator">&gt;</span> selected_snps.bed<span class="token comment"># 从修正后的VCF文件中提取目标SNP</span>bcftools view <span class="token parameter variable">-T</span> selected_snps.bed fixed_samples.vcf.gz <span class="token parameter variable">-Oz</span> <span class="token parameter variable">-o</span> selected_snps.vcf.gztabix <span class="token parameter variable">-p</span> vcf selected_snps.vcf.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-LD-Block分析"><a href="#4-LD-Block分析" class="headerlink" title="4. LD Block分析"></a>4. LD Block分析</h2><h3 id="4-1-运行LDBlockShow"><a href="#4-1-运行LDBlockShow" class="headerlink" title="4.1 运行LDBlockShow"></a>4.1 运行LDBlockShow</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">LDBlockShow <span class="token parameter variable">-InVCF</span> selected_snps.vcf.gz <span class="token punctuation">\</span>            <span class="token parameter variable">-OutPut</span> LOC105322102_selected_snps <span class="token punctuation">\</span>            <span class="token parameter variable">-Region</span> <span class="token string">"NC_047567.1:32646281:32669029"</span> <span class="token punctuation">\</span>            <span class="token parameter variable">-SeleVar</span> <span class="token number">2</span> <span class="token punctuation">\</span>            <span class="token parameter variable">-MAF</span> <span class="token number">0.05</span> <span class="token punctuation">\</span>            <span class="token parameter variable">-OutPng</span> <span class="token punctuation">\</span>            <span class="token parameter variable">-OutPdf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-参数详解"><a href="#4-2-参数详解" class="headerlink" title="4.2 参数详解"></a>4.2 参数详解</h3><ul><li><code>-InVCF selected_snps.vcf.gz</code>：输入提取的目标SNP VCF文件</li><li><code>-OutPut LOC105322102_selected_snps</code>：输出文件前缀</li><li><code>-Region "NC_047567.1:32646281:32669029"</code>：分析区域</li><li><code>-SeleVar 2</code>：选择算法</li><li><code>-MAF 0.05</code>：过滤次要等位基因频率&lt;5%的位点</li><li><code>-OutPng -OutPdf</code>：生成PNG和PDF格式图片</li></ul><h3 id="4-3-结果文件与解读"><a href="#4-3-结果文件与解读" class="headerlink" title="4.3. 结果文件与解读"></a>4.3. 结果文件与解读</h3><h3 id="4-3-1-生成文件"><a href="#4-3-1-生成文件" class="headerlink" title="4.3.1 生成文件"></a>4.3.1 生成文件</h3><ul><li><code>LOC105322102_selected_snps.blocks</code>：LD block定义文件</li><li><code>LOC105322102_selected_snps.blocks.gz</code>：压缩的block文件</li><li><code>LOC105322102_selected_snps.png</code>：LD block可视化图（PNG格式）</li><li><code>LOC105322102_selected_snps.pdf</code>：LD block可视化图（PDF格式）</li></ul><h3 id="4-3-2-结果解读"><a href="#4-3-2-结果解读" class="headerlink" title="4.3.2 结果解读"></a>4.3.2 结果解读</h3><p>LD block图中：</p><ul><li><strong>颜色深浅</strong>：表示SNP对之间的LD强度（r²值）</li><li><strong>Block边界</strong>：黑色三角标记表示LD block的边界</li><li><strong>Block内部</strong>：高度连锁的SNP集合，通常作为一个整体遗传</li></ul><h2 id="5-全基因组LD分析可视化（R脚本）"><a href="#5-全基因组LD分析可视化（R脚本）" class="headerlink" title="5. 全基因组LD分析可视化（R脚本）"></a>5. 全基因组LD分析可视化（R脚本）</h2><p>对于更全面的LD分析，可以使用以下R脚本进行可视化：</p><h3 id="5-1-准备LD数据"><a href="#5-1-准备LD数据" class="headerlink" title="5.1 准备LD数据"></a>5.1 准备LD数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用PLINK计算全基因组LD</span>plink <span class="token parameter variable">--vcf</span> fixed_samples.vcf.gz <span class="token punctuation">\</span>      --double-id <span class="token punctuation">\</span>      --make-bed <span class="token punctuation">\</span>      <span class="token parameter variable">--out</span> full_data      plink <span class="token parameter variable">--bfile</span> full_data <span class="token punctuation">\</span>      <span class="token parameter variable">--r2</span> <span class="token punctuation">\</span>      --ld-window <span class="token number">100</span> <span class="token punctuation">\</span>      --ld-window-kb <span class="token number">10000</span> <span class="token punctuation">\</span>      --ld-window-r2 <span class="token number">0</span> <span class="token punctuation">\</span>      <span class="token parameter variable">--out</span> full_ld_results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-R可视化脚本"><a href="#5-2-R可视化脚本" class="headerlink" title="5.2 R可视化脚本"></a>5.2 R可视化脚本</h3><p><code>conda activate py310</code></p><p><code>jupyter notebook --allow-root</code></p><p>创建 <code>ld_visualization.R</code> 文件：</p><pre class="line-numbers language-r" data-language="r"><code class="language-r"><span class="token comment">#!/usr/bin/env Rscript</span><span class="token comment"># 加载必要的包</span>library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>library<span class="token punctuation">(</span>hexbin<span class="token punctuation">)</span>library<span class="token punctuation">(</span>patchwork<span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">"=== LD分析可视化 ===\n"</span><span class="token punctuation">)</span><span class="token comment"># 1. 读取LD结果数据</span>ld_data <span class="token operator">&lt;-</span> read.table<span class="token punctuation">(</span><span class="token string">"full_ld_results.ld"</span><span class="token punctuation">,</span> header <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span>                      stringsAsFactors <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">,</span> comment.char <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># 移除可能的空行</span>ld_data <span class="token operator">&lt;-</span> ld_data<span class="token punctuation">[</span>complete.cases<span class="token punctuation">(</span>ld_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>cat<span class="token punctuation">(</span><span class="token string">"数据维度:"</span><span class="token punctuation">,</span> dim<span class="token punctuation">(</span>ld_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">"总SNP对数量:"</span><span class="token punctuation">,</span> format<span class="token punctuation">(</span>nrow<span class="token punctuation">(</span>ld_data<span class="token punctuation">)</span><span class="token punctuation">,</span> big.mark <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">"平均r²值:"</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>mean<span class="token punctuation">(</span>ld_data<span class="token operator">$</span>R2<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment"># 2. 随机抽样用于可视化</span>set.seed<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>sample_size <span class="token operator">&lt;-</span> min<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">,</span> nrow<span class="token punctuation">(</span>ld_data<span class="token punctuation">)</span><span class="token punctuation">)</span>ld_sample <span class="token operator">&lt;-</span> ld_data <span class="token percent-operator operator">%&gt;%</span> sample_n<span class="token punctuation">(</span>sample_size<span class="token punctuation">)</span><span class="token comment"># 计算距离</span>ld_sample<span class="token operator">$</span>distance <span class="token operator">&lt;-</span> abs<span class="token punctuation">(</span>ld_sample<span class="token operator">$</span>BP_B <span class="token operator">-</span> ld_sample<span class="token operator">$</span>BP_A<span class="token punctuation">)</span>ld_sample<span class="token operator">$</span>distance_kb <span class="token operator">&lt;-</span> ld_sample<span class="token operator">$</span>distance <span class="token operator">/</span> <span class="token number">1000</span><span class="token comment"># 3. 创建高质量LD衰减图</span>png<span class="token punctuation">(</span><span class="token string">"ld_decay_high_quality.png"</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> units<span class="token operator">=</span><span class="token string">"in"</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>p1 <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span>ld_sample<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> distance_kb<span class="token punctuation">,</span> y <span class="token operator">=</span> R2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>  stat_binhex<span class="token punctuation">(</span>bins <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span>  scale_fill_viridis_c<span class="token punctuation">(</span>trans <span class="token operator">=</span> <span class="token string">"log10"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"SNP pairs\n(log10)"</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_smooth<span class="token punctuation">(</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"loess"</span><span class="token punctuation">,</span> span <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">,</span>               size <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span> se <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token string">"pink"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">+</span>  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"A. LD Decay: r² vs Distance"</span><span class="token punctuation">,</span>       x <span class="token operator">=</span> <span class="token string">"Distance between SNPs (kb)"</span><span class="token punctuation">,</span>       y <span class="token operator">=</span> expression<span class="token punctuation">(</span>LD<span class="token operator">~</span><span class="token punctuation">(</span>r<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>  theme_minimal<span class="token punctuation">(</span><span class="token punctuation">)</span>p2 <span class="token operator">&lt;-</span> ggplot<span class="token punctuation">(</span>ld_sample<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> R2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_histogram<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">"lightblue"</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"black"</span><span class="token punctuation">,</span> bins <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_vline<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>xintercept <span class="token operator">=</span> mean<span class="token punctuation">(</span>R2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">,</span>              linetype <span class="token operator">=</span> <span class="token string">"dashed"</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span>  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"B. Distribution of r² values"</span><span class="token punctuation">,</span>       x <span class="token operator">=</span> expression<span class="token punctuation">(</span>r<span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">"Frequency"</span><span class="token punctuation">)</span> <span class="token operator">+</span>  theme_minimal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 组合图形</span>combined_plot <span class="token operator">&lt;-</span> p1 <span class="token operator">/</span> p2 <span class="token operator">+</span>   plot_annotation<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"Linkage Disequilibrium Analysis"</span><span class="token punctuation">,</span>                  subtitle <span class="token operator">=</span> paste<span class="token punctuation">(</span><span class="token string">"Based on"</span><span class="token punctuation">,</span> format<span class="token punctuation">(</span>sample_size<span class="token punctuation">,</span> big.mark <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"SNP pairs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>combined_plot<span class="token punctuation">)</span>dev.off<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 4. 创建距离分箱的LD衰减图</span>png<span class="token punctuation">(</span><span class="token string">"ld_by_distance_bins.png"</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> units<span class="token operator">=</span><span class="token string">"in"</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>distance_breaks <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">Inf</span><span class="token punctuation">)</span>distance_labels <span class="token operator">&lt;-</span> c<span class="token punctuation">(</span><span class="token string">"0-1"</span><span class="token punctuation">,</span> <span class="token string">"1-5"</span><span class="token punctuation">,</span> <span class="token string">"5-10"</span><span class="token punctuation">,</span> <span class="token string">"10-50"</span><span class="token punctuation">,</span> <span class="token string">"50-100"</span><span class="token punctuation">,</span>                     <span class="token string">"100-500"</span><span class="token punctuation">,</span> <span class="token string">"500-1000"</span><span class="token punctuation">,</span> <span class="token string">"&gt;1000"</span><span class="token punctuation">)</span>ld_sample<span class="token operator">$</span>distance_bin <span class="token operator">&lt;-</span> cut<span class="token punctuation">(</span>ld_sample<span class="token operator">$</span>distance_kb<span class="token punctuation">,</span>                              breaks <span class="token operator">=</span> distance_breaks<span class="token punctuation">,</span>                             labels <span class="token operator">=</span> distance_labels<span class="token punctuation">)</span>ld_summary <span class="token operator">&lt;-</span> ld_sample <span class="token percent-operator operator">%&gt;%</span>  group_by<span class="token punctuation">(</span>distance_bin<span class="token punctuation">)</span> <span class="token percent-operator operator">%&gt;%</span>  summarise<span class="token punctuation">(</span>mean_r2 <span class="token operator">=</span> mean<span class="token punctuation">(</span>R2<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sd_r2 <span class="token operator">=</span> sd<span class="token punctuation">(</span>R2<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            n_pairs <span class="token operator">=</span> n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%&gt;%</span>  filter<span class="token punctuation">(</span>n_pairs <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span>ggplot<span class="token punctuation">(</span>ld_summary<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>x <span class="token operator">=</span> distance_bin<span class="token punctuation">,</span> y <span class="token operator">=</span> mean_r2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_col<span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token string">"steelblue"</span><span class="token punctuation">,</span> alpha <span class="token operator">=</span> <span class="token number">0.8</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_errorbar<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>ymin <span class="token operator">=</span> mean_r2 <span class="token operator">-</span> sd_r2<span class="token punctuation">,</span> ymax <span class="token operator">=</span> mean_r2 <span class="token operator">+</span> sd_r2<span class="token punctuation">)</span><span class="token punctuation">,</span>                 width <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span> color <span class="token operator">=</span> <span class="token string">"darkred"</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_text<span class="token punctuation">(</span>aes<span class="token punctuation">(</span>label <span class="token operator">=</span> format<span class="token punctuation">(</span>n_pairs<span class="token punctuation">,</span> big.mark <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             vjust <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> size <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span>  labs<span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">"LD Decay by Distance Intervals"</span><span class="token punctuation">,</span>       x <span class="token operator">=</span> <span class="token string">"Distance (kb)"</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">"Mean r²"</span><span class="token punctuation">)</span> <span class="token operator">+</span>  theme_minimal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  theme<span class="token punctuation">(</span>axis.text.x <span class="token operator">=</span> element_text<span class="token punctuation">(</span>angle <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">,</span> hjust <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dev.off<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 5. 生成统计报告</span>ld_stats <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span>  Statistic <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">"Total SNP pairs"</span><span class="token punctuation">,</span> <span class="token string">"Sampled pairs"</span><span class="token punctuation">,</span> <span class="token string">"Mean r²"</span><span class="token punctuation">,</span> <span class="token string">"Median r²"</span><span class="token punctuation">,</span>                <span class="token string">"Pairs with r² &gt; 0.8"</span><span class="token punctuation">,</span> <span class="token string">"Pairs with r² &gt; 0.5"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  Value <span class="token operator">=</span> c<span class="token punctuation">(</span>format<span class="token punctuation">(</span>nrow<span class="token punctuation">(</span>ld_data<span class="token punctuation">)</span><span class="token punctuation">,</span> big.mark <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            format<span class="token punctuation">(</span>sample_size<span class="token punctuation">,</span> big.mark <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            round<span class="token punctuation">(</span>mean<span class="token punctuation">(</span>ld_data<span class="token operator">$</span>R2<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            round<span class="token punctuation">(</span>median<span class="token punctuation">(</span>ld_data<span class="token operator">$</span>R2<span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sum<span class="token punctuation">(</span>ld_data<span class="token operator">$</span>R2 <span class="token operator">&gt;</span> <span class="token number">0.8</span><span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            sum<span class="token punctuation">(</span>ld_data<span class="token operator">$</span>R2 <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">,</span> na.rm <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>write.csv<span class="token punctuation">(</span>ld_stats<span class="token punctuation">,</span> <span class="token string">"ld_detailed_statistics.csv"</span><span class="token punctuation">,</span> row.names <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span>cat<span class="token punctuation">(</span><span class="token string">"分析完成！生成3个可视化文件\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行R脚本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x ld_visualization.RRscript ld_visualization.R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>版本2</p><pre class="line-numbers language-none"><code class="language-none">library(tidyverse)plot_ld_decay &lt;- function(ld_file, output="ld_decay.png", nsample=1e5,                          region=NULL) {  message("=== 清洁版LD分析可视化 ===")  ld_data &lt;- read.table(ld_file, header=TRUE)  message("数据维度: ", paste(dim(ld_data), collapse=" x "))  message("列名: ", paste(colnames(ld_data), collapse=" "))  # 区间筛选  if (!is.null(region)) {    parts &lt;- strsplit(region, "[:]", fixed=FALSE)[[1]]    if (length(parts) != 3) stop("区间格式错误，应为 chr:start:end")        region_chr &lt;- parts[1]    start_pos  &lt;- as.numeric(parts[2])    end_pos    &lt;- as.numeric(parts[3])        ld_data &lt;- ld_data %&gt;%      filter(CHR_A == region_chr &amp; CHR_B == region_chr) %&gt;%      filter(BP_A &gt;= start_pos &amp; BP_A &lt;= end_pos &amp;             BP_B &gt;= start_pos &amp; BP_B &lt;= end_pos)        message("筛选区间: ", region)    message("区间 SNP对数量: ", nrow(ld_data))  }  # 统计信息  message("\n=== LD统计摘要 ===")  message("总SNP对数量: ", nrow(ld_data))  message("平均r²值: ", round(mean(ld_data$R2, na.rm=TRUE), 4))  message("r²值范围: ", paste(range(ld_data$R2, na.rm=TRUE), collapse=" - "))  # 抽样  set.seed(42)  if (nrow(ld_data) &gt; nsample) {    ld_plot &lt;- ld_data %&gt;% sample_n(nsample)  } else {    ld_plot &lt;- ld_data  }  # 画图  plot &lt;- ggplot(ld_plot, aes(x=abs(BP_B - BP_A), y=R2)) +    geom_point(alpha=0.3, size=0.6) +    geom_smooth(method="loess", formula=y~x, se=FALSE, linewidth=1, color="red") +    theme_minimal(base_size=14) +    labs(      title="LD Decay",      x="Distance (bp)",      y=expression(r^2)    )    ggsave(output, plot, width=8, height=6, dpi=300)  print(plot)  message("LD衰减图已保存到: ", output)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-结果文件与解读"><a href="#6-结果文件与解读" class="headerlink" title="6. 结果文件与解读"></a>6. 结果文件与解读</h2><h3 id="6-1-LDBlockShow生成文件"><a href="#6-1-LDBlockShow生成文件" class="headerlink" title="6.1 LDBlockShow生成文件"></a>6.1 LDBlockShow生成文件</h3><ul><li><code>LOC105322102_selected_snps.blocks</code>：LD block定义文件</li><li><code>LOC105322102_selected_snps.png/pdf</code>：LD block可视化图</li></ul><h3 id="6-2-R脚本生成文件"><a href="#6-2-R脚本生成文件" class="headerlink" title="6.2 R脚本生成文件"></a>6.2 R脚本生成文件</h3><ul><li><code>ld_decay_high_quality.png</code>：LD衰减组合图</li><li><code>ld_by_distance_bins.png</code>：距离分箱分析图  </li><li><code>ld_detailed_statistics.csv</code>：详细统计表格</li></ul><h3 id="6-3-结果解读"><a href="#6-3-结果解读" class="headerlink" title="6.3 结果解读"></a>6.3 结果解读</h3><ul><li><strong>LD Block图</strong>：显示特定区域的连锁区块结构</li><li><strong>LD衰减图</strong>：展示基因组范围内LD随距离衰减的趋势</li><li><strong>r²分布</strong>：反映整体LD强度分布</li><li><strong>统计表格</strong>：提供量化的LD分析指标</li></ul><h2 id="7-常见问题与解决方案"><a href="#7-常见问题与解决方案" class="headerlink" title="7. 常见问题与解决方案"></a>7. 常见问题与解决方案</h2><h3 id="问题1：样本名包含下划线"><a href="#问题1：样本名包含下划线" class="headerlink" title="问题1：样本名包含下划线"></a>问题1：样本名包含下划线</h3><p><strong>错误信息</strong>：<code>Multiple instances of '_' in sample ID</code><br><strong>解决方案</strong>：使用<code>bcftools reheader</code>修改样本名</p><h3 id="问题2：区域格式错误"><a href="#问题2：区域格式错误" class="headerlink" title="问题2：区域格式错误"></a>问题2：区域格式错误</h3><p><strong>错误信息</strong>：<code>Para [-Region] should be [chr:Start:End]</code><br><strong>解决方案</strong>：确保区域格式为<code>chr:start:end</code></p><h3 id="问题3：R包缺失"><a href="#问题3：R包缺失" class="headerlink" title="问题3：R包缺失"></a>问题3：R包缺失</h3><p><strong>解决方案</strong>：</p><pre class="line-numbers language-r" data-language="r"><code class="language-r">install.packages<span class="token punctuation">(</span>c<span class="token punctuation">(</span><span class="token string">"tidyverse"</span><span class="token punctuation">,</span> <span class="token string">"hexbin"</span><span class="token punctuation">,</span> <span class="token string">"patchwork"</span><span class="token punctuation">,</span> <span class="token string">"viridis"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-技术要点总结"><a href="#8-技术要点总结" class="headerlink" title="8. 技术要点总结"></a>8. 技术要点总结</h2><ol><li><strong>数据预处理是关键</strong>：确保VCF文件格式正确</li><li><strong>精确提取目标区域</strong>：使用bcftools根据位点列表精确提取</li><li><strong>多层次分析</strong>：结合LDBlockShow的区块分析和R的全基因组可视化</li><li><strong>结果验证</strong>：检查生成的图片和统计文件，确保分析质量</li></ol><h2 id="9-应用价值"><a href="#9-应用价值" class="headerlink" title="9. 应用价值"></a>9. 应用价值</h2><p>这个完整流程可以：</p><ul><li><strong>精细分析</strong>：对候选基因区域进行精细LD Block分析</li><li><strong>全局视角</strong>：通过全基因组LD分析了解整体遗传结构</li><li><strong>科研发表</strong>：生成高质量的发表级图片</li><li><strong>育种应用</strong>：为分子标记辅助选择提供依据</li></ul><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><h2 id="看不懂的！"><a href="#看不懂的！" class="headerlink" title="看不懂的！"></a>看不懂的！</h2><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# 傻瓜式一键基因LD分析脚本# 用法: ./auto_gene_ld_oneclick.sh &lt;基因名&gt;set -e# 配置参数GENE_NAME=$1VCF_FILE="/home/wanglab/Ywh/adductor_muscle_scar/Variants/NC_047567.1_results_snps.vcf.gz"GFF_FILE="/path/to/your/genome.gff"  # 请修改为你的GFF文件路径EXTEND_UPSTREAM=50000EXTEND_DOWNSTREAM=50000MAF_THRESHOLD=0.05echo "=== 傻瓜式一键基因LD分析: $GENE_NAME ==="# 检查输入参数if [ -z "$GENE_NAME" ]; then    echo "错误: 请提供基因名作为参数"    echo "用法: $0 &lt;基因名&gt;"    exit 1fi# 检查必要文件if [ ! -f "$VCF_FILE" ]; then    echo "错误: VCF文件不存在: $VCF_FILE"    exit 1fiif [ ! -f "$GFF_FILE" ]; then    echo "错误: GFF文件不存在: $GFF_FILE"    echo "请修改脚本中的GFF_FILE路径"    exit 1fi# 创建工作目录WORK_DIR="LD_analysis_${GENE_NAME}"mkdir -p "$WORK_DIR"cd "$WORK_DIR"echo "工作目录: $(pwd)"# 步骤1: 从GFF文件自动提取基因坐标echo "步骤1: 从GFF文件提取基因坐标..."# 从GFF中提取基因信息（支持多种GFF格式）GENE_INFO=$(grep -w "$GENE_NAME" "$GFF_FILE" | grep -E "(gene|mRNA|transcript)" | head -1)if [ -z "$GENE_INFO" ]; then    echo "错误: 在GFF文件中未找到基因 $GENE_NAME"    echo "尝试模糊匹配..."    GENE_INFO=$(grep "$GENE_NAME" "$GFF_FILE" | grep -E "(gene|mRNA|transcript)" | head -1)    if [ -z "$GENE_INFO" ]; then        echo "错误: 模糊匹配也失败，请检查基因名是否正确"        exit 1    fi    echo "警告: 使用模糊匹配结果"fiecho "找到基因信息: $GENE_INFO"# 解析GFF行（第1列: 染色体, 第4列: 起始, 第5列: 终止）CHROM=$(echo "$GENE_INFO" | awk '{print $1}')GENE_START=$(echo "$GENE_INFO" | awk '{print $4}')GENE_END=$(echo "$GENE_INFO" | awk '{print $5}')# 验证坐标if [ -z "$CHROM" ] || [ -z "$GENE_START" ] || [ -z "$GENE_END" ]; then    echo "错误: 无法从GFF行中解析坐标"    echo "GFF行: $GENE_INFO"    exit 1fiecho "✓ 成功提取基因坐标: $CHROM:$GENE_START-$GENE_END"# 计算分析区域REGION_START=$((GENE_START - EXTEND_UPSTREAM))REGION_END=$((GENE_END + EXTEND_DOWNSTREAM))# 确保起始位置不小于1if [ $REGION_START -lt 1 ]; then    REGION_START=1fiecho "分析区域: $CHROM:$REGION_START-$REGION_END"echo "区域大小: $(( (REGION_END - REGION_START) / 1000 )) kb"# 步骤2: 提取目标区域SNPecho "步骤2: 提取目标区域SNP..."# 方法1: 使用bcftools view -rbcftools view -r "$CHROM:$REGION_START-$REGION_END" "$VCF_FILE" -Ov -o "${GENE_NAME}_region.vcf" 2&gt;/dev/null || {    echo "方法1失败，尝试方法2: 使用BED文件"    echo -e "$CHROM\t$REGION_START\t$REGION_END" &gt; "${GENE_NAME}_region.bed"    bcftools view -T "${GENE_NAME}_region.bed" "$VCF_FILE" -Ov -o "${GENE_NAME}_region.vcf"}# 检查是否提取到SNPSNP_COUNT=$(grep -v "^#" "${GENE_NAME}_region.vcf" | wc -l)echo "提取到 $SNP_COUNT 个SNP"if [ "$SNP_COUNT" -eq 0 ]; then    echo "错误: 在目标区域未找到任何SNP"    exit 1fiif [ "$SNP_COUNT" -lt 10 ]; then    echo "警告: SNP数量较少($SNP_COUNT)，LD分析可能不理想"fi# 步骤3: 样本名处理echo "步骤3: 处理样本名..."bcftools query -l "${GENE_NAME}_region.vcf" &gt; original_samples.txtif [ $? -ne 0 ]; then    echo "错误: 无法读取样本名，VCF文件可能损坏"    exit 1fised 's/_/-/g' original_samples.txt &gt; new_samples.txtbcftools reheader -s new_samples.txt "${GENE_NAME}_region.vcf" -o "${GENE_NAME}_region_fixed.vcf"# 步骤4: 转换为压缩格式echo "步骤4: 准备分析文件..."bgzip -f "${GENE_NAME}_region_fixed.vcf"tabix -p vcf "${GENE_NAME}_region_fixed.vcf.gz"# 步骤5: 运行LDBlockShowecho "步骤5: 进行LD Block分析..."LDBlockShow -InVCF "${GENE_NAME}_region_fixed.vcf.gz" \            -OutPut "${GENE_NAME}_ld_block" \            -Region "$CHROM:$REGION_START:$REGION_END" \            -SeleVar 2 \            -MAF $MAF_THRESHOLD \            -OutPng \            -OutPdf 2&gt;&amp;1 | grep -v "Warning" || {    echo "LDBlockShow完成（可能有一些警告信息）"}# 步骤6: PLINK补充分析echo "步骤6: 进行PLINK LD分析..."plink --vcf "${GENE_NAME}_region_fixed.vcf.gz" \      --double-id \      --make-bed \      --out "${GENE_NAME}_plink" --silentplink --bfile "${GENE_NAME}_plink" \      --r2 \      --ld-window 100 \      --ld-window-kb 1000 \      --ld-window-r2 0 \      --out "${GENE_NAME}_pairwise_ld" --silent# 步骤7: 生成统计报告echo "步骤7: 生成统计报告..."Rscript - &lt;&lt;EOF#!/usr/bin/env Rscriptlibrary(tidyverse)cat("生成统计报告...\n")if (file.exists("${GENE_NAME}_pairwise_ld.ld")) {    ld_data &lt;- read.table("${GENE_NAME}_pairwise_ld.ld", header = TRUE)        # 基本统计    total_pairs &lt;- nrow(ld_data)    mean_r2 &lt;- mean(ld_data\$R2, na.rm = TRUE)    median_r2 &lt;- median(ld_data\$R2, na.rm = TRUE)        stats &lt;- data.frame(        统计项 = c("基因名", "分析区域", "SNP数量", "SNP对数量",                   "平均r²", "中位数r²", "最大r²", "最小r²",                  "强LD对(r²&gt;0.8)", "中等LD对(r²&gt;0.5)", "弱LD对(r²&lt;0.1)"),        数值 = c(            "${GENE_NAME}",            paste0("${CHROM}:${REGION_START}-${REGION_END}"),            "${SNP_COUNT}",            format(total_pairs, big.mark = ","),            round(mean_r2, 4),            round(median_r2, 4),            round(max(ld_data\$R2, na.rm = TRUE), 4),            round(min(ld_data\$R2, na.rm = TRUE), 4),            paste0(sum(ld_data\$R2 &gt; 0.8, na.rm = TRUE), " (",                    round(sum(ld_data\$R2 &gt; 0.8, na.rm = TRUE)/total_pairs*100, 1), "%)"),            paste0(sum(ld_data\$R2 &gt; 0.5, na.rm = TRUE), " (",                    round(sum(ld_data\$R2 &gt; 0.5, na.rm = TRUE)/total_pairs*100, 1), "%)"),            paste0(sum(ld_data\$R2 &lt; 0.1, na.rm = TRUE), " (",                    round(sum(ld_data\$R2 &lt; 0.1, na.rm = TRUE)/total_pairs*100, 1), "%)")        )    )        write.csv(stats, "${GENE_NAME}_ld_statistics.csv", row.names = FALSE, fileEncoding = "UTF-8")        # 生成简单的文本报告    sink("${GENE_NAME}_analysis_report.txt")    cat("=== 基因LD分析报告 ===\n")    cat("基因名: ${GENE_NAME}\n")    cat("分析时间: ", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n")    cat("分析区域: ${CHROM}:${REGION_START}-${REGION_END}\n")    cat("SNP数量: ${SNP_COUNT}\n")    cat("SNP对数量: ", format(total_pairs, big.mark = ","), "\n")    cat("平均LD(r²): ", round(mean_r2, 4), "\n")    cat("LD强度分布:\n")    cat("  强LD(r²&gt;0.8): ", sum(ld_data\$R2 &gt; 0.8, na.rm = TRUE),         "(", round(sum(ld_data\$R2 &gt; 0.8, na.rm = TRUE)/total_pairs*100, 1), "%)\n")    cat("  中等LD(r²&gt;0.5): ", sum(ld_data\$R2 &gt; 0.5, na.rm = TRUE),         "(", round(sum(ld_data\$R2 &gt; 0.5, na.rm = TRUE)/total_pairs*100, 1), "%)\n")    cat("  弱LD(r²&lt;0.1): ", sum(ld_data\$R2 &lt; 0.1, na.rm = TRUE),         "(", round(sum(ld_data\$R2 &lt; 0.1, na.rm = TRUE)/total_pairs*100, 1), "%)\n")    sink()        cat("✓ 统计报告生成完成\n")} else {    cat("警告: 未找到PLINK LD结果文件\n")}EOF# 步骤8: 清理和总结echo "步骤8: 清理临时文件..."rm -f original_samples.txt new_samples.txt "${GENE_NAME}_region.vcf" "${GENE_NAME}_region.bed"echo ""echo "=== 分析完成! ==="echo "📁 工作目录: $(pwd)"echo ""echo "📊 生成的结果文件:"echo "   📈 ${GENE_NAME}_ld_block.png    - LD Block图"echo "   📄 ${GENE_NAME}_ld_block.pdf    - LD Block图(矢量)"echo "   📋 ${GENE_NAME}_ld_statistics.csv - 详细统计表格"echo "   📝 ${GENE_NAME}_analysis_report.txt - 分析报告"echo "   💾 ${GENE_NAME}_pairwise_ld.ld  - 原始LD数据"echo ""echo "🔍 分析摘要:"echo "   基因: $GENE_NAME"echo "   区域: $CHROM:$REGION_START-$REGION_END"echo "   SNP数量: $SNP_COUNT"echo "   上下游扩展: ${EXTEND_UPSTREAM}bp"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-首先修改脚本中的GFF文件路径："><a href="#1-首先修改脚本中的GFF文件路径：" class="headerlink" title="1. 首先修改脚本中的GFF文件路径："></a>1. 首先修改脚本中的GFF文件路径：</h3><p>bash</p><pre class="line-numbers language-none"><code class="language-none"># 编辑脚本，修改这一行：GFF_FILE="/path/to/your/genome.gff"  # 改为你实际的GFF文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-给脚本执行权限："><a href="#2-给脚本执行权限：" class="headerlink" title="2. 给脚本执行权限："></a>2. 给脚本执行权限：</h3><p>bash</p><pre class="line-numbers language-none"><code class="language-none">chmod +x auto_gene_ld_oneclick.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-一键运行："><a href="#3-一键运行：" class="headerlink" title="3. 一键运行："></a>3. 一键运行：</h3><p>bash</p><pre class="line-numbers language-none"><code class="language-none">./auto_gene_ld_oneclick.sh LOC105322102./auto_gene_ld_oneclick.sh LOC105325689./auto_gene_ld_oneclick.sh 任何基因名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="脚本特点"><a href="#脚本特点" class="headerlink" title="脚本特点"></a>脚本特点</h2><p>✅ <strong>完全自动化</strong>：只需提供基因名<br>✅ <strong>智能解析</strong>：自动从GFF提取基因坐标<br>✅ <strong>错误处理</strong>：多种备选方案，提高成功率<br>✅ <strong>详细报告</strong>：生成完整的分析报告<br>✅ <strong>友好输出</strong>：清晰的进度提示和结果汇总</p><h2 id="支持的GFF格式"><a href="#支持的GFF格式" class="headerlink" title="支持的GFF格式"></a>支持的GFF格式</h2><ul><li>NCBI GFF3</li><li>Ensembl GFF3</li><li>其他标准GFF格式</li><li>自动识别gene/mRNA/transcript行</li></ul><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>通过LDBlockShow和R的有机结合，研究人员可以从不同尺度全面理解基因组的连锁不平衡结构，为群体遗传学和育种研究提供强有力的技术支持。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：LD Block分析、连锁不平衡、LDBlockShow、群体遗传学、VCF处理、基因组可视化&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;使用LDBlockShow进行LD-Block分析&quot;&gt;&lt;a href=&quot;#使用LDBlockShow进</summary>
      
    
    
    
    <category term="Linux" scheme="https://0hhhhhh0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>文件处理与数据筛选-终端</title>
    <link href="https://0hhhhhh0.github.io/2025/10/31/wen-jian-chu-li-yu-shu-ju-shai-xuan-liu-cheng/"/>
    <id>https://0hhhhhh0.github.io/2025/10/31/wen-jian-chu-li-yu-shu-ju-shai-xuan-liu-cheng/</id>
    <published>2025-10-31T02:26:00.000Z</published>
    <updated>2025-10-31T02:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件处理与数据筛选流程"><a href="#文件处理与数据筛选流程" class="headerlink" title="文件处理与数据筛选流程"></a>文件处理与数据筛选流程</h1><h2 id="流程概述"><a href="#流程概述" class="headerlink" title="流程概述"></a>流程概述</h2><p>从两个基因组数据文件中筛选共有基因位点，生成TSV格式结果。</p><h2 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h2><h3 id="1-文件格式标准化"><a href="#1-文件格式标准化" class="headerlink" title="1. 文件格式标准化"></a>1. 文件格式标准化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dos2unix color_GWAS.anno.xls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>作用：</strong> Windows转Unix换行符</p><h3 id="2-CSV转TSV格式"><a href="#2-CSV转TSV格式" class="headerlink" title="2. CSV转TSV格式"></a>2. CSV转TSV格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'1s/^\xEF\xBB\xBF//'</span> 红标0.7与黄标与GWAS共有.csv <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">','</span> <span class="token string">'\t'</span> <span class="token operator">&gt;</span> 红标0.7与黄标与GWAS共有.tsv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>作用：</strong> 去除BOM头，逗号转制表符</p><h3 id="3-数据筛选"><a href="#3-数据筛选" class="headerlink" title="3. 数据筛选"></a>3. 数据筛选</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'BEGIN {OFS="\t"}      NR==FNR {if(FNR&gt;1) start_values[$2] = 1; next}      FNR==1 {print; next}      $2 in start_values'</span> color_GWAS.anno.xls 红标0.7与黄标与GWAS共有.tsv <span class="token operator">&gt;</span> filtered_three2one.tsv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>逻辑：</strong></p><ul><li>读取第一个文件的<code>第二列</code>作为筛选依据</li><li><code>保留</code>第二个文件中<code>匹配</code>的数据行</li><li><code>输出</code>制表符分隔的结果</li></ul><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><ul><li><strong>输入：</strong> color_GWAS.anno.xls, 红标0.7与黄标与GWAS共有.csv</li><li><strong>输出：</strong> filtered_three2one.tsv（共有位点数据）</li></ul><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>数据整合筛选、多源数据筛选、文件格式标准化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件处理与数据筛选流程&quot;&gt;&lt;a href=&quot;#文件处理与数据筛选流程&quot; class=&quot;headerlink&quot; title=&quot;文件处理与数据筛选流程&quot;&gt;&lt;/a&gt;文件处理与数据筛选流程&lt;/h1&gt;&lt;h2 id=&quot;流程概述&quot;&gt;&lt;a href=&quot;#流程概述&quot; class=&quot;</summary>
      
    
    
    
    <category term="Linux" scheme="https://0hhhhhh0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>重测序下机数据处理</title>
    <link href="https://0hhhhhh0.github.io/2025/10/31/chong-ce-xu-xia-ji-shu-ju-chu-li/"/>
    <id>https://0hhhhhh0.github.io/2025/10/31/chong-ce-xu-xia-ji-shu-ju-chu-li/</id>
    <published>2025-10-31T01:26:00.000Z</published>
    <updated>2025-10-31T01:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="🧬-重测序数据标准处理流程详解"><a href="#🧬-重测序数据标准处理流程详解" class="headerlink" title="🧬 重测序数据标准处理流程详解"></a>🧬 重测序数据标准处理流程详解</h1><p>本篇博客详细解析从 <strong>下机 FastQ 数据</strong> 到 <strong>变异检测输入文件（gVCF）</strong> 的完整流程。<br>流程基于 Linux 环境与 GATK 推荐实践，并结合并行优化与磁盘空间节省策略。<br>适合刚接触重测序分析的新手，也适用于需要高效自动化处理的研究人员。</p><hr><p>环境：<code>conda activate py310</code></p><h2 id="一、Fastp-质控与过滤（run-fastpl-sh）"><a href="#一、Fastp-质控与过滤（run-fastpl-sh）" class="headerlink" title="一、Fastp 质控与过滤（run_fastpl.sh）"></a>一、Fastp 质控与过滤（<code>run_fastpl.sh</code>）</h2><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# =========================================# Fastp 并行质控脚本（最终版本 + 已完成计数修正）# Author: Carl Hansen# Date: $(date +"%Y-%m-%d")# =========================================INPUT_DIR="/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909-b1/Raw_data"OUTPUT_DIR="/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909-b1/Clean_data"REPORT_DIR="${OUTPUT_DIR}/reports"LOG_DIR="${OUTPUT_DIR}/logs"THREADS_PER_JOB=6   # 每个样本 fastp 线程数JOBS=2              # 同时并行样本数mkdir -p "$OUTPUT_DIR" "$REPORT_DIR" "$LOG_DIR"echo "====================================="echo " Fastp 并行质控开始: $(date)"echo " 输入目录: $INPUT_DIR"echo " 输出目录: $OUTPUT_DIR"echo " 每任务线程: $THREADS_PER_JOB"echo " 并行样本数: $JOBS"echo "====================================="# 获取所有 R1 文件samples=($(find "$INPUT_DIR" -name "*.R1.fastq.gz" | sort))total=${#samples[@]}if [[ $total -eq 0 ]]; then    echo "[错误] 未找到任何 R1.fastq.gz 文件，请检查输入目录"    exit 1fi# 计数文件 + 初始化为已完成样本数COUNT_FILE="${LOG_DIR}/progress_count.tmp"completed=$(find "$REPORT_DIR" -name "*_fastp.json" -size +0 | wc -l)echo $completed &gt; "$COUNT_FILE"# fastp 处理函数run_fastp() {    fq1=$1    sample=$(basename "$(dirname "$fq1")")    fq2="${fq1/.R1.fastq.gz/.R2.fastq.gz}"    out1="${OUTPUT_DIR}/${sample}_clean.R1.fastq.gz"    out2="${OUTPUT_DIR}/${sample}_clean.R2.fastq.gz"    report="${REPORT_DIR}/${sample}_fastp.json"        # 检查 JSON 是否存在且非空    if [[ -s "$report" ]]; then        echo "[跳过] $sample 已完成 ✅"        return 0    fi        # ⚡ 更新进度计数（并行安全）    count=$( ( flock 9        c=$(cat "$COUNT_FILE")        c=$((c+1))        echo $c &gt; "$COUNT_FILE"        echo $c    ) 9&gt;"$COUNT_FILE.lock" )        echo "[进度] $count/$total 样本: $sample"    echo "[启动] $sample 开始处理..."        fastp \        -i "$fq1" \        -I "$fq2" \        -o "$out1" \        -O "$out2" \        -h "${REPORT_DIR}/${sample}_fastp.html" \        -j "$report" \        -w $THREADS_PER_JOB \        &gt; "${LOG_DIR}/${sample}.log" 2&gt;&amp;1        if [[ $? -eq 0 &amp;&amp; -s "$report" ]]; then        echo "[完成] $sample ✅"    else        echo "[失败] $sample ❌，请检查 ${LOG_DIR}/${sample}.log"    fi}export -f run_fastpexport OUTPUT_DIR REPORT_DIR LOG_DIR THREADS_PER_JOB total COUNT_FILE# 并行执行printf "%s\n" "${samples[@]}" | parallel --line-buffer -j $JOBS run_fastp {}# 清理计数文件rm -f "$COUNT_FILE" "$COUNT_FILE.lock"echo "====================================="echo " Fastp 质控全部完成: $(date)"echo "报告目录: $REPORT_DIR"echo "日志目录: $LOG_DIR"echo "====================================="<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-📘-脚本功能概述"><a href="#1-📘-脚本功能概述" class="headerlink" title="1.📘 脚本功能概述"></a>1.📘 脚本功能概述</h3><p>该脚本使用 <strong>Fastp</strong> 对原始下机数据（Raw_data）进行 <strong>质量控制（QC）与过滤</strong>，并利用 GNU Parallel 实现多样本并行。</p><blockquote><p><strong>主要目的：</strong></p><ul><li>清除低质量 reads、含接头序列的 reads；</li><li>生成交互式 HTML 报告；</li><li>并行加速多样本处理；</li><li>避免重复运行，自动跳过已完成样本。</li></ul></blockquote><h3 id="2-📂-输入与输出目录"><a href="#2-📂-输入与输出目录" class="headerlink" title="2.📂 输入与输出目录"></a>2.📂 输入与输出目录</h3><table><thead><tr><th>路径</th><th>说明</th></tr></thead><tbody><tr><td><code>/Raw_data/</code></td><td>原始下机数据，包含 <code>R1</code>、<code>R2</code> 文件</td></tr><tr><td><code>/Clean_data/</code></td><td>输出的过滤后数据</td></tr><tr><td><code>/reports/</code></td><td>Fastp 的 HTML + JSON 报告</td></tr><tr><td><code>/logs/</code></td><td>每个样本的运行日志</td></tr></tbody></table><h3 id="3-⚙️-核心流程解析"><a href="#3-⚙️-核心流程解析" class="headerlink" title="3.⚙️ 核心流程解析"></a>3.⚙️ 核心流程解析</h3><ol><li><p><strong>样本自动检测</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">samples</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span><span class="token function">find</span> <span class="token string">"<span class="token variable">$INPUT_DIR</span>"</span> <span class="token parameter variable">-name</span> <span class="token string">"*.R1.fastq.gz"</span><span class="token variable">)</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>自动扫描所有 R1 文件，自动识别配对的 R2。</p><ol start="2"><li><p><strong>并行质控</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">parallel --line-buffer <span class="token parameter variable">-j</span> <span class="token variable">$JOBS</span> run_fastp <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>parallel</code> 控制同时处理的样本数量（默认 2 个）。</p></li><li><p><strong>进度追踪机制</strong><br> 每完成一个样本，进度计数自动更新，例如：</p><pre class="line-numbers language-none"><code class="language-none">[进度] 3/24 样本: BM_S_3[完成] BM_S_3 ✅<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>结果检查</strong><br> 若 JSON 报告存在且非空，则自动跳过该样本，节省时间。</p></li></ol><h3 id="4-✅-运行结果"><a href="#4-✅-运行结果" class="headerlink" title="4.✅ 运行结果"></a>4.✅ 运行结果</h3><ul><li><p>输出文件示例：</p><pre class="line-numbers language-none"><code class="language-none">Clean_data/BM_S_1_clean.R1.fastq.gzClean_data/BM_S_1_clean.R2.fastq.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>质控报告（浏览器查看）：</p><pre class="line-numbers language-none"><code class="language-none">Clean_data/reports/BM_S_1_fastp.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><h2 id="二、比对与-gVCF-生成（run-bwa-vcf-sh）"><a href="#二、比对与-gVCF-生成（run-bwa-vcf-sh）" class="headerlink" title="二、比对与 gVCF 生成（run_bwa_vcf.sh）"></a>二、比对与 gVCF 生成（<code>run_bwa_vcf.sh</code>）</h2><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# =========================================# 节省空间的全量样本处理脚本 - 并行生成gVCF# =========================================CLEAN_DIR="/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909-b1/Clean_data"REF="/home/wanglab/Ywh/adductor_muscle_scar/Genome/GCF_963853765.1_xbMagGiga1.1_genomic.fna"OUT_DIR="/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909-b1/Align"LOG_DIR="${OUT_DIR}/logs"THREADS=12BATCH_GVCF=12mkdir -p "$OUT_DIR" "$LOG_DIR"echo "[INFO] 节省空间版全量样本流程开始: $(date)"echo "[INFO] gVCF将并行生成（每批12个同时运行）"echo "====================================="# 索引检查[[ ! -f "${REF}.bwt" ]] &amp;&amp; echo "[INFO] 生成BWA索引..." &amp;&amp; bwa index $REF[[ ! -f "${REF}.fai" ]] &amp;&amp; echo "[INFO] 生成samtools faidx..." &amp;&amp; samtools faidx $REFDICT_FILE="${REF%.*}.dict"[[ ! -f "$DICT_FILE" ]] &amp;&amp; echo "[INFO] 生成GATK序列字典..." &amp;&amp; gatk CreateSequenceDictionary -R $REF -O $DICT_FILE# 获取样本列表samples=($(find "$CLEAN_DIR" -name "*_clean.R1.fastq.gz" | sort))total=${#samples[@]}if [[ $total -eq 0 ]]; then    echo "[ERROR] 未找到任何 clean fastq 文件"    exit 1fiecho "[INFO] 总样本数: $total"# 获取已存在的BAM和gVCF文件existing_bams=($(find "$OUT_DIR" -name "*.sorted.bam" | sort))processed_gvcfs=($(find "$OUT_DIR" -name "*.g.vcf.gz" | sort))echo "[INFO] 已存在BAM文件: ${#existing_bams[@]} 个"echo "[INFO] 已生成gVCF文件: ${#processed_gvcfs[@]} 个"# -------------------------------# 单样本比对函数（输出未去重BAM）# -------------------------------run_alignment() {    fq1=$1    fq2=${fq1/.R1/.R2}    sample=$(basename "$fq1" | sed 's/_clean.R1.fastq.gz//')    bam="$OUT_DIR/${sample}.sorted.bam"    log="$LOG_DIR/${sample}.bwa.log"    # 添加跳过已存在BAM的逻辑    if [[ -s "$bam" ]]; then        echo "[INFO] $sample BAM已存在，跳过比对 ✅"        return 0    fi        echo "====================================="    echo "[INFO $(date '+%Y-%m-%d %H:%M:%S')] [$sample] BWA MEM 比对开始..."        if [[ ! -s "$fq1" ]]; then        echo "[ERROR] $sample 的 R1 文件不存在: $fq1" | tee -a "$log"        exit 1    fi        if [[ -s "$fq2" ]]; then        echo "[INFO] 检测到双端测序: $fq1 + $fq2" | tee -a "$log"        bwa mem -t $THREADS -M \            -R "@RG\tID:${sample}\tSM:${sample}\tPL:ILLUMINA" \            $REF $fq1 $fq2 \            2&gt; &gt;(tee -a "$log" &gt;&amp;2) \        | samtools sort -@ 4 -o "$bam" -    else        echo "[WARN] 未检测到 R2，仅单端比对: $fq1" | tee -a "$log"        bwa mem -t $THREADS -M \            -R "@RG\tID:${sample}\tSM:${sample}\tPL:ILLUMINA" \            $REF $fq1 \            2&gt; &gt;(tee -a "$log" &gt;&amp;2) \        | samtools sort -@ 4 -o "$bam" -    fi        if [[ $? -ne 0 || ! -s "$bam" ]]; then        echo "[ERROR] $sample 比对失败!" | tee -a "$log"        exit 1    fi        echo "[INFO $(date '+%Y-%m-%d %H:%M:%S')] [$sample] 比对完成 ✅ 输出: $bam"}# -------------------------------# gVCF生成函数（独立可执行）# -------------------------------generate_gvcf() {    local bam="$1"    local sample=$(basename "$bam" .sorted.bam)    local bam_markdup="${OUT_DIR}/${sample}.sorted.markdup.bam"    local metrics="${OUT_DIR}/${sample}.markdup.metrics.txt"    local gvcf="${OUT_DIR}/${sample}.g.vcf.gz"    local log_file="${LOG_DIR}/${sample}.gvcf.log"    if [[ -s "$gvcf" ]]; then        echo "[INFO] $sample gVCF已存在，跳过 ✅"        return 0    fi        echo "[INFO] [$sample] MarkDuplicates + gVCF 开始: $(date)" | tee -a "$log_file"    local start=$(date +%s)        # 1️⃣ MarkDuplicates    gatk MarkDuplicates \        -I "$bam" \        -O "$bam_markdup" \        --METRICS_FILE "$metrics" \        --CREATE_INDEX true \        --VALIDATION_STRINGENCY LENIENT \        --TMP_DIR "${OUT_DIR}/tmp" \        2&gt;&gt; "$log_file"        if [[ $? -eq 0 ]]; then        rm -f "$bam" "${bam}.bai"    fi        # 2️⃣ gVCF生成（单线程）    gatk HaplotypeCaller \        -R "$REF" \        -I "$bam_markdup" \        -O "$gvcf" \        -ERC GVCF \        --native-pair-hmm-threads 1 \        2&gt;&gt; "$log_file"        if [[ $? -eq 0 ]]; then        gatk IndexFeatureFile -I "$gvcf" 2&gt;&gt; "$log_file"        rm -f "$bam_markdup" "${bam_markdup}.bai"    fi        local end=$(date +%s)    local runtime=$((end-start))    echo "[INFO] [$sample] gVCF完成 ✅ (耗时: $runtime 秒)" | tee -a "$log_file"}# 导出函数和环境变量供parallel使用export -f generate_gvcfexport OUT_DIR REF LOG_DIR# -------------------------------# 1️⃣ 先处理已存在的BAM文件（并行生成gVCF）# -------------------------------if [[ ${#existing_bams[@]} -gt 0 ]]; then    echo "[INFO] 开始处理已存在的 ${#existing_bams[@]} 个BAM文件..."        # 过滤掉已有gVCF的BAM文件    need_process_bams=()    for bam in "${existing_bams[@]}"; do        sample=$(basename "$bam" .sorted.bam)        gvcf="${OUT_DIR}/${sample}.g.vcf.gz"        if [[ ! -s "$gvcf" ]]; then            need_process_bams+=("$bam")        fi    done        echo "[INFO] 需要处理gVCF的BAM文件: ${#need_process_bams[@]} 个"        # 分批并行处理    i=0    while [[ $i -lt ${#need_process_bams[@]} ]]; do        batch=("${need_process_bams[@]:$i:$BATCH_GVCF}")        batch_num=$((i/BATCH_GVCF+1))        echo "[INFO] 并行生成gVCF批次 ${batch_num}: ${#batch[@]} 个样本"                # 使用parallel同时运行12个gVCF生成任务        printf "%s\n" "${batch[@]}" | parallel -j $BATCH_GVCF --eta \            "generate_gvcf {}"                i=$((i + BATCH_GVCF))    doneelse    echo "[INFO] 没有已存在的BAM文件需要处理"fi# -------------------------------# 2️⃣ 获取未比对的样本列表# -------------------------------processed_samples=()for bam in "${existing_bams[@]}"; do    sample=$(basename "$bam" .sorted.bam)    processed_samples+=("$sample")doneneed_align_samples=()for fq1 in "${samples[@]}"; do    sample=$(basename "$fq1" | sed 's/_clean.R1.fastq.gz//')    if [[ ! " ${processed_samples[@]} " =~ " ${sample} " ]]; then        need_align_samples+=("$fq1")    fidoneecho "[INFO] 需要比对新样本: ${#need_align_samples[@]} 个"# -------------------------------# 3️⃣ 比对新的样本并分批并行生成gVCF# -------------------------------if [[ ${#need_align_samples[@]} -gt 0 ]]; then    count=0    batch_count=0    current_batch_bams=()        for fq1 in "${need_align_samples[@]}"; do        # 比对单个样本        run_alignment "$fq1"                sample=$(basename "$fq1" | sed 's/_clean.R1.fastq.gz//')        current_batch_bams+=("$OUT_DIR/${sample}.sorted.bam")        count=$((count+1))                # 每比对完BATCH_GVCF个样本，并行生成一批gVCF        if [[ $count -ge $BATCH_GVCF ]]; then            batch_count=$((batch_count+1))            echo "[INFO] 并行生成新样本gVCF批次 ${batch_count}: ${#current_batch_bams[@]} 个样本"                        # 使用parallel同时运行12个gVCF生成任务            printf "%s\n" "${current_batch_bams[@]}" | parallel -j $BATCH_GVCF --eta \                "generate_gvcf {}"                        count=0            current_batch_bams=()        fi    done        # 处理剩余的新样本    if [[ $count -gt 0 ]]; then        echo "[INFO] 并行处理剩余新样本gVCF: ${#current_batch_bams[@]} 个"        printf "%s\n" "${current_batch_bams[@]}" | parallel -j $BATCH_GVCF --eta \            "generate_gvcf {}"    fielse    echo "[INFO] 没有需要比对的新样本"fi# 清理临时目录rm -rf "${OUT_DIR}/tmp" 2&gt;/dev/nullecho "[INFO] 全部样本处理完成: $(date)"echo "[INFO] 最终gVCF文件数: $(find "$OUT_DIR" -name "*.g.vcf.gz" | wc -l)"echo "[INFO] 输出目录: $OUT_DIR"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="📘-功能概述"><a href="#📘-功能概述" class="headerlink" title="📘 功能概述"></a>📘 功能概述</h3><p>该脚本从 <strong>Clean FastQ</strong> 文件出发，自动完成以下步骤：</p><ol><li>参考基因组索引检查；</li><li>BWA 比对生成 BAM 文件；</li><li>GATK 去重（MarkDuplicates）；</li><li>生成每个样本的 gVCF；</li><li>自动跳过已完成步骤；</li><li>并行分批执行以节省内存与磁盘。</li></ol><h3 id="📂-输入与输出目录"><a href="#📂-输入与输出目录" class="headerlink" title="📂 输入与输出目录"></a>📂 输入与输出目录</h3><table><thead><tr><th>路径</th><th>内容</th></tr></thead><tbody><tr><td><code>/Clean_data/</code></td><td>fastp 过滤后的 reads</td></tr><tr><td><code>/Align/</code></td><td>比对与 gVCF 输出目录</td></tr><tr><td><code>/Align/logs/</code></td><td>每个阶段日志</td></tr></tbody></table><h3 id="⚙️-步骤解析"><a href="#⚙️-步骤解析" class="headerlink" title="⚙️ 步骤解析"></a>⚙️ 步骤解析</h3><h4 id="1️⃣-参考基因组准备"><a href="#1️⃣-参考基因组准备" class="headerlink" title="1️⃣ 参考基因组准备"></a>1️⃣ 参考基因组准备</h4><p>脚本自动检测并生成：</p><ul><li><code>.bwt</code> → BWA 比对索引</li><li><code>.fai</code> → samtools 索引</li><li><code>.dict</code> → GATK 序列字典</li></ul><h4 id="2️⃣-样本比对（BWA-MEM）"><a href="#2️⃣-样本比对（BWA-MEM）" class="headerlink" title="2️⃣ 样本比对（BWA MEM）"></a>2️⃣ 样本比对（BWA MEM）</h4><ul><li>对每个样本进行比对；</li><li>自动识别单双端；</li><li>输出排序 BAM；</li><li>生成日志文件记录耗时与状态。</li></ul><p>示例输出：</p><pre class="line-numbers language-none"><code class="language-none">BM_S_1.sorted.bamlogs/BM_S_1.bwa.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3️⃣-去重与-gVCF-生成"><a href="#3️⃣-去重与-gVCF-生成" class="headerlink" title="3️⃣ 去重与 gVCF 生成"></a>3️⃣ <del>去重与 gVCF 生成</del></h4><blockquote><p>去重速度过慢，影响整体运行事件，放到下一步多线程运行</p></blockquote><p>每个 BAM 文件通过 GATK 处理：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gatk MarkDuplicatesgatk HaplotypeCaller <span class="token parameter variable">-ERC</span> GVCF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong></p><ul><li>MarkDuplicates 去除 PCR 重复；</li><li>HaplotypeCaller 输出每个样本的 <code>g.vcf.gz</code>；</li><li>自动生成索引 <code>.tbi</code>。</li></ul></blockquote><h4 id="4️⃣-并行控制与容错机制"><a href="#4️⃣-并行控制与容错机制" class="headerlink" title="4️⃣ 并行控制与容错机制"></a>4️⃣ 并行控制与容错机制</h4><ul><li>每批最多同时处理 12 个样本；</li><li>自动检测哪些样本已完成；</li><li>失败样本记录日志但不阻塞后续运行；</li><li>自动清理中间文件，节省磁盘空间。</li></ul><h3 id="✅-运行结果"><a href="#✅-运行结果" class="headerlink" title="✅ 运行结果"></a>✅ 运行结果</h3><p>输出结构：</p><pre class="line-numbers language-none"><code class="language-none">Align/├── BM_S_1.g.vcf.gz├── BM_S_2.g.vcf.gz└── logs/    ├── BM_S_1.gvcf.log    └── BM_S_2.bwa.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结束后统计输出：</p><pre class="line-numbers language-none"><code class="language-none">[INFO] 最终gVCF文件数: 36[INFO] 输出目录: Align/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h2 id="三、分染色体批量-gVCF-生成（batch-gvcf-sh）"><a href="#三、分染色体批量-gVCF-生成（batch-gvcf-sh）" class="headerlink" title="三、分染色体批量 gVCF 生成（batch_gvcf.sh）"></a>三、分染色体批量 gVCF 生成（<code>batch_gvcf.sh</code>）</h2><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash# =========================================# 12CPU服务器安全版分阶段处理脚本（按染色体批量并发，自动计算并发）# 输出结构: /mnt/disk2/Align/gvcf/chr*/sample.g.vcf.gz# 保留 MarkDuplicates 阶段 / 日志 / 负载检查 / TMP 清理# =========================================set -o pipefailumask 002REF="/home/wanglab/Ywh/adductor_muscle_scar/Genome/GCF_963853765.1_xbMagGiga1.1_genomic.fna"SOURCE_DIR="/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909-b1/Align"OUT_DIR="/mnt/disk2/Align"GVCF_DIR="${OUT_DIR}/gvcf"LOG_DIR="${OUT_DIR}/logs"TMP_DIR="/mnt/disk2/tmp"# --------- 用户可调参数 ----------# 并发/线程设置（按需修改）STAGE1_CONCURRENT=5      # MarkDuplicates 并发数（I/O密集）STAGE2_CONCURRENT=5      # 最大染色体并行任务上限（逻辑上再受可用CPU约束）GVCF_THREADS=2           # 每个 HaplotypeCaller 任务线程数# 系统预留与阈值RESERVED_CPUS=2          # 预留给系统的 CPU 数MAX_LOAD=10.0            # 系统平均负载阈值（超过则等待）MIN_FREE_MEM_GB=4        # 最低可用内存 (GB)# ---------------------------------mkdir -p "$OUT_DIR" "$GVCF_DIR" "$LOG_DIR" "$TMP_DIR"echo "[INFO] 启动时间: $(date)"echo "[INFO] REF: $REF"echo "[INFO] SOURCE_DIR: $SOURCE_DIR"echo "[INFO] OUT_DIR: $OUT_DIR"echo "[INFO] GVCF_DIR: $GVCF_DIR"echo "[INFO] STAGE1_CONCURRENT: $STAGE1_CONCURRENT"echo "[INFO] STAGE2_CONCURRENT (user cap): $STAGE2_CONCURRENT"echo "[INFO] GVCF_THREADS (per task): $GVCF_THREADS"echo "[INFO] RESERVED_CPUS: $RESERVED_CPUS"echo "====================================="# -------------------------------# 系统/资源 检查函数# -------------------------------check_system_health() {    # return 0 = ok, 1 = not ok (caller should sleep &amp; retry)    local current_load    current_load=$(uptime | awk -F'load average:' '{print $2}' | cut -d, -f1 | tr -d ' ')    local available_mem    available_mem=$(free -g | awk 'NR==2{print $7}')    echo "[SYSTEM] 当前负载: $current_load, 可用内存: ${available_mem}G"    # load threshold    if (( $(echo "$current_load &gt; $MAX_LOAD" | bc -l) )); then        echo "[WARN] 系统负载过高 ($current_load &gt; $MAX_LOAD)"        return 1    fi    # memory threshold    if [[ $available_mem -lt $MIN_FREE_MEM_GB ]]; then        echo "[WARN] 可用内存不足 (${available_mem}G &lt; ${MIN_FREE_MEM_GB}G)"        return 1    fi    return 0}# -------------------------------# 参考基因组索引检查# -------------------------------if [[ ! -f "${REF}" ]]; then    echo "[ERROR] 参考基因组文件不存在: $REF"    exit 1fi[[ ! -f "${REF}.fai" ]] &amp;&amp; echo "[INFO] 生成 samtools faidx..." &amp;&amp; samtools faidx "$REF"DICT_FILE="${REF%.*}.dict"[[ ! -f "$DICT_FILE" ]] &amp;&amp; echo "[INFO] 生成 GATK 序列字典..." &amp;&amp; gatk CreateSequenceDictionary -R "$REF" -O "$DICT_FILE"# -------------------------------# 磁盘空间检查# -------------------------------disk_usage=$(df -h "$OUT_DIR" | awk 'NR==2 {print $5}' | sed 's/%//')echo "[INFO] $OUT_DIR 磁盘使用率: ${disk_usage}%"if [[ $disk_usage -gt 90 ]]; then    echo "[ERROR] 磁盘使用率 &gt; 90%，请清理后再运行"    exit 1fi# -------------------------------# 发现 BAM 列表（已排序 BAM）# -------------------------------bam_files=($(find "$SOURCE_DIR" -type f -name "*.sorted.bam" | sort))total_bam=${#bam_files[@]}if [[ $total_bam -eq 0 ]]; then    echo "[ERROR] 未找到任何已排序的BAM文件（pattern: *.sorted.bam） in $SOURCE_DIR"    exit 1fiecho "[INFO] 找到 $total_bam 个已排序BAM文件"# -------------------------------# 计算实际可并发染色体数（受CPU与用户上限双重约束）# -------------------------------TOTAL_CPUS=$(nproc --all 2&gt;/dev/null || echo 12)USABLE_CPUS=$(( TOTAL_CPUS - RESERVED_CPUS ))if [[ $USABLE_CPUS -lt 1 ]]; then    echo "[ERROR] 可用 CPU 太少: $USABLE_CPUS"    exit 1fi# 理论上最大同时运行的 HaplotypeCaller 任务数 = floor(USABLE_CPUS / GVCF_THREADS)AUTO_STAGE2_MAX=$(( USABLE_CPUS / GVCF_THREADS ))if [[ $AUTO_STAGE2_MAX -lt 1 ]]; then AUTO_STAGE2_MAX=1; fi# 最终并发取 min(user cap, auto cap)if [[ $STAGE2_CONCURRENT -gt $AUTO_STAGE2_MAX ]]; then    EFFECTIVE_STAGE2_CONCURRENT=$AUTO_STAGE2_MAXelse    EFFECTIVE_STAGE2_CONCURRENT=$STAGE2_CONCURRENTfiecho "[INFO] 总 CPU: $TOTAL_CPUS, 可用 CPU (扣除 reserved): $USABLE_CPUS"echo "[INFO] 按每任务 $GVCF_THREADS 线程计算，自动可并发数: $AUTO_STAGE2_MAX"echo "[INFO] 最终 STAGE2 并发数（生效）: $EFFECTIVE_STAGE2_CONCURRENT"# -------------------------------# MarkDuplicates 函数# -------------------------------run_markduplicates() {    local bam="$1"    local sample    sample=$(basename "$bam" .sorted.bam)    local bam_markdup="${OUT_DIR}/${sample}.sorted.markdup.bam"    local metrics="${OUT_DIR}/${sample}.markdup.metrics.txt"    local log_file="${LOG_DIR}/${sample}.markdup.log"    if [[ -s "$bam_markdup" ]]; then        echo "[INFO] [$sample] MarkDuplicates 已存在，跳过"        return 0    fi        echo "[INFO] [$sample] MarkDuplicates 开始: $(date)" | tee -a "$log_file"    local start=$(date +%s)    # run MarkDuplicates (taskset 可视需求调整)    gatk MarkDuplicates \        -I "$bam" \        -O "$bam_markdup" \        --METRICS_FILE "$metrics" \        --CREATE_INDEX true \        --VALIDATION_STRINGENCY LENIENT \        --TMP_DIR "$TMP_DIR" \        --ASSUME_SORTED true \        2&gt;&gt; "$log_file"    local rc=$?    if [[ $rc -ne 0 || ! -s "$bam_markdup" ]]; then        echo "[ERROR] [$sample] MarkDuplicates 失败 (rc=$rc)" | tee -a "$log_file"        return 1    fi    local end=$(date +%s)    echo "[INFO] [$sample] MarkDuplicates 完成 ✅ (耗时 $((end-start))s)" | tee -a "$log_file"    return 0}# -------------------------------# 按染色体为单位，处理单个染色体：对该染色体并行处理所有样本（受全局并发限制）# run_chr_task chr bam1 bam2 bam3 ...# -------------------------------run_chr_task() {    local chr="$1"; shift    local bam_list=("$@")    local chr_dir="${GVCF_DIR}/${chr}"    mkdir -p "$chr_dir"    echo "[INFO] [chr=$chr] 处理 ${#bam_list[@]} 个样本开始: $(date)"    for bam in "${bam_list[@]}"; do        sample=$(basename "$bam" .sorted.markdup.bam)        gvcf="${chr_dir}/${sample}.g.vcf.gz"        logf="${LOG_DIR}/${sample}.${chr}.gvcf.log"            if [[ -s "$gvcf" ]]; then            echo "[INFO] [$sample $chr] 已存在，跳过"            continue        fi            # 等待系统健康        while ! check_system_health; do            sleep 20        done            echo "[INFO] [$sample $chr] 开始 HaplotypeCaller (threads=$GVCF_THREADS)" | tee -a "$logf"        start_t=$(date +%s)        gatk HaplotypeCaller \            -R "$REF" \            -I "$bam" \            -O "$gvcf" \            -L "$chr" \            -ERC GVCF \            --native-pair-hmm-threads $GVCF_THREADS \            --tmp-dir "$TMP_DIR" \            2&gt;&gt; "$logf"        rc=$?        if [[ $rc -ne 0 || ! -s "$gvcf" ]]; then            echo "[ERROR] [$sample $chr] HaplotypeCaller 失败 (rc=$rc)" | tee -a "$logf"            # 失败不终止批次，继续后面的样本        else            end_t=$(date +%s)            echo "[INFO] [$sample $chr] 完成 ✅ (耗时 $((end_t-start_t))s)" | tee -a "$logf"        fi    done        echo "[INFO] [chr=$chr] 全部样本处理完成: $(date)"}# -------------------------------# 并发启动函数（用于阶段1和阶段2的并发控制）#   调用约定:#     run_parallel func arg1 arg2 ... --max N --name "desc"#   或者为兼容旧调用，下面也提供基于 positional 参数的封装# -------------------------------run_parallel() {    # 简单的 positional parsing: 参数中包含 --max 和 --name    local args=("$@")    local max=1    local name="parallel"    # parse from end    for (( i=${#args[@]}-1; i&gt;=0; i-- )); do        if [[ "${args[i]}" == --max ]]; then            max="${args[i+1]}"            unset 'args[i]' 'args[i+1]'            break        fi    done    for (( i=${#args[@]}-1; i&gt;=0; i-- )); do        if [[ "${args[i]}" == --name ]]; then            name="${args[i+1]}"            unset 'args[i]' 'args[i+1]'            break        fi    done    local func="${args[0]}"    shift    # remaining args are the payload for invocation; if more than one payload, treat as array items    local payloads=("${args[@]}")        # If func is run_chr_task and first payload is a chr + list, we want to spawn functions by payload elements.    # For our usage, we'll call run_parallel with payloads each being a string token representing a job invocation:    # e.g. run_parallel run_markduplicates "$bam1" "$bam2" ... --max 4 --name "MarkDuplicates"    # Simpler approach: launch each payload as separate background call to func with that payload as single arg.    local total=${#payloads[@]}    local idx=0    echo "[INFO] [${name}] 并行启动: total=$total, max=$max"    while [[ $idx -lt $total ]]; do        # spawn while respecting max        while [[ $(jobs -r | wc -l) -ge $max ]]; do            sleep 5        done        item="${payloads[idx]}"        # For run_markduplicates style: item is a path; call func "$item" &amp;        # For run_chr_task batch invocation we will call it differently below.        $func "$item" &amp;        idx=$((idx+1))        sleep 0.5    done    wait    echo "[INFO] [${name}] 并行任务全部完成"}# -------------------------------# MAIN: 阶段1 MarkDuplicates（并行）# -------------------------------echo "========================"echo "[MAIN] 阶段1: MarkDuplicates"echo "========================"need_markdup=()for bam in "${bam_files[@]}"; do    sample=$(basename "$bam" .sorted.bam)    target="${OUT_DIR}/${sample}.sorted.markdup.bam"    if [[ ! -s "$target" ]]; then        need_markdup+=("$bam")    else        echo "[INFO] $sample MarkDuplicates 已存在，跳过"    fidoneif [[ ${#need_markdup[@]} -gt 0 ]]; then    echo "[INFO] 需要 MarkDuplicates 的样本数: ${#need_markdup[@]}"    # 使用 GNU parallel 若系统安装也行，但此处我们用 shell job 控制：    max_conc=$STAGE1_CONCURRENT    for bam in "${need_markdup[@]}"; do        while [[ $(jobs -r | wc -l) -ge $max_conc ]]; do            sleep 5        done        run_markduplicates "$bam" &amp;        sleep 0.5    done    waitelse    echo "[INFO] 所有样本已完成 MarkDuplicates"fi# -------------------------------# MAIN: 阶段2 按染色体批量并发生成 gVCF#   - 我们将每个染色体作为一个并行任务（处理所有样本的该 chr）#   - 控制并发数为 EFFECTIVE_STAGE2_CONCURRENT# -------------------------------echo "========================"echo "[MAIN] 阶段2: 按染色体批量并发生成 gVCF"echo "========================"# 重新列出已经准备好的 markdup BAM（只取存在的）markdup_bams=()for bm in "${bam_files[@]}"; do    sample=$(basename "$bm" .sorted.bam)    md="${OUT_DIR}/${sample}.sorted.markdup.bam"    if [[ -s "$md" ]]; then        markdup_bams+=("$md")    else        echo "[WARN] $sample 的 markdup BAM 不存在，跳过该样本"     fidoneif [[ ${#markdup_bams[@]} -eq 0 ]]; then    echo "[ERROR] 无可用 markdup BAM，退出"    exit 1fi# 获取染色体/contig 列表（使用 .fai 第一列）chromosomes=($(cut -f1 "${REF}.fai"))echo "[INFO] 染色体计数: ${#chromosomes[@]}"# 并行启动每个染色体任务，但限制并发为 EFFECTIVE_STAGE2_CONCURRENTchr_count=${#chromosomes[@]}started=0for chr in "${chromosomes[@]}"; do    # wait until running jobs &lt; limit and system healthy    while [[ $(jobs -r | wc -l) -ge $EFFECTIVE_STAGE2_CONCURRENT ]]; do        echo "[WAIT] 当前 Chr 并发: $(jobs -r | wc -l)/$EFFECTIVE_STAGE2_CONCURRENT，检查系统..."        sleep 8    done    while ! check_system_health; do        echo "[WAIT] 系统资源紧张，等待..."        sleep 15    done    echo "[INFO] 启动 chr=$chr 的批量任务（处理 ${#markdup_bams[@]} 个样本）"    run_chr_task "$chr" "${markdup_bams[@]}" &amp;    started=$((started+1))    sleep 1done# 等待所有染色体任务完成wait# -------------------------------# 完成 &amp; 清理# -------------------------------echo "[INFO] 所有染色体批量任务完成，开始统计"final_gvcf_count=$(find "$GVCF_DIR" -type f -name "*.g.vcf.gz" | wc -l || echo 0)echo "[INFO] 生成 gVCF 总数: $final_gvcf_count"echo "[INFO] 清理 TMP..."rm -rf "${TMP_DIR}"/* 2&gt;/dev/null || trueecho "[INFO] 全流程完成: $(date)"echo "[INFO] 输出目录: $GVCF_DIR"echo "====================================="<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="📘-功能概述-1"><a href="#📘-功能概述-1" class="headerlink" title="📘 功能概述"></a>📘 功能概述</h3><p>当样本数较多或服务器资源有限时，推荐使用本脚本。<br> 它支持 <strong>按染色体分批并行</strong>，自动计算系统负载，防止过载。</p><blockquote><p>特点：</p><ul><li>动态 CPU / 内存检测；</li><li>自动暂停与恢复；</li><li>MarkDuplicates + HaplotypeCaller 分阶段；</li><li>输出结构按染色体分类存储。</li></ul></blockquote><h3 id="⚙️-主要参数"><a href="#⚙️-主要参数" class="headerlink" title="⚙️ 主要参数"></a>⚙️ 主要参数</h3><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><code>STAGE1_CONCURRENT</code></td><td>同时运行的 MarkDuplicates 数量</td><td>5</td></tr><tr><td><code>STAGE2_CONCURRENT</code></td><td>每次运行的染色体任务上限</td><td>5</td></tr><tr><td><code>GVCF_THREADS</code></td><td>每个样本的 HaplotypeCaller 线程数</td><td>2</td></tr><tr><td><code>MAX_LOAD</code></td><td>系统平均负载阈值</td><td>10.0</td></tr><tr><td><code>MIN_FREE_MEM_GB</code></td><td>最低剩余内存阈值</td><td>4 GB</td></tr></tbody></table><h3 id="⚙️-核心逻辑"><a href="#⚙️-核心逻辑" class="headerlink" title="⚙️ 核心逻辑"></a>⚙️ 核心逻辑</h3><ol><li><p><strong>系统监测</strong></p><ul><li>实时监控 CPU 负载与内存；</li><li>若超过阈值则暂停任务，确保稳定。</li></ul></li><li><p><strong>按染色体划分任务</strong></p><ul><li><p>每个样本的 BAM 文件按染色体调用 GATK；</p></li><li><p>输出路径：</p><pre class="line-numbers language-none"><code class="language-none">gvcf/chr1/BM_S_1.g.vcf.gzgvcf/chr2/BM_S_1.g.vcf.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>自动错误跳过</strong></p><ul><li>单个样本失败不会中断整个批次；</li><li>所有日志保存以便复查。</li></ul></li><li><p><strong>MarkDuplicates 阶段保留</strong></p><ul><li>提前处理可加快后续染色体分批；</li><li>可灵活重启中断任务。</li></ul></li></ol><h3 id="✅-输出示例"><a href="#✅-输出示例" class="headerlink" title="✅ 输出示例"></a>✅ 输出示例</h3><pre class="line-numbers language-none"><code class="language-none">/mnt/disk2/Align/├── gvcf/│   ├── chr1/│   │   ├── BM_S_1.g.vcf.gz│   │   └── BM_S_2.g.vcf.gz│   ├── chr2/│   │   ├── BM_S_1.g.vcf.gz│   │   └── BM_S_2.g.vcf.gz└── logs/    ├── BM_S_1.markdup.log    ├── BM_S_1.chr1.gvcf.log    └── BM_S_2.chr2.gvcf.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="💡-流程总结"><a href="#💡-流程总结" class="headerlink" title="💡 流程总结"></a>💡 流程总结</h2><table><thead><tr><th>阶段</th><th>脚本</th><th>核心工具</th><th>主要任务</th><th>输出</th></tr></thead><tbody><tr><td>1️⃣</td><td>run_fastpl.sh</td><td>fastp</td><td>质控过滤</td><td>Clean FastQ</td></tr><tr><td>2️⃣</td><td>run_bwa_vcf.sh</td><td>BWA + GATK</td><td>比对 + gVCF</td><td>Align/g.vcf.gz</td></tr><tr><td>3️⃣</td><td>batch_gvcf.sh</td><td>GATK + Parallel</td><td>染色体分批</td><td>gvcf/chr*/</td></tr></tbody></table><hr><h2 id="🚀-新手建议"><a href="#🚀-新手建议" class="headerlink" title="🚀 新手建议"></a>🚀 新手建议</h2><ol><li><strong>先小规模测试</strong><br> 用 1–2 个样本验证路径与结果；</li><li><strong>监控资源</strong><br> 使用 <code>htop</code> 或 <code>nmon</code> 查看系统负载；</li><li><strong>定期清理中间文件</strong><br> 删除 <code>.bam</code>、<code>.bai</code> 可节省大量空间；</li><li><strong>保持日志</strong><br> 日志是排查错误的关键，不要删除。</li></ol><hr><h2 id="📎-后续方向"><a href="#📎-后续方向" class="headerlink" title="📎 后续方向"></a>📎 后续方向</h2><p>后续可继续进行：</p><ul><li>多样本联合变异检测（<code>GenotypeGVCFs</code>）；</li><li>SNP / INDEL 注释；</li><li>群体结构分析（PCA、ADMIXTURE）；</li><li>连锁不平衡与选择分析。</li></ul><hr><blockquote><p> <strong>说明：</strong> 本流程在 Ubuntu 22.04 + GATK 4.4 + BWA MEM 环境下测试通过。<br> 如需多节点或超大样本优化，请考虑基于 SLURM 的任务调度版本。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;🧬-重测序数据标准处理流程详解&quot;&gt;&lt;a href=&quot;#🧬-重测序数据标准处理流程详解&quot; class=&quot;headerlink&quot; title=&quot;🧬 重测序数据标准处理流程详解&quot;&gt;&lt;/a&gt;🧬 重测序数据标准处理流程详解&lt;/h1&gt;&lt;p&gt;本篇博客详细解析从 &lt;str</summary>
      
    
    
    
    <category term="Linux" scheme="https://0hhhhhh0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>使用ANNOVAR进行长牡蛎SNP注释完整流程</title>
    <link href="https://0hhhhhh0.github.io/2025/10/31/shi-yong-annovar-jin-xing-chang-mu-li-crassostrea-gigas-snp-zhu-shi-wan-zheng-liu-cheng/"/>
    <id>https://0hhhhhh0.github.io/2025/10/31/shi-yong-annovar-jin-xing-chang-mu-li-crassostrea-gigas-snp-zhu-shi-wan-zheng-liu-cheng/</id>
    <published>2025-10-31T00:26:00.000Z</published>
    <updated>2025-10-31T00:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用ANNOVAR进行长牡蛎-Crassostrea-gigas-SNP注释完整流程"><a href="#使用ANNOVAR进行长牡蛎-Crassostrea-gigas-SNP注释完整流程" class="headerlink" title="使用ANNOVAR进行长牡蛎(Crassostrea gigas)SNP注释完整流程"></a>使用ANNOVAR进行长牡蛎(<em>Crassostrea gigas</em>)SNP注释完整流程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文介绍如何使用ANNOVAR对长牡蛎(<em>Crassostrea gigas</em>)的SNP变异数据进行功能注释。流程包括参考基因组数据库构建、变异数据格式转换、功能注释和结果整合。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="1-软件安装"><a href="#1-软件安装" class="headerlink" title="1. 软件安装"></a>1. 软件安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ANNOVAR下载</span><span class="token function">wget</span> http://www.openbioinformatics.org/annovar/annovar.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> annovar.tar.gz<span class="token comment"># 其他依赖工具</span>conda <span class="token function">install</span> <span class="token parameter variable">-c</span> bioconda ucsc-gtftogenepred<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据文件准备"><a href="#2-数据文件准备" class="headerlink" title="2. 数据文件准备"></a>2. 数据文件准备</h3><ul><li>参考基因组GTF文件：<code>/home/wanglab/Ywh/adductor_muscle_scar/Crassostrea_gigas.cgigas_uk_roslin_v1.61.gtf</code></li><li>基因组FASTA文件：<code>GCF_902806645.1_cgigas_uk_roslin_v1_genomic.fna</code></li><li>SNP数据：<code>filtered_variants_thr0p7_20250902_162128.tsv</code></li></ul><h2 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h2><h3 id="步骤1：构建自定义参考基因组数据库"><a href="#步骤1：构建自定义参考基因组数据库" class="headerlink" title="步骤1：构建自定义参考基因组数据库"></a>步骤1：构建自定义参考基因组数据库</h3><h4 id="1-1-转换GTF为GenePred格式"><a href="#1-1-转换GTF为GenePred格式" class="headerlink" title="1.1 转换GTF为GenePred格式"></a>1.1 转换GTF为GenePred格式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gtfToGenePred <span class="token parameter variable">-genePredExt</span> <span class="token punctuation">\</span>    <span class="token string">"/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909/annovar/Cgigasdb/GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gtf"</span> <span class="token punctuation">\</span>    Cg_refGene.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-提取mRNA序列"><a href="#1-2-提取mRNA序列" class="headerlink" title="1.2 提取mRNA序列"></a>1.2 提取mRNA序列</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">perl retrieve_seq_from_fasta.pl <span class="token punctuation">\</span>    <span class="token parameter variable">--format</span> refGene <span class="token punctuation">\</span>    <span class="token parameter variable">--seqfile</span> GCF_902806645.1_cgigas_uk_roslin_v1_genomic.fna <span class="token punctuation">\</span>    <span class="token parameter variable">--outfile</span> Cg_refGeneMrna.fa <span class="token punctuation">\</span>    Cg_refGene.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤2：准备SNP输入文件"><a href="#步骤2：准备SNP输入文件" class="headerlink" title="步骤2：准备SNP输入文件"></a>步骤2：准备SNP输入文件</h3><h4 id="2-1-转换TSV为ANNOVAR输入格式"><a href="#2-1-转换TSV为ANNOVAR输入格式" class="headerlink" title="2.1 转换TSV为ANNOVAR输入格式"></a>2.1 转换TSV为ANNOVAR输入格式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'NR&gt;1 {print $1"\t"$2"\t"$2"\t"$3"\t"$4}'</span> <span class="token punctuation">\</span>    /home/wanglab/Ywh/adductor_muscle_scar/Variants/filtered_variants_thr0p7_20250902_162128.tsv <span class="token punctuation">\</span>    <span class="token operator">&gt;</span> filtered_variants_thr0p7_20250902_162128.avinput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>输入TSV格式：</strong></p><pre class="line-numbers language-none"><code class="language-none">chromosomepositionrefalt...NC_047567.132667511GT...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>输出AVINPUT格式：</strong></p><pre class="line-numbers language-none"><code class="language-none">chromosomestartendrefaltNC_047567.13266751132667511GT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="步骤3：执行功能注释"><a href="#步骤3：执行功能注释" class="headerlink" title="步骤3：执行功能注释"></a>步骤3：执行功能注释</h3><h4 id="3-1-使用table-annovar-pl进行注释"><a href="#3-1-使用table-annovar-pl进行注释" class="headerlink" title="3.1 使用table_annovar.pl进行注释"></a>3.1 使用table_annovar.pl进行注释</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">perl table_annovar.pl <span class="token punctuation">\</span>    filtered_variants_thr0p7_20250902_162128.avinput <span class="token punctuation">\</span>    Cgigasdb/ <span class="token punctuation">\</span>    <span class="token parameter variable">-buildver</span> Cg <span class="token punctuation">\</span>    <span class="token parameter variable">-out</span> filtered_variants_thr0p7_20250902_162128 <span class="token punctuation">\</span>    <span class="token parameter variable">-remove</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-protocol</span> refGene <span class="token punctuation">\</span>    <span class="token parameter variable">-operation</span> g <span class="token punctuation">\</span>    <span class="token parameter variable">-nastring</span> <span class="token builtin class-name">.</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-csvout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数说明：</strong></p><ul><li><code>-buildver Cg</code>: 使用自定义构建版本”Cg”</li><li><code>-protocol refGene</code>: 使用refGene数据库</li><li><code>-operation g</code>: 基因-based注释</li><li><code>-csvout</code>: 输出CSV格式</li><li><code>-nastring .</code>: 用”.”表示缺失值</li></ul><h3 id="步骤4：整合注释结果"><a href="#步骤4：整合注释结果" class="headerlink" title="步骤4：整合注释结果"></a>步骤4：整合注释结果</h3><h4 id="4-1-方法一：基于行号合并（推荐）"><a href="#4-1-方法一：基于行号合并（推荐）" class="headerlink" title="4.1 方法一：基于行号合并（推荐）"></a>4.1 方法一：基于行号合并（推荐）</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为原始文件添加行号</span><span class="token function">awk</span> <span class="token string">'NR==1 {print "LineNumber\t"$0} NR&gt;1 {print NR-1"\t"$0}'</span> <span class="token punctuation">\</span>    /home/wanglab/Ywh/adductor_muscle_scar/Variants/filtered_variants_thr0p7_20250902_162128.tsv <span class="token punctuation">\</span>    <span class="token operator">&gt;</span> original_with_linenum.tsv<span class="token comment"># 为注释文件添加行号</span><span class="token function">awk</span> <span class="token string">'NR==1 {print "LineNumber\t"$0} NR&gt;1 {print NR-1"\t"$0}'</span> <span class="token punctuation">\</span>    filtered_variants_thr0p7_20250902_162128.Cg_multianno.csv <span class="token punctuation">\</span>    <span class="token operator">&gt;</span> anno_with_linenum.tsv<span class="token comment"># 基于行号合并</span><span class="token function">join</span> <span class="token parameter variable">-t</span> <span class="token string">$'<span class="token entity" title="\t">\t</span>'</span> <span class="token parameter variable">-1</span> <span class="token number">1</span> <span class="token parameter variable">-2</span> <span class="token number">1</span> <span class="token punctuation">\</span>    original_with_linenum.tsv anno_with_linenum.tsv <span class="token punctuation">\</span>    <span class="token operator">&gt;</span> merged_result.tsv<span class="token comment"># 清理临时文件</span><span class="token function">rm</span> original_with_linenum.tsv anno_with_linenum.tsv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-方法二：一次性合并"><a href="#4-2-方法二：一次性合并" class="headerlink" title="4.2 方法二：一次性合并"></a>4.2 方法二：一次性合并</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> -F<span class="token string">','</span> <span class="token string">'BEGIN {OFS="\t"}NR==FNR {    if (FNR==1) {        anno_header = $6"\t"$7"\t"$8"\t"$9"\t"$10    } else {        annotation[FNR] = $6"\t"$7"\t"$8"\t"$9"\t"$10    }    next}{    if (FNR==1) {        print $0 "\t" anno_header    } else {        print $0 "\t" annotation[FNR]    }}'</span> filtered_variants_thr0p7_20250902_162128.Cg_multianno.csv <span class="token punctuation">\</span>   /home/wanglab/Ywh/adductor_muscle_scar/Variants/filtered_variants_thr0p7_20250902_162128.tsv <span class="token punctuation">\</span>   <span class="token operator">&gt;</span> filtered_variants_thr0p7_20250902_162128_annotated.tsv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出结果解读"><a href="#输出结果解读" class="headerlink" title="输出结果解读"></a>输出结果解读</h2><h3 id="注释结果包含的字段："><a href="#注释结果包含的字段：" class="headerlink" title="注释结果包含的字段："></a>注释结果包含的字段：</h3><ul><li><strong>Gene-based注释</strong>: 基因名称、转录本、外显子功能等</li><li><strong>位置信息</strong>: 染色体、位置、参考/变异碱基</li><li><strong>功能预测</strong>: 对蛋白质功能的影响</li></ul><h3 id="典型输出格式："><a href="#典型输出格式：" class="headerlink" title="典型输出格式："></a>典型输出格式：</h3><pre class="line-numbers language-none"><code class="language-none">Chr     Start   End     Ref     Alt     Func.refGene    Gene.refGene    ExonicFunc.refGene    AAChange.refGeneNC_047567.1 32667511 32667511 G T downstream LOC105320120 . .NC_047567.1 32661831 32661831 C A exonic LOC105320120 nonsynonymous SNV LOC105320120:NM_001345123:exon2:c.T142A:p.S48T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="常见问题与解决方案"><a href="#常见问题与解决方案" class="headerlink" title="常见问题与解决方案"></a>常见问题与解决方案</h2><h3 id="1-数据库构建失败"><a href="#1-数据库构建失败" class="headerlink" title="1. 数据库构建失败"></a>1. 数据库构建失败</h3><p><strong>问题</strong>: GTF文件格式不兼容<br><strong>解决</strong>: 确保GTF文件来自官方来源，使用<code>gtfToGenePred</code>前检查文件完整性</p><h3 id="2-注释结果为空"><a href="#2-注释结果为空" class="headerlink" title="2. 注释结果为空"></a>2. 注释结果为空</h3><p><strong>问题</strong>: 构建版本不匹配<br><strong>解决</strong>: 检查<code>-buildver</code>参数与数据库构建版本一致</p><h3 id="3-合并结果错位"><a href="#3-合并结果错位" class="headerlink" title="3. 合并结果错位"></a>3. 合并结果错位</h3><p><strong>问题</strong>: 输入文件行数不匹配<br><strong>解决</strong>: 使用基于行号的合并方法确保准确性</p><h2 id="流程优化建议"><a href="#流程优化建议" class="headerlink" title="流程优化建议"></a>流程优化建议</h2><h3 id="1-批量处理"><a href="#1-批量处理" class="headerlink" title="1. 批量处理"></a>1. 批量处理</h3><p>对于多个样本，可以编写循环脚本批量处理：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">sample</span> <span class="token keyword">in</span> sample1 sample2 sample3<span class="token punctuation">;</span> <span class="token keyword">do</span>    perl table_annovar.pl <span class="token variable">${sample}</span>.avinput Cgigasdb/ <span class="token punctuation">\</span>        <span class="token parameter variable">-buildver</span> Cg <span class="token punctuation">\</span>        <span class="token parameter variable">-out</span> <span class="token variable">${sample}</span>_annotated <span class="token punctuation">\</span>        <span class="token parameter variable">-protocol</span> refGene <span class="token punctuation">\</span>        <span class="token parameter variable">-operation</span> g <span class="token punctuation">\</span>        <span class="token parameter variable">-csvout</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加更多注释数据库"><a href="#2-添加更多注释数据库" class="headerlink" title="2. 添加更多注释数据库"></a>2. 添加更多注释数据库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加保守性预测</span>perl table_annovar.pl input.avinput Cgigasdb/ <span class="token punctuation">\</span>    <span class="token parameter variable">-buildver</span> Cg <span class="token punctuation">\</span>    <span class="token parameter variable">-out</span> output <span class="token punctuation">\</span>    <span class="token parameter variable">-protocol</span> refGene,phastConsElements100way <span class="token punctuation">\</span>    <span class="token parameter variable">-operation</span> g,r <span class="token punctuation">\</span>    <span class="token parameter variable">-csvout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>本流程提供了从原始SNP数据到功能注释的完整解决方案，特别针对长牡蛎等非模式生物。通过构建自定义数据库，可以有效地对物种特异性变异进行功能注释，为后续的群体遗传学和功能基因组学研究奠定基础。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用ANNOVAR进行长牡蛎-Crassostrea-gigas-SNP注释完整流程&quot;&gt;&lt;a href=&quot;#使用ANNOVAR进行长牡蛎-Crassostrea-gigas-SNP注释完整流程&quot; class=&quot;headerlink&quot; title=&quot;使用ANNOVA</summary>
      
    
    
    
    <category term="Linux" scheme="https://0hhhhhh0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Planck-Pi学习</title>
    <link href="https://0hhhhhh0.github.io/2025/10/26/planck-pi/"/>
    <id>https://0hhhhhh0.github.io/2025/10/26/planck-pi/</id>
    <published>2025-10-26T01:26:00.000Z</published>
    <updated>2025-10-26T01:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-配置编译环境"><a href="#1-配置编译环境" class="headerlink" title="1. 配置编译环境"></a>1. 配置编译环境</h1><pre class="line-numbers language-none"><code class="language-none">1.1 编译过程中需要的依赖sudo apt updatesudo apt install xz-utils nano wget unzip build-essential git bc swig libncurses5-dev libpython3-dev libssl-dev pkg-config zlib1g-dev libusb-dev libusb-1.0-0-dev python3-pip gawk bison flex -ysudo apt install python python-dev lib32ncurses5 lib32z1 vim dwarves -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-交叉编译工具链"><a href="#1-2-交叉编译工具链" class="headerlink" title="1.2 交叉编译工具链"></a>1.2 交叉编译工具链</h2><pre class="line-numbers language-none"><code class="language-none"># 下载wget http://releases.linaro.org/components/toolchain/binaries/7.2-2017.11/arm-linux-gnueabi/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz$ wget https://releases.linaro.org/components/toolchain/binaries/7.5-2019.12/arm-linux-gnueabi/gcc-linaro-7.5.0-2019.12-x86_64_arm-linux-gnueabi.tar.xz# 解压sudo mkdir /usr/local/armsudo tar -vxf gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi.tar.xz -C /usr/local/arm# 配置sudo nano /etc/profile# 在末尾添加PATH=$PATH:/usr/local/arm/gcc-linaro-7.2.1-2017.11-x86_64_arm-linux-gnueabi/bin# 使之生效source /etc/profile # 验证arm-linux-gnueabi-gcc -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-TF卡分区"><a href="#1-3-TF卡分区" class="headerlink" title="1.3 TF卡分区"></a>1.3 TF卡分区</h2><pre class="line-numbers language-none"><code class="language-none"># 可以使用gparted进行分区sudo apt-get install gparted -y分3个分区volume1MFAT16boot32MEXT4rootfs--EXT4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-TF卡上传命令"><a href="#1-4-TF卡上传命令" class="headerlink" title="1.4 TF卡上传命令"></a>1.4 TF卡上传命令</h2><pre class="line-numbers language-none"><code class="language-none"># volume1Msudo dd if=/home/hhhh/Downloads/Planck-Pi/Planck-Pi/buildroot/output/images/u-boot-sunxi-with-spl.bin of=/dev/sdc bs=1024 seek=8# boot32Msetenv bootcmd "load mmc 0:2 0x80008000 zImage; load mmc 0:2 0x80C00000 suniv-f1c100s-generic.dtb; bootz 0x80008000 - 0x80C00000"或setenv bootcmd "load mmc 0:2 0x80008000 zImage; load mmc 0:2 0x80C00000 suniv-f1c100s-licheepi-nano.dtb; bootz 0x80008000 - 0x80C00000"# 设置启动参数，使用第三分区setenv bootargs "console=tty0 console=ttyS0,115200 root=/dev/mmcblk0p3 rootwait rw"# 保存并启动saveenvboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># kernelsudo cp /home/hhhh/Downloads/Planck-Pi/buildroot/linux/arch/arm/boot/dts/allwinner/suniv-f1c100s-licheepi-nano.dtb .sudo mv suniv-f1c100s-licheepi-nano.dtb suniv-f1c100s-generic.dtbsudo cp /home/hhhh/Downloads/Planck-Pi/buildroot/linux/arch/arm/boot/zImage .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># rootfs 复制rootfs文件到第三个分区sudo mount /dev/sdc3 /mntsudo tar -xf rootfs.tar -C /mntsudo umount /mntsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-uboot，kernel和rootfs编译"><a href="#2-uboot，kernel和rootfs编译" class="headerlink" title="2.uboot，kernel和rootfs编译"></a>2.uboot，kernel和rootfs编译</h1><p>一部分来自<code> https://github.com/916BGAI/Planck-Pi</code>，包含uboot，kernel和rootfs</p><pre class="line-numbers language-none"><code class="language-none">git clone -b linux_6.5.2 --single-branch https://github.com/916BGAI/Planck-Pi.gitcd Planck-Pi/git submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>u-boot源码 （2）</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/Lichee-Pi/u-boot.git -b nano-v2018.01cd u-boot//git branch -a//git checkout nano-v2018.01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Compile命令</strong></p><pre class="line-numbers language-none"><code class="language-none">cd u-bootmake planck_pi_defconfigmake menuconfigmake -j65535cd linuxmake planck_pi_defconfigmake menuconfigmake -j65535cd Buildrootmake planck_pi_defconfigmake menuconfigmake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-u-boot"><a href="#1-u-boot" class="headerlink" title="1.u-boot"></a>1.u-boot</h2><p>为了方便后边编译在248行添加 目标构架是arm，交叉编译器是</p><pre class="line-numbers language-none"><code class="language-none">vim MakefileARCH=arm CROSS_COMPILE=arm-linux-gnueabi-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在uboot根目录进行编译配置为不带spi，来在根目录生成.config</p><pre class="line-numbers language-none"><code class="language-none">make licheepi_nano_defconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>图形化配置</p><pre class="line-numbers language-none"><code class="language-none">make menuconfig#Enable boot argumentsconsole=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rw#bootcmd valueload mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回到uboot根目录进行编译</p><pre class="line-numbers language-none"><code class="language-none">make -j4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确定已经生成了u-boot-sunxi-with-spl.bin文件</p><pre class="line-numbers language-none"><code class="language-none">sudo dd if=u-boot-sunxi-with-spl.bin of=/dev/sdb bs=1024 seek=8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-linux-kernel"><a href="#2-linux-kernel" class="headerlink" title="2. linux kernel"></a>2. linux kernel</h2><p>事实上对于F1C100S/F1C200S，Linux官方源码已经对licheepi nano进行支持。所以我们完全可以通过licheepi nano的配置文件进行移植。</p><h3 id="2-1-下载内核源码"><a href="#2-1-下载内核源码" class="headerlink" title="2.1. 下载内核源码#"></a>2.1. 下载内核源码<a href="https://www.cnblogs.com/twzy/p/15355842.html#1.1.-%E4%B8%8B%E8%BD%BD%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81">#</a></h3><p>进入Linux系统官网：<a href="https://www.kernel.org/">https://www.kernel.org/</a></p><p>[<img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20210930145110377-1315647665.png" alt="img"></p><p>这里面列出的都是一些主要版本，如主线版本，上时间支持版本，个人推荐使用最新的长时间支持版本（5.10.69）。但是因为我这个项目是在参考一位大神的文档的基础上构建的，所以使用的是5.7.1版本，接下来就给一个选择其他版本的方式。选择任意一项点击 [browse]</p><p><a href="https://img2020.cnblogs.com/blog/483434/202109/483434-20210930145220044-1573759475.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20210930145220044-1573759475.png" alt="img"></a></p><p>在新打开页面选择 【summary】点击【tag】中的【…】切换下载</p><p><a href="https://img2020.cnblogs.com/blog/483434/202109/483434-20210930145316299-265231365.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20210930145316299-265231365.png" alt="img"></a></p><p> 如果想要直接下载5.7.1版本，请直接使用下面的连接</p><p><a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.7.1.tar.gz">https://mirrors.edge.kernel.org/pub/linux/kernel/v5.x/linux-5.7.1.tar.gz</a></p><p>下载后完成后，将代码复制到Ubuntu虚拟机并解压源码。</p><h3 id="2-2-配置编译"><a href="#2-2-配置编译" class="headerlink" title="2.2.配置编译#"></a>2.2.配置编译<a href="https://www.cnblogs.com/twzy/p/15355842.html#1.2.%E9%85%8D%E7%BD%AE%E7%BC%96%E8%AF%91">#</a></h3><p>与上一篇中编译u-boot一样，我们也需要配置对Linux编译进行配置：</p><ul><li>指定架构类型</li><li>指定交叉编译工具</li><li>项目配置</li></ul><p>指定架构，就这个很好理解，就是指定CPU类型，就是配置为Arm就行，交叉编译工具即为上一篇已经安装好的编译工具。</p><p>用VS打开Linux内核代码，找到<strong>Makefile</strong>文件：</p><p>修改如下配置：</p><pre class="line-numbers language-none"><code class="language-none">ARCH              ?= armCROSS_COMPILE     ?=arm-linux-gnueabi-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果没找到ARCH 或 CROSS_COMPILE字段，自己手动添加也行，如下图所示：</p><p><a href="https://img2020.cnblogs.com/blog/483434/202109/483434-20210930151530833-1001068341.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20210930151530833-1001068341.png" alt="img"></a></p><blockquote><p> 事实上这两个字段可以不用指定，在进行make的时候加上对应的参数就行，这里为了避免麻烦，所以直接放到了makefile文件中</p></blockquote><p>接下来就是指定项目配置了，这个操作就是让Linux内核认F1C100S/F1C200S这颗soc。</p><p>进入内核源码中的<strong>arch/arm/configs</strong>目录中，可以看到有很多开发板的配置文件，其中<strong>sunxi_defconfig</strong>是全志的配置文件，但是该配置文件非常不全，需要额外配置大量的选项，一般选项多大上千个，这里先使用licheepi_nano的配置文件。</p><p><a href="https://files.cnblogs.com/files/twzy/linux-licheepi_nano_defconfig.zip"> https://files.cnblogs.com/files/twzy/linux-licheepi_nano_defconfig.zip</a></p><p>下载该文件，解压出<strong>linux-licheepi_nano_defconfig</strong>，然后将其放到arch/arm/configs/目录下</p><p><a href="https://img2020.cnblogs.com/blog/483434/202109/483434-20210930154001937-799886630.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20210930154001937-799886630.png" alt="img"></a></p><p> 然后通过终端进入Linux-5.7.1根目录，输入命令：</p><pre class="line-numbers language-none"><code class="language-none">make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211005103913552-1730316057.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211005103913552-1730316057.png" alt="img"></a></p><p> 进入图形配置界面，如图所示：</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211005104057991-2077580949.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211005104057991-2077580949.png" alt="img"></a></p><p>该界面和u-boot配置一样，所以操作方式也是一样的，上下键移动选项，使用空格键进行选中或取消选择，同样通过空格键或回车键，进入子选项配置，通过Tab键选择保存和退出即可返回上级菜单或命令行界面，也可以直接双击Esc键返回上级目录。</p><h3 id="3-3-配置TF卡设备树信息"><a href="#3-3-配置TF卡设备树信息" class="headerlink" title="3.3 配置TF卡设备树信息#"></a>3.3 配置TF卡设备树信息<a href="https://www.cnblogs.com/twzy/p/15355842.html#1.3-%E9%85%8D%E7%BD%AEtf%E5%8D%A1%E8%AE%BE%E5%A4%87%E6%A0%91%E4%BF%A1%E6%81%AF">#</a></h3><p>我们在完成内核配置后还需要配置TF卡的设备树配置，否则即便是能正常运行内核，在加载文件系统的时候还是会有问题，在这里配置很简单：</p><p>在<strong>linux-5.7.1/arch/arm/boot/dts</strong> 目录下，分别修改<strong>suniv-f1c100s.dtsi</strong>、<strong>suniv-f1c100s-licheepi-nano.dts</strong> 两个文件（记住这两个文件、以后我们修改的地方多了^_^）</p><p>修改<strong>suniv-f1c100s.dtsi</strong>文件</p><p>首先添加头文件(如果有则忽略)</p><pre class="line-numbers language-none"><code class="language-none">#include &lt;dt-bindings/clock/suniv-ccu-f1c100s.h&gt;#include &lt;dt-bindings/reset/suniv-ccu-f1c100s.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在soc-&gt;pio 下添加如下代码</p><pre class="line-numbers language-none"><code class="language-none">mmc0_pins: mmc0-pins {                pins = "PF0", "PF1", "PF2", "PF3", "PF4", "PF5";                function = "mmc0";            };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>soc下添加如下代码</p><pre class="line-numbers language-none"><code class="language-none">mmc0: mmc@1c0f000 {            compatible = "allwinner,suniv-f1c100s-mmc",                     "allwinner,sun7i-a20-mmc";            reg = &lt;0x01c0f000 0x1000&gt;;            clocks = &lt;&amp;ccu CLK_BUS_MMC0&gt;,                 &lt;&amp;ccu CLK_MMC0&gt;,                 &lt;&amp;ccu CLK_MMC0_OUTPUT&gt;,                 &lt;&amp;ccu CLK_MMC0_SAMPLE&gt;;            clock-names = "ahb",                          "mmc",                          "output",                          "sample";            resets = &lt;&amp;ccu RST_BUS_MMC0&gt;;            reset-names = "ahb";            interrupts = &lt;23&gt;;            pinctrl-names = "default";            pinctrl-0 = &lt;&amp;mmc0_pins&gt;;            status = "disabled";            #address-cells = &lt;1&gt;;            #size-cells = &lt;0&gt;;        };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图，图中的配置可能与读者实际内容不一致，这是因为我改了很多东西，忽略即可，只需要关注红色框中的内容即可。</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009162310863-1685576565.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009162310863-1685576565.png" alt="img"></a></p><p> 修改<strong>suniv-f1c100s-licheepi-nano.dts</strong>文件，在根节点添加如下代码</p><pre class="line-numbers language-none"><code class="language-none">reg_vcc3v3: vcc3v3 {        compatible = "regulator-fixed";        regulator-name = "vcc3v3";        regulator-min-microvolt = &lt;3300000&gt;;        regulator-max-microvolt = &lt;3300000&gt;;    };<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部添加mmc0使能代码</p><pre class="line-numbers language-none"><code class="language-none">&amp;mmc0 {        vmmc-supply = &lt;&amp;reg_vcc3v3&gt;;        bus-width = &lt;4&gt;;        broken-cd;        status = "okay";};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>位置如下图</p><p><a href="https://img2020.cnblogs.com/blog/483434/202201/483434-20220114080223936-810553130.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20220114080223936-810553130.png" alt="img"></a></p><p>接下来执行make命令开始编译内核和设备树相关的文件了</p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首次进行编译，通常会需要很长时间，编译完成后，就会在在<strong>arch/arm/boot</strong>目录下生成内核文件：<strong>zImage</strong>，在<strong>arch/arm/boot/dts</strong>目录下设备树文件：<strong>suniv-f1c100s-licheepi-nano.dtb</strong> 。</p><p>在编译过程中，因为所配置Ubuntu系统的差异，可能会因缺少某些组件导致编译报错，不要慌，将对应的错误关键信息复制到搜索引擎后安装即可，一下是作者碰到的两个编译报错，如果有必要可以提前安装：</p><p> <strong>linux-内核编译配置 lexer.lex.c错误</strong></p><pre class="line-numbers language-none"><code class="language-none">wu@ubuntu:~/linux-5.4.8$ make exynos_defconfigHOSTCC scripts/basic/fixdepHOSTCC scripts/kconfig/conf.oHOSTCC scripts/kconfig/confdata.oHOSTCC scripts/kconfig/expr.oLEX scripts/kconfig/lexer.lex.c/bin/sh: 1: flex: not foundscripts/Makefile.host:9: recipe for target ‘scripts/kconfig/lexer.lex.c’ failedmake[1]: * [scripts/kconfig/lexer.lex.c] Error 127Makefile:567: recipe for target ‘exynos_defconfig’ failedmake: * [exynos_defconfig] Error 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install bisonsudo apt-get install flex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>编译Linux内核时遇到：“error : openssl/bio.h :No such file or folder”</strong></p><pre class="line-numbers language-none"><code class="language-none">scripts/extract-cert.c:21:25: fatal error: openssl/bio.h: No such file or directorycompilation terminated.scripts/Makefile.host:90: recipe for target 'scripts/extract-cert' failedmake[1]: * [scripts/extract-cert] Error 1Makefile:556: recipe for target 'scripts' failedmake: * [scripts] Error 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装openssl：</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-内核复制与执行"><a href="#3-4-内核复制与执行" class="headerlink" title="3.4 内核复制与执行#"></a>3.4 内核复制与执行<a href="https://www.cnblogs.com/twzy/p/15355842.html#1.5-%E5%86%85%E6%A0%B8%E5%A4%8D%E5%88%B6%E4%B8%8E%E6%89%A7%E8%A1%8C">#</a></h3><p>那么，我们将刚才生成好的zImage和dtb文件复制到TF卡的BOOT分区中</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009082706512-1631849134.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009082706512-1631849134.png" alt="img"></a></p><p>退出TF卡，插入开发板，上电，按重启，我们就可以看到u-boot启动完成后，自动进入了内核启动环节，但是启动后一会就报错了，因为挂载文件系统产生错误。</p><pre class="line-numbers language-none"><code class="language-none">U-Boot SPL 2018.01-05679-g013ca457fd-dirty (Sep 28 2021 - 15:29:32)DRAM: 32 MiBTrying to boot from MMC1U-Boot 2018.01-05679-g013ca457fd-dirty (Sep 28 2021 - 15:29:32 +0800) Allwinner TechnologyCPU:   Allwinner F Series (SUNIV)Model: Snail CardDRAM:  32 MiBMMC:   SUNXI SD/MMC: 0*** Warning - bad CRC, using default environmentIn:    serial@1c25000Out:   serial@1c25000Err:   serial@1c25000Net:   No ethernet found.starting USB...No controllers foundHit any key to stop autoboot:  0 reading zImage4515448 bytes read in 231 ms (18.6 MiB/s)reading suniv-f1c100s-licheepi-nano.dtb6105 bytes read in 26 ms (228.5 KiB/s)## Flattened Device Tree blob at 80c00000   Booting using the fdt blob at 0x80c00000   Loading Device Tree to 816fb000, end 816ff7d8 ... OKStarting kernel ...[    0.000000] Booting Linux on physical CPU 0x0[    0.000000] Linux version 5.7.1 (twzy@ubuntu) (gcc version 7.2.1 20171011 (Linaro GCC 7.2-2017.11), GNU ld (Linaro_Binutils-2017.11) 2.28.2.20170706) #55 Tue Sep 28 21:04:24 CST 2021[    0.000000] CPU: ARM926EJ-S [41069265] revision 5 (ARMv5TEJ), cr=0005317f[    0.000000] CPU: VIVT data cache, VIVT instruction cache[    0.000000] OF: fdt: Machine model: LinuxCard by Kevin[    0.000000] Memory policy: Data cache writeback[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 8128[    0.000000] Kernel command line: console=tty0 console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2  rw[    0.000000] Dentry cache hash table entries: 4096 (order: 2, 16384 bytes, linear)[    0.000000] Inode-cache hash table entries: 2048 (order: 1, 8192 bytes, linear)[    0.000000] mem auto-init: stack:off, heap alloc:off, heap free:off[    0.000000] Memory: 21496K/32768K available (7168K kernel code, 403K rwdata, 1664K rodata, 1024K init, 246K bss, 11272K reserved, 0K cma-reserved, 0K highmem)[    0.000000] SLUB: HWalign=32, Order=0-3, MinObjects=0, CPUs=1, Nodes=1 …………………[    6.598874] Run /etc/init as init process[    6.603993] Run /bin/init as init process[    6.609078] Run /bin/sh as init process[    6.613763] Kernel panic - not syncing: No working init found.  Try passing init= option to kernel. See Linux Documentation/admin-guide/init.rst for guidance.[    6.629985] CPU: 0 PID: 1 Comm: swapper Not tainted 5.7.1 #55[    6.636727] Hardware name: Allwinner suniv Family[    6.642216] [&lt;c010d604&gt;] (unwind_backtrace) from [&lt;c010ab60&gt;] (show_stack+0x10/0x14)[    6.651031] [&lt;c010ab60&gt;] (show_stack) from [&lt;c01165a4&gt;] (panic+0xe8/0x2e4)[    6.658951] [&lt;c01165a4&gt;] (panic) from [&lt;c071d080&gt;] (kernel_init+0xd8/0x110)[    6.666960] [&lt;c071d080&gt;] (kernel_init) from [&lt;c0100140&gt;] (ret_from_fork+0x14/0x34)[    6.675547] Exception stack(0xc1835fb0 to 0xc1835ff8)[    6.681293] 5fa0:                                     00000000 00000000 00000000 00000000[    6.690714] 5fc0: 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000[    6.700102] 5fe0: 00000000 00000000 00000000 00000000 00000013 00000000[    6.707633] Rebooting in 5 seconds..[   12.687513] Reboot failed -- System halted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内核移植就基本结束了，要想让小板真正的运行起来，还需要Linux的文件系统，那开始吧。</p><h2 id="3-文件系统移植-buildroot"><a href="#3-文件系统移植-buildroot" class="headerlink" title="3.文件系统移植-buildroot"></a>3.<a href="https://www.cnblogs.com/twzy/p/15355842.html#2.%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D">文件系统移植</a>-buildroot</h2><p> 根文件系统(rootfs)是内核启动后挂载的第一个文件系统，如果没有根文件系统，内核将无法开启shell以及其他进程。</p><blockquote><p>实际上内核启动后会先挂载一个虚拟的文件系统，这个虚拟文件系统是在内存中运行的，其主要运行核心进程，虚拟文件系统挂载之后才挂载硬盘（TF卡或者emmc）上的根文件系统。</p></blockquote><p>制作文件系统也有很多方式，如通过busyBox、Buildroot等工具制作。</p><p>本次使用Buildroot，制作过程相对简单，兼容性好，由于根文件系统制作比较简单。</p><p>进入buildroot官网<a href="https://buildroot.org/downloads">https://buildroot.org/downloads</a></p><p>这里选择buildroot2018.2.11版本，将下载好软件包传入Ubuntu系统中，然后解压并进入源码目录中，输入清理命令。主要用于初始化一些设置，命令如下：</p><pre class="line-numbers language-none"><code class="language-none">make clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后输入以下命令进入配置界面</p><pre class="line-numbers language-none"><code class="language-none">make menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时会终端进入图形配置界面，如图：</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009144509521-972063330.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009144509521-972063330.png" alt="img"></a></p><h3 id="3-1-Target-options配置"><a href="#3-1-Target-options配置" class="headerlink" title="3.1 Target options配置#"></a><strong>3.1 Target options配置</strong><a href="https://www.cnblogs.com/twzy/p/15355842.html#2.1-target-options%E9%85%8D%E7%BD%AE">#</a></h3><p>先选择<strong>Target options</strong>选项，进行对应芯片soc相关的配置，如图：</p><p> <a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009144541062-504084831.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009144541062-504084831.png" alt="img"></a></p><p>配置如图所示，下面是对其的解释</p><ul><li>第一个选项为架构选择，这里选择ARM架构小端模式，</li><li>第二个为输出的二进制文件格式，这里选择EFL格式，</li><li>第三个为架构体系，这里选择arm926t，因为F1C200S/F1C100S的架构就是这个架构，</li><li>第四个为矢量浮点处理器，这里不勾选，因为对于F1C200S/F1C100S而言，其内部没有浮点运算单元，只能进行软浮点运算，也就是模拟浮点预运算。</li><li>第五个为应用程序二进制接口，这里选择EABI，原因是该格式支持软件浮点和硬件实现浮点功能混用。</li><li>第六个为浮点运算规则，这里使用软件浮点</li><li>第七个选择指令集，这里选择ARM指令集，因为thumb主要针对Cortex M系列而言的，对于运行操作系统的A系列以及ARM9和ARM11而言，使用的都是32位的ARM指令集。</li></ul><p>按【Tab键】选择**<save>**进行保存，按【Esc键】回到上一级配置界面。</save></p><h3 id="3-2-Build-options配置"><a href="#3-2-Build-options配置" class="headerlink" title="3.2 Build options配置#"></a><strong>3.2 Build options配置</strong><a href="https://www.cnblogs.com/twzy/p/15355842.html#2.2-build-options%E9%85%8D%E7%BD%AE">#</a></h3><p>进入第二个<strong>Build options</strong>选项，配置如图</p><p> <a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009150105319-120500590.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009150105319-120500590.png" alt="img"></a></p><p>按T【ab键】选择**<save>**进行保存，按【Esc键】回到上一级配置界面。</save></p><h3 id="3-3-Toolchain配置"><a href="#3-3-Toolchain配置" class="headerlink" title="3.3 Toolchain配置#"></a><strong>3.3 Toolchain配置</strong><a href="https://www.cnblogs.com/twzy/p/15355842.html#2.3-toolchain%E9%85%8D%E7%BD%AE">#</a></h3><p>进入第三个<strong>Toolchain</strong>选项，配置如图：</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009150540766-1755147867.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009150540766-1755147867.png" alt="img"></a></p><p>这里我们选择一些C\C++相关的库，这样我们就可以在开发板上直接编译程序了，保存返回。</p><h3 id="3-4-System-configuration配置-https-www-cnblogs-com-twzy-p-15355842-html-2-4-system-configuration配置"><a href="#3-4-System-configuration配置-https-www-cnblogs-com-twzy-p-15355842-html-2-4-system-configuration配置" class="headerlink" title="3.4 System configuration配置[#](https://www.cnblogs.com/twzy/p/15355842.html#2.4 system-configuration配置)"></a><strong>3.4 System configuration配置</strong>[#](<a href="https://www.cnblogs.com/twzy/p/15355842.html#2.4">https://www.cnblogs.com/twzy/p/15355842.html#2.4</a> system-configuration配置)</h3><p>对于<strong>System configuration</strong>选项，这里主要是配置一些系统登录时候显示的内容，配置如图</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009151624384-1186247221.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009151624384-1186247221.png" alt="img"></a></p><p>这里主要配置了登录时候显示的内容和root账号登录密码，接下来保存配置并且退回到命令行界面。</p><p>然后执行构建文件系统命令：</p><pre class="line-numbers language-none"><code class="language-none">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为是首次编译，而且buildroot在制作文件系统的时候需要联网获取组件，所以会编译很久，那么“去和妲己玩耍吧”</p><p>当你终于被别人坑的自闭的时候，文件系统大概也许可能已经编译完毕了。</p><h3 id="3-5-文件系统移植与执行"><a href="#3-5-文件系统移植与执行" class="headerlink" title="3.5 文件系统移植与执行#"></a>3.5 文件系统移植与执行<a href="https://www.cnblogs.com/twzy/p/15355842.html#2.5-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D%E4%B8%8E%E6%89%A7%E8%A1%8C">#</a></h3><p>此时在源码的<strong>output/images</strong>目录下有一个rootfs.tar，这个文件就是最终生成的根文件系统镜像，现在只需要将该镜像解压到TF卡的第二分区即可。插入TF卡到电脑端，进入<strong>out/images</strong>目录，然后输入</p><pre class="line-numbers language-none"><code class="language-none"># sudo tar -xvf rootfs.tar -C /media/&lt;你的用户名&gt;/rootfs/# 墨云的账号是twzysudo tar -xvf rootfs.tar -C /media/twzy/rootfs/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时可以看到TF卡的rootfs分区中有文件系统了</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009172303012-746246639.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009172303012-746246639.png" alt="img"></a></p><p>插入开发板，连接好串口，打开串口助手或者其他串口终端软件，可以看到根文件系统成功挂载，同时进入shell交互，用户名默认为root，密码：123456，进入root账号后</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009172655126-653041256.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009172655126-653041256.png" alt="img"></a></p><p>那么恭喜，你已经拥有了自己的Linux发行版。</p><p>至此我们完成了全部的系统移植任务，从下一篇开始我们将会升级我们的硬件设备和做一些更加有意义的东西，期待吗？</p><h3 id="3-6-升级逼格-https-www-cnblogs-com-twzy-p-15355842-html-2-6-升级逼格"><a href="#3-6-升级逼格-https-www-cnblogs-com-twzy-p-15355842-html-2-6-升级逼格" class="headerlink" title="3.6 升级逼格[#](https://www.cnblogs.com/twzy/p/15355842.html#2.6 升级逼格)"></a>3.6 升级逼格[#](<a href="https://www.cnblogs.com/twzy/p/15355842.html#2.6">https://www.cnblogs.com/twzy/p/15355842.html#2.6</a> 升级逼格)</h3><p>我们发现登录进自制的Linux系统后，命令行前置无论怎样只显示一个**#**号，逼格略低呀，怎么处理呢？</p><p>修改/etc/profile文件</p><pre class="line-numbers language-none"><code class="language-none">vi /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入</p><pre class="line-numbers language-none"><code class="language-none">export PS1='[\u@\h: \w\a\]$'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009172755348-361576513.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009172755348-361576513.png" alt="img"></a></p><p>重启小板，就可以看到与与常规Linux一样的操作体验了，只是root账号的时候还是显示 <strong>$</strong> 符号</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009173048942-1924983487.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009173048942-1924983487.png" alt="img"></a></p><p>需要注意的是，在开发板运行过程中，如果想要重启，请先执行</p><pre class="line-numbers language-none"><code class="language-none">poweroff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令正常关闭系统后，在按重启按钮，否则有很大概率回造成文件系统损坏。</p><h2 id="4-Debian文件系统制作-以及WIFI配置、交换分区配置"><a href="#4-Debian文件系统制作-以及WIFI配置、交换分区配置" class="headerlink" title="4. Debian文件系统制作,以及WIFI配置、交换分区配置"></a>4. <a href="https://www.cnblogs.com/twzy/p/15160824.html">Debian文件系统制作,以及WIFI配置、交换分区配置</a></h2><p>该片文章将完整记录一个Debian的最小文件系统的生成，以及自定义配置WIFI组件、网络组件和交换分区配置</p><blockquote><p>本文章参考：<br><a href="https://whycan.com/t_4236.html">https://whycan.com/t_4236.html</a><br><a href="http://www.leux.cn/doc/debootstrap.html%EF%BC%88%E8%AF%A5%E7%BD%91%E7%AB%99%E5%9C%A8%E5%A4%87%E6%A1%88%E4%B8%AD%EF%BC%8C%E5%8F%AF%E8%83%BD%E6%9A%82%E6%97%B6%E6%97%A0%E6%B3%95%E6%9F%A5%E7%9C%8B%E4%BA%86%EF%BC%89">http://www.leux.cn/doc/debootstrap.html（该网站在备案中，可能暂时无法查看了）</a><br>帖子整理完成。</p></blockquote><p>构建debian文件系统，作为记录，最小rootfs在180MB左右。</p><h3 id="4-1-配置构建环境"><a href="#4-1-配置构建环境" class="headerlink" title="4.1 配置构建环境#"></a>4.1 配置构建环境<a href="https://www.cnblogs.com/twzy/p/15160824.html#1.1-%E9%85%8D%E7%BD%AE%E6%9E%84%E5%BB%BA%E7%8E%AF%E5%A2%83">#</a></h3><p>安装构建文件系统的工具，一个是用来chroot，一个是用来构建文件系统</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install qemu-user-static -ysudo apt install debootstrap -ymkdir rootfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>构建文件系统之前，你要知道你想要构建哪个版本的文件系统，我从 <a href="https://www.debian.org/mirror/list.zh-cn.html%E8%BF%99%E9%87%8C%EF%BC%8C">https://www.debian.org/mirror/list.zh-cn.html</a> 这里，选择了我访问速度快的源，并且该源有armel。</p><p><code>armhf (支持硬件浮点)</code><br><code>armel (软浮点)</code></p><p>我看华为源挺快的，就用这个了mirrors.huaweicloud.com，然后就是debian的版本，我尝试一下最新的，buster</p><pre class="line-numbers language-none"><code class="language-none">sudo debootstrap --foreign --arch=armel --verbose \    trixie \    rootfs-debian13 \    http://mirrors.aliyun.com/debian/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构建完成之后，需要chroot进去修改密码等配置</p><pre class="line-numbers language-none"><code class="language-none">cd rootfs-debian13sudo mount --bind /dev dev/sudo mount --bind /sys sys/sudo mount --bind /proc proc/sudo mount --bind /dev/pts dev/pts/cd ..sudo cp /usr/bin/qemu-arm-static rootfs-debian13/usr/bin/sudo chmod +x rootfs-debian13/usr/bin/qemu-arm-staticsudo LC_ALL=C LANGUAGE=C LANG=C chroot rootfs-debian13 /debootstrap/debootstrap --second-stage --verbosesudo LC_ALL=C LANGUAGE=C LANG=C chroot rootfs-debian13<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一条命令chroot完成，<br>此时可以先apt-get等给你的文件系统安装你需要的软件包</p><p>为了提高下载速度，我们首先修改源</p><pre class="line-numbers language-none"><code class="language-none">vi /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为(注意要换其他源用http方式可以访问的，要不然还得处理https的内容):</p><pre class="line-numbers language-none"><code class="language-none">deb http://mirrors.huaweicloud.com/debian buster main<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改完以后执行：</p><pre class="line-numbers language-none"><code class="language-none">apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使源生效</p><p>安装网络相关的库</p><pre class="line-numbers language-none"><code class="language-none">apt-get install wpasupplicant #安装WIFI配置相关的组件apt-get install net-tools     #安装网络基础组件、如使用ifconfig等apt-get install udhcpc        #当wifi连接成功后，需要用这个组件去获取IP地址## 其他组件apt install gpiod i2c-tools lrzsz net-tools usbutils ssh wireless-tools sudo vim openssh-server htop pciutils usbutils acpid -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-配置账号"><a href="#4-2-配置账号" class="headerlink" title="4.2 配置账号#"></a>4.2 配置账号<a href="https://www.cnblogs.com/twzy/p/15160824.html#1.2-%E9%85%8D%E7%BD%AE%E8%B4%A6%E5%8F%B7">#</a></h3><p>修改root登录密码的方式如下</p><pre class="line-numbers language-none"><code class="language-none">passwd root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加用户</p><pre class="line-numbers language-none"><code class="language-none">groupadd &lt;用户组&gt;useradd -m -g &lt;用户组&gt; -s /bin/bash &lt;用户名&gt;passwd &lt;用户名&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-3-新增账号sudo配置"><a href="#4-3-新增账号sudo配置" class="headerlink" title="4.3 新增账号sudo配置#"></a>4.3 新增账号sudo配置<a href="https://www.cnblogs.com/twzy/p/15160824.html#1.3-%E6%96%B0%E5%A2%9E%E8%B4%A6%E5%8F%B7sudo%E9%85%8D%E7%BD%AE">#</a></h3><p>对于出现</p><pre class="line-numbers language-none"><code class="language-none">&lt;用户名&gt; is not in the sudoers file.  This incident will be reported.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到超级用户：</p><pre class="line-numbers language-none"><code class="language-none">$ su<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开<code>/etc/sudoers</code>文件：</p><pre class="line-numbers language-none"><code class="language-none"># vi /etc/sudoers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件内容<br><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211018174205921-1211442453.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211018174205921-1211442453.png" alt="img"></a></p><p>保存退出</p><p>修改主机名，否则将会以当前编译的系统的主机名进行设置(如：笔者为Ubuntu，相当的尴尬)</p><pre class="line-numbers language-none"><code class="language-none">HOSTNAME=&lt;你的主机名&gt;echo $HOSTNAME &gt; /etc/hostnameecho $HOSTNAME &gt; /proc/sys/kernel/hostnamesed -i '/localhost/s/$/\t'"$HOSTNAME"'/g' /etc/hosts# 设置主机名HOSTNAME=NanoLinuxecho $HOSTNAME &gt; /etc/hostnameecho $HOSTNAME &gt; /proc/sys/kernel/hostname# 更新hosts文件sed -i '/127.0.0.1\s*localhost/s/$/\t'"$HOSTNAME"'/g' /etc/hostssed -i '/::1\s*localhost/s/$/\t'"$HOSTNAME"'/g' /etc/hosts# 或者更安全的方法，直接编辑hosts文件cat &gt; /etc/hosts &lt;&lt; 'EOF'127.0.0.1   localhost NanoLinux::1         localhost NanoLinux ip6-localhost ip6-loopback# 如果需要，可以添加其他网络配置# 192.168.1.100  NanoLinuxEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-配置时区"><a href="#4-4-配置时区" class="headerlink" title="4.4 配置时区#"></a>4.4 配置时区<a href="https://www.cnblogs.com/twzy/p/15160824.html#1.4-%E9%85%8D%E7%BD%AE%E6%97%B6%E5%8C%BA">#</a></h3><p>修改系统默认时区</p><pre class="line-numbers language-none"><code class="language-none">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-5-配置SSH"><a href="#4-5-配置SSH" class="headerlink" title="4.5 配置SSH#"></a>4.5 配置SSH<a href="https://www.cnblogs.com/twzy/p/15160824.html#1.5-%E9%85%8D%E7%BD%AEssh">#</a></h3><p>如果要使用SSH服务，并且允许SSH客户端以root方式登录需要进行一下设置。</p><pre class="line-numbers language-none"><code class="language-none">nano /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加</p><pre class="line-numbers language-none"><code class="language-none">PermitRootLogin yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-6-其他配置"><a href="#4-6-其他配置" class="headerlink" title="4.6 其他配置"></a>4.6 其他配置</h3><h4 id="4-6-1-增加开机自启脚本"><a href="#4-6-1-增加开机自启脚本" class="headerlink" title="4.6.1 增加开机自启脚本"></a>4.6.1 增加开机自启脚本</h4><p>文件系统中的<code>/etc/init.d</code>负责linux的服务的开启和关闭等，为了能使系统开机自动运行一些脚本和命令，这里介绍如何新添加一个自启动项。</p><p>首先我们创建一个文件<code>/etc/init.d/runOnBoot</code>，内容如下：</p><pre class="line-numbers language-none"><code class="language-none">#!/bin/sh /etc/init.d/runOnBoot### BEGIN INIT INFO# Provides: runOnBoot Required-Start: $local_fs $syslog $network# Required-Stop: $local_fs $syslog $network Default-Start: 2 3 4 5# Default-Stop: 0 1 6 Short-Description: runOnBoot startup Description:# runOnBoot auto startup 1.0### END INIT INFO#------------------------------------------------------------------------------swapon /opt/images/swapmkdir /sys/kernel/config/usb_gadget/ggcd /sys/kernel/config/usb_gadget/ggecho "0x0502" &gt; idVendorecho "0x3235" &gt; idProductmkdir functions/rndis.rn0mkdir configs/c1.1ln -s functions/rndis.rn0 configs/c1.1/echo "musb-hdrc.1.auto" &gt; UDCifconfig usb0 192.168.137.2ifconfig usb0 uproute add default gw 192.168.137.1# Demo to run a script ↓# script_path=/home/start.sh# if [ ! -r ${script_path} ]; then#     echo ${script_path} not existing;# fi# . ${myStart_spaddr}#------------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给文件添加可执行权限：</p><pre class="line-numbers language-none"><code class="language-none">chmod +x /etc/init.d/runOnBoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后要添加软链接：</p><pre class="line-numbers language-none"><code class="language-none">ln -s /etc/init.d/runOnBoot /etc/rc2.d/S99runOnBoot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>/etc/rc.d/rc0.d/</code>～<code>/etc/rc.d/rc6.d/</code>文件夹的含义不同，S开头代表是开启时处理的脚本，按照后面紧跟的数字进行按顺序启动，S99则是最后进行启动。</p></blockquote><p>重启即可看到命令和脚本自动执行了。</p><h4 id="4-6-2-解决root-fs分区开机后被挂载为Read-Only的问题"><a href="#4-6-2-解决root-fs分区开机后被挂载为Read-Only的问题" class="headerlink" title="4.6.2 解决root-fs分区开机后被挂载为Read-Only的问题"></a>4.6.2 解决root-fs分区开机后被挂载为<em>Read-Only</em>的问题</h4><p>新配置的文件系统需要添加fstab进行对应分区的自动挂载，修改<code>/etc/fstab</code>文件：</p><pre class="line-numbers language-none"><code class="language-none"># &lt;file system&gt;&lt;mount pt&gt;&lt;type&gt;&lt;options&gt;&lt;dump&gt;&lt;pass&gt;/dev/root/ext2rw,noauto01proc/procprocdefaults00devpts/dev/ptsdevptsdefaults,gid=5,mode=620,ptmxmode=066600tmpfs/dev/shmtmpfsmode=077700tmpfs/tmptmpfsmode=177700tmpfs/runtmpfsmode=0755,nosuid,nodev00sysfs/syssysfsdefaults00/opt/images/swap swap swap defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-6-3-添加USB-OTG-Gadget-RNDIS功能"><a href="#4-6-3-添加USB-OTG-Gadget-RNDIS功能" class="headerlink" title="4.6.3 添加USB-OTG &amp; Gadget-RNDIS功能"></a>4.6.3 添加USB-OTG &amp; Gadget-RNDIS功能</h4><blockquote><p><strong>参考资料：</strong></p><ul><li><a href="https://whycan.com/t_6242.html">全志平台上通过configfs(libcomposite)配置RNDIS Gadget(u_ether)及Windows下的驱动</a></li><li><a href="https://linux-sunxi.org/USB_Gadget/Ethernet#Mainline_kernel_.28via_configfs.29">USB Gadget/Ethernet - linux-sunxi.org</a></li><li><a href="https://www.lotlab.org/2018/07/29/record-of-using-licheepi-part-2-using-linux-gadget/">LicheePi入坑记录2——使用 Linux Gadget 复合设备共享网络与虚拟串口 – LotLab</a></li></ul></blockquote><p><strong>USB Gadget</strong>（小饰品），就是指所开发的电子设备以USB-device的模式通过USB连接到主机，比如手机用USB线插入PC后，手机就是USB Gadget。</p><p>在本开发板中，可以利用USB Gadget把USB模拟成虚拟网卡、虚拟串口、MTP设备等等非常方便，下面介绍具体的配置方法。</p><p><strong>RNDIS功能开发方法：</strong></p><p>首先需要在内核中开启了相关选项：</p><pre class="line-numbers language-none"><code class="language-none">Device Drivers  ---&gt;       [*] USB support  ---&gt;       &lt;M&gt; Inventra Highspeed Dual Role Controller (TI, ADI, AW, ...)               MUSB Mode Selection (Dual Role mode)  ---&gt;               *** Platform Glue Layer ***           &lt;M&gt; Allwinner (sunxi)               *** MUSB DMA mode ***           [*] Disable DMA (always use PIO)       USB Physical Layer drivers  ---&gt;           &lt;M&gt; NOP USB Transceiver Driver       &lt;M&gt;   USB Gadget Support  ---&gt;           &lt;M&gt;   USB Gadget functions configurable through configfs           [*]     RNDIS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在文件系统中添加一些配置文件：</p><pre class="line-numbers language-none"><code class="language-none">cd /sys/kernel/config/usb_gadgetmkdir ggcd gg/echo "0x0502" &gt; idVendorecho "0x3235" &gt; idProductmkdir functions/rndis.rn0mkdir configs/c1.1ln -s functions/rndis.rn0 configs/c1.1/echo "musb-hdrc.1.auto" &gt; UDC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用usb0网卡并设置一个ip地址：</p><pre class="line-numbers language-none"><code class="language-none">ifconfig usb0 192.168.137.2ifconfig usb0 up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>这里使用137网段的原因是希望后面通过Windows的网络共享功能让板卡通过USB连上互联网，而Windows的共享网段固定是<code>192.168.137.1</code> 。</p></blockquote><p>在Windows端安装驱动，手动选择网络适配器，然后添加下面的驱动：</p><p><a href="https://camo.githubusercontent.com/aeed230791de077ccfffea18231ebb213b8635108d9a4d3649da6b283a0887de/68747470733a2f2f70656e677a68696875692d6d61726b646f776e2e6f73732d636e2d7368616e676861692e616c6979756e63732e636f6d2f696d672f32303232303430333139323231302e706e67"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/68747470733a2f2f70656e677a68696875692d6d61726b646f776e2e6f73732d636e2d7368616e676861692e616c6979756e63732e636f6d2f696d672f32303232303430333139323231302e706e67" alt="image-20220403192210458"></a></p><p>之后会在网络适配器中发现新的网卡设备，配置固定ip如下：</p><p><a href="https://camo.githubusercontent.com/68baa5622b7bdde7696220bfd3728bf1acbefba8db09b10820fb4003aa080cc4/68747470733a2f2f70656e677a68696875692d6d61726b646f776e2e6f73732d636e2d7368616e676861692e616c6979756e63732e636f6d2f696d672f32303232303430333139323333352e706e67"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/68747470733a2f2f70656e677a68696875692d6d61726b646f776e2e6f73732d636e2d7368616e676861692e616c6979756e63732e636f6d2f696d672f32303232303430333139323333352e706e67" alt="image-20220403192335548"></a></p><p>此时通过ping命令应该可以相互ping通了，但是在板卡上可能还是无法连接互联网，需要配置一下默认网关和DNS服务器：</p><pre class="line-numbers language-none"><code class="language-none">route add default gw 192.168.137.1#但是这样重启以后就不能用了，需要添加到自启脚本中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>DNS记录在<code>/etc/resolv.conf</code>这个文件里，可以按<code>resolv.conf</code>文件的格式修改DNS。</p><pre class="line-numbers language-none"><code class="language-none">nano /etc/resolv.conf修改为：nameserver 8.8.8.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果可以ping通<a href="http://www.baidu.com就说明配置完成了./">www.baidu.com就说明配置完成了。</a></p><h4 id="4-6-4-启用swap"><a href="#4-6-4-启用swap" class="headerlink" title="4.6.4 启用swap"></a>4.6.4 启用swap</h4><p>芯片的SiP内存只有64MB，大部分情况下都不够用，所以需要开启swap使用内存卡的一部分空间来作为交换内存。</p><p>通过free -m来查看下内存使用状况：</p><pre class="line-numbers language-none"><code class="language-none"># free -m              total        used        free      shared  buff/cache   availableMem:             54          15           6           0          31          34Swap:             0           0           0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个自定义的目录<code>/opt/images/</code>：</p><pre class="line-numbers language-none"><code class="language-none">mkdir /opt/images/rm -rf /opt/images/swap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建一个需要内存大小的文件，如512M：</p><pre class="line-numbers language-none"><code class="language-none"># dd if=/dev/zero of=/opt/images/swap bs=1024 count=5120002048000+0 records in2048000+0 records out2097152000 bytes (2.1 GB, 2.0 GiB) copied, 30.3635 s, 69.1 MB/s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>把创建的文件变成SWAP分区并启用：</p><pre class="line-numbers language-none"><code class="language-none">mkswap /opt/images/swapswapon /opt/images/swap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>free -m</code>看看SWAP是否生效，ok的话设置开机自动挂载swap：</p><pre class="line-numbers language-none"><code class="language-none">nano /etc/fstab添加一行：/opt/images/swap swap swap defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入文件系统并添加压缩包打包相关文件：</p><pre class="line-numbers language-none"><code class="language-none">cd rootfs-debiantar cvf ../rootfs-debian.tar . <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的<code>rootfs-debian.tar</code>任意解压到SD卡的文件系统分区即可。</p><p>或者直接插上SD卡拷贝所有文件（需要在VMware宿主机打开终端操作），在挂载的SD卡root-fs磁盘打开终端，输入：</p><pre class="line-numbers language-none"><code class="language-none">sudo cp -Rf path/to/rootfs-debian/* ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后插上板卡即可启动。</p><p>后续配置，在超级用户权限下执行如下两个命令：</p><pre class="line-numbers language-none"><code class="language-none">chown root:root /usr/bin/sudochmod 4755 /usr/bin/sudonano /etc/hosts 在localhost后面添加一个自己的用户名如pi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-rootfs打包"><a href="#4-7-rootfs打包" class="headerlink" title="4.7 rootfs打包#"></a>4.7 rootfs打包<a href="https://www.cnblogs.com/twzy/p/15160824.html#1.6-rootfs%E6%89%93%E5%8C%85">#</a></h3><p>当所有的内容制作完成，就可以清理缓存，打包之后就可以替换你的文件系统了</p><pre class="line-numbers language-none"><code class="language-none">apt clean #删除安装包 exit  #退出chrootrm rootfs-debian13/usr/bin/qemu-arm-static<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>卸载刚在挂载的文件夹。</p><pre class="line-numbers language-none"><code class="language-none">cd rootfs-debian13sudo umount   dev/pts/sudo umount   dev/sudo umount   sys/sudo umount   proc/sudo umount   dev/pts/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包文件。</p><pre class="line-numbers language-none"><code class="language-none"># cd rootfs-debian13  #进到文件系统目录,如果已经在该文件夹下，可以忽略tar cvf ../rootfs-debian13.tar .    #要注意那个.  代表当前目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的rootfs-debian13.tar任意解压到文件系统即可</p><h3 id="4-8-使用wpa-supplicant连接wifi"><a href="#4-8-使用wpa-supplicant连接wifi" class="headerlink" title="4.8. 使用wpa_supplicant连接wifi#"></a>4.8. 使用wpa_supplicant连接wifi<a href="https://www.cnblogs.com/twzy/p/15160824.html#2-%E4%BD%BF%E7%94%A8wpa-supplicant%E8%BF%9E%E6%8E%A5wifi">#</a></h3><p>创建配置文件</p><pre class="line-numbers language-none"><code class="language-none">vi /etc/wpa_supplicant.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入内容：</p><pre class="line-numbers language-none"><code class="language-none">network={  ssid="我的热点"  psk="我的密码"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行命令</p><pre class="line-numbers language-none"><code class="language-none">wpa_supplicant -B -d -i wlan0 -c /etc/wpa_supplicant.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 示例如下</p><pre class="line-numbers language-none"><code class="language-none">root@dika-pc:~# wpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant.confSuccessfully initialized wpa_supplicantrfkill: Cannot open RFKILL control deviceroot@dika-pc:~# [  444.817608] wlan0: authenticate with e4:67:1e:02:33:c0[  444.843208] wlan0: send auth to e4:67:1e:02:33:c0 (try 1/3)[  444.900867] wlan0: authenticated[  444.935561] wlan0: associate with e4:67:1e:02:33:c0 (try 1/3)[  444.986874] wlan0: RX AssocResp from e4:67:1e:02:33:c0 (capab=0x411 status=0 aid=4)[  445.033483] wlan0: associated[  446.047125] IPv6: ADDRCONF(NETDEV_CHANGE): wlan0: link becomes ready^C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行dhcp命名，获取IP地址</p><pre class="line-numbers language-none"><code class="language-none">root@dika-pc:~# udhcpc -i wlan0udhcpc: started, v1.30.1udhcpc: sending discoverudhcpc: sending select for 172.16.1.106udhcpc: lease of 172.16.1.106 obtained, lease time 43200root@dika-pc:~# ping www.dika.renPING www.dika.ren (149.129.80.46) 56(84) bytes of data.64 bytes from 149.129.80.46: icmp_seq=3 ttl=45 time=217 ms64 bytes from 149.129.80.46: icmp_seq=4 ttl=45 time=417 ms64 bytes from 149.129.80.46: icmp_seq=5 ttl=45 time=102 ms64 bytes from 149.129.80.46: icmp_seq=6 ttl=45 time=108 ms^C--- www.dika.ren ping statistics ---6 packets transmitted, 4 received, 33.3333% packet loss, time 346msrtt min/avg/max/mdev = 102.009/211.020/417.367/127.586 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-增加swap分区"><a href="#4-9-增加swap分区" class="headerlink" title="4.9 增加swap分区#"></a>4.9 增加swap分区<a href="https://www.cnblogs.com/twzy/p/15160824.html#3-%E5%A2%9E%E5%8A%A0swap%E5%88%86%E5%8C%BA">#</a></h3><p>在使用一些软件的过程中，会遇到系统崩溃，尤其是使用 apt-get install 的时候，所以需要加入swap分区，可以简单理解为虚拟内存。</p><p>使用</p><pre class="line-numbers language-none"><code class="language-none">free<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前swap大小，<br>使用如下命令创建你想要添加swap分区的大小</p><pre class="line-numbers language-none"><code class="language-none">dd if=/dev/zero of=/swap1 bs=1M count=512  #改成你要设置的SWAP大小，512就是512MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置swap分区文件</p><pre class="line-numbers language-none"><code class="language-none">mkswap /swap1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活swap分区</p><pre class="line-numbers language-none"><code class="language-none">swapon /swap1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时使用free命令就能看到创建好的swap分区，但这只是临时性的， 重启会失效，需要配置一下，下次开机时候要开swap</p><pre class="line-numbers language-none"><code class="language-none">vi /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>操作，在最后一行添加 </p><pre class="line-numbers language-none"><code class="language-none">/swap1 swap swap defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-planck-pi操作"><a href="#5-planck-pi操作" class="headerlink" title="5. planck-pi操作"></a>5. planck-pi操作</h2><p>通过串口连接pc进行操作</p><h3 id="5-1-修改主机名"><a href="#5-1-修改主机名" class="headerlink" title="5.1 修改主机名"></a>5.1 修改主机名</h3><pre class="line-numbers language-none"><code class="language-none">HOSTNAME=lycraftpi#lycraftpi可以换成别的名字echo $HOSTNAME &gt; /etc/hostnameecho $HOSTNAME &gt; /proc/sys/kernel/hostnamesed -i '/localhost/s/$/\t'"$HOSTNAME"'/g' /etc/hosts# 查看Debian版本号cat /etc/os-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-配置永久静态ip"><a href="#5-2-配置永久静态ip" class="headerlink" title="5.2 配置永久静态ip"></a>5.2 配置永久静态ip</h3><pre class="line-numbers language-none"><code class="language-none">vim /etc/network/interfaces# 添加以下内容allow-hotplug usb0auto usb0iface usb0 inet staticaddress 192.168.2.100netmask 255.255.255.0gateway 192.168.2.1# 启用网卡ifup usb0# 开机自启vim /etc/init.d/rcS# 添加以下内容ifup loifup usb0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置DNS</p><pre class="line-numbers language-none"><code class="language-none">vim /etc/resolv.conf# 在nameserver下添加nameserver 223.5.5.5#阿里的DNS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-PC上的操作"><a href="#6-PC上的操作" class="headerlink" title="6. PC上的操作"></a>6. PC上的操作</h2><h3 id="6-1-linux虚拟机ssh连接pi"><a href="#6-1-linux虚拟机ssh连接pi" class="headerlink" title="6.1 linux虚拟机ssh连接pi"></a>6.1 linux虚拟机ssh连接pi</h3><pre class="line-numbers language-none"><code class="language-none">sudo vim /etc/network/interfaces# 添加以下内容allow-hotplug ens35u1auto ens35u1iface ens35u1 inet staticaddress 192.168.2.1netmask 255.255.255.0# 重启下# 输入以下指令后planckpi就可以上网了echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward &gt; /dev/nullsudo iptables -P FORWARD ACCEPTsudo iptables -A POSTROUTING -t nat -j MASQUERADE -s 192.168.2.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来通过ssh连接到planckpi玩耍吧</p><pre class="line-numbers language-none"><code class="language-none">ssh root@192.168.2.100ping www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-2-Windows下ssh连接pi"><a href="#6-2-Windows下ssh连接pi" class="headerlink" title="6.2 Windows下ssh连接pi"></a>6.2 Windows下ssh连接pi</h3><p>~待填坑</p><h1 id="3-简化命令"><a href="#3-简化命令" class="headerlink" title="3. 简化命令"></a>3. 简化命令</h1><pre class="line-numbers language-none"><code class="language-none">sudo docker pull ubuntu:latestsudo docker run -it --name F1C200s_env --network host \-p 8022:22 \-v /tmp/F1C200s_env/workspace:/workspace \--privileged \ubuntu:latestsed -i 's@//.*archive.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.listsed -i 's@//.*security.ubuntu.com@//mirrors.aliyun.com@g' /etc/apt/sources.listapt updateapt install sudo wget git unzip -yapt install libncurses-dev gcc gcc-arm-linux-gnueabi make bison flex bc libssl-dev python3 python3-setuptools python3-dev swig bzip2 file g++ cpio rsync -yworkspace_path=/workspacecd ~/export ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-1-uboot"><a href="#3-1-uboot" class="headerlink" title="3.1.uboot"></a>3.1.uboot</h2><pre class="line-numbers language-none"><code class="language-none">git clone --depth=1 https://github.com/u-boot/u-boot.gitcd u-bootmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- licheepi_nano_defconfigmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig#load mmc 0:1 0x80008000 zImage;load mmc 0:1 0x80c08000 suniv-f1c100s-licheepi-nano.dtb;bootz 0x80008000 - 0x80c08000;#console=ttyS0,115200 panic=5 rootwait root=/dev/mmcblk0p2 earlyprintk rwmake -j $(nproc)cp u-boot-sunxi-with-spl.bin  ${workspace_path}/sudo dd if=/tmp/F1C200s_env/workspace/u-boot-sunxi-with-spl.bin of=/dev/sdb bs=1024 seek=8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2-linux"><a href="#3-2-linux" class="headerlink" title="3.2.linux"></a>3.2.linux</h2><pre class="line-numbers language-none"><code class="language-none">git clone --depth=1 https://mirrors.tuna.tsinghua.edu.cn/git/linux.gitwget https://files.cnblogs.com/files/twzy/linux-licheepi_nano_defconfig.zipunzip linux-licheepi_nano_defconfig.zipcp linux-licheepi_nano_defconfig linux/arch/arm/configs/cd linux make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- linux-licheepi_nano_defconfigmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfigmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j $(nproc)cp arch/arm/boot/zImage ${workspace_path}/cp arch/arm/boot/dts/allwinner/suniv-f1c100s-licheepi-nano.dtb ${workspace_path}/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-1-busybox"><a href="#3-3-1-busybox" class="headerlink" title="3.3.1 busybox"></a>3.3.1 busybox</h2><pre class="line-numbers language-none"><code class="language-none">git clone --depth=1 git://busybox.net/busybox.gitcd busyboxmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- menuconfig#Settings ----&gt;Build Options      [*]Build static binary(no shared libs)make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j $(nproc)make installcd _installmkdir etc dev mnt tmp sys proc rootcat &gt;etc/fstab &lt;&lt;EOFproc        /proc           proc        defaults        0        0tmpfs       /tmp            tmpfs       defaults        0        0sysfs       /sys            sysfs       defaults        0        0EOFmkdir -p etc/init.d/cat &gt;etc/init.d/rcS &lt;&lt;EOFecho -e "Welcome to nanoLinux"/bin/mount -aecho -e "Remounting the root filesystem"mount  -o  remount,rw  /mkdir -p /dev/ptsmount -t devpts devpts /dev/ptsecho /sbin/mdev &gt; /proc/sys/kernel/hotplugmdev -sEOFchmod 755 etc/init.d/rcS cat &gt;etc/inittab &lt;&lt;EOF::sysinit:/etc/init.d/rcS::respawn:-/bin/sh::askfirst:-/bin/sh::ctrlaltdel:/bin/umount -a -rEOFchmod 755 etc/inittabmknod dev/console c 5 1mknod dev/null c 1 3mknod dev/tty1 c 4 1 dd if=/dev/zero of=root/swap bs=1M count=512mkswap root/swapswapon root/swapecho "/root/swap swap swap defaults 0 0" &gt;&gt; etc/fstabcd /home/hhhh/Downloads/Planck-Pi/buildroot/linuxmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- modules_install INSTALL_MOD_PATH=${workspace_path}/tar -czvf rootfs.tar.gz *mv rootfs.tar.gz ${workspace_path}/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-2-buildroot"><a href="#3-3-2-buildroot" class="headerlink" title="3.3.2 buildroot"></a>3.3.2 buildroot</h2><pre class="line-numbers language-none"><code class="language-none">git clone --depth=1 https://github.com/buildroot/buildroot.gitcd buildrootcat &gt;configs/nano_linux_defconfig &lt;&lt;EOFBR2_arm=yBR2_PACKAGE_GLIBC_UTILS=yBR2_TOOLCHAIN_BUILDROOT_CXX=yBR2_PACKAGE_HOST_GDB=yBR2_CCACHE=yBR2_ENABLE_LTO=yBR2_TARGET_GENERIC_HOSTNAME="nanoLinux"BR2_TARGET_GENERIC_ISSUE="Welcome to Buildroot for the NanoLinux"BR2_TARGET_GENERIC_GETTY_PORT="ttyS0"BR2_TARGET_GENERIC_GETTY_BAUDRATE_115200=yBR2_SYSTEM_ENABLE_NLS=yBR2_TARGET_TZ_INFO=yBR2_PACKAGE_BZIP2=yBR2_PACKAGE_ZIP=yBR2_PACKAGE_LIBGPIOD=yBR2_PACKAGE_LIBGPIOD_TOOLS=yBR2_PACKAGE_LIBEVENT=yBR2_PACKAGE_LRZSZ=yBR2_PACKAGE_OPENSSH=yBR2_PACKAGE_RSYNC=yBR2_PACKAGE_SUDO=yBR2_PACKAGE_NANO=yEOFmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- nano_linux_defconfigmake ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j $(nproc)cp output/images/rootfs.tar ${workspace_path}/modprobe sunximodprobe configfsmodprobe libcompositemodprobe u_ethermodprobe usb_f_rndismount -t configfs none /sys/kernel/config/cd /sys/kernel/config/usb_gadgetmkdir g1cd g1echo "0x1d6b" &gt; idVendorecho "0x0104" &gt; idProductmkdir functions/rndis.rn0mkdir configs/c1.1ln -s functions/rndis.rn0 configs/c1.1/echo "musb-hdrc.1.auto" &gt; UDCifconfig usb0 upifconfig usb0 192.168.137.2 netmask 255.255.255.0route add default gw 192.168.137.1mkdir /ubootmount /dev/mmcblk0p1 /uboot#include &lt;dt-bindings/gpio/gpio.h&gt;#include &lt;dt-bindings/leds/common.h&gt;leds {    compatible = "gpio-leds";    led-0 {        function = LED_FUNCTION_STATUS;        color = &lt;LED_COLOR_ID_GREEN&gt;;        gpios = &lt;&amp;pio 4 6 GPIO_ACTIVE_LOW&gt;; /* PE6 */        linux,default-trigger = "heartbeat";    };};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-Debian"><a href="#3-4-Debian" class="headerlink" title="3.4 Debian"></a>3.4 Debian</h2><pre class="line-numbers language-none"><code class="language-none">apt updateapt install debootstrap qemu-user-static mkdir rootfsdebootstrap --foreign --verbose --arch=armel bookworm rootfs http://mirrors.huaweicloud.com/debian/cd rootfsmount --bind /dev dev/mount --bind /sys sys/mount --bind /proc proc/mount --bind /dev/pts dev/pts/cd ..cp /usr/bin/qemu-arm-static rootfs/usr/bin/chmod +x rootfs/usr/bin/qemu-arm-staticLC_ALL=C LANGUAGE=C LANG=C chroot rootfs /debootstrap/debootstrap --second-stage --verboseLC_ALL=C LANGUAGE=C LANG=C chroot rootfsapt install gpiod i2c-tools lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-点个灯吧"><a href="#4-点个灯吧" class="headerlink" title="4. 点个灯吧#"></a>4. 点个灯吧<a href="https://www.cnblogs.com/twzy/p/15355842.html#3.-%E7%82%B9%E4%B8%AA%E7%81%AF%E5%90%A7">#</a></h1><p>还记得我们在第一篇中提到过的我们自制小开发板的唯一的那个外设——LED灯吗？</p><p>那我们就利用Linux提供的GPIO系统通过shell命令进行点灯实验吧。</p><p>我们首先需要回到文件系统制作菜单</p><pre class="line-numbers language-none"><code class="language-none">Device Drivers -&gt;         GPIO Support -&gt;                /sys/class/gpio/… (sysfs interface)。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>按如下方式进行配置，然后编译完rootfs，重新写入小板</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009173731029-1575334130.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009173731029-1575334130.png" alt="img"></a></p><p> <a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009163731073-1479927383.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009163731073-1479927383.png" alt="img"></a></p><p>通过硬件可知LED灯连接的是<strong>PE6</strong>接口，低电平亮灯</p><p>这里我们先要了解一下GPIO编号和值的计算方式</p><blockquote><p>引脚编号 = 控制引脚的寄存器基数 + 控制引脚寄存器位数<br>批注：<br>引脚编号是gpiochipxxx下的base + 第几个GPIO，也就是base加偏移，偏移的是位数。<br>例如gpiochip34 下的第1个GPIO那么编号就是34 + 1 = 35</p></blockquote><p>对于F1C200S/F1C100S这里：A=0、B=1、C=2D=3、E=4 ……、32是固定值、6就是偏移量</p><p>举个栗子（如果使想用 PE6，那么引脚编号就可能等于 4 x 32 + 6 = 134。</p><p>这是一些参考命令</p><pre class="line-numbers language-none"><code class="language-none"># 1、导出echo 134 &gt; /sys/class/gpio/export# 2、设置方向echo out &gt; /sys/class/gpio/gpio134/direction# 3、查看方向cat /sys/class/gpio/gpio134/direction# 4、设置输出（对于LED 设置1 为高电平即LED灯灭，设置0 为低电平，LED灯亮）echo 1 &gt; /sys/class/gpio/gpio134/value# 5、查看输出值cat /sys/class/gpio/gpio134/value# 6、取消导出echo 134 &gt; /sys/class/gpio/unexport<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">echo 134 &gt; /sys/class/gpio/exportecho out &gt; /sys/class/gpio/gpio134/direction # 灯亮 （默认设置为高电平）echo 0 &gt; /sys/class/gpio/gpio134/value        # 灯灭 echo 1 &gt; /sys/class/gpio/gpio134/value        # 灯亮echo 134 &gt; /sys/class/gpio/unexport<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><a href="https://img2020.cnblogs.com/blog/483434/202110/483434-20211009173632837-1965450968.png"><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/483434-20211009173632837-1965450968.png" alt="img"></a></p><p> 我们这里借助Linux内建的GPIO子系统进行了电灯实验，但是真正Linux灵魂点灯是要通过驱动方式来实现的，但是谁让我是小白呢，以后再说吧。</p><h1 id="5-OLED屏"><a href="#5-OLED屏" class="headerlink" title="5. OLED屏"></a>5. OLED屏</h1><pre><code>i2cset -y 0 0x3c 0x00 0xaei2cset -y 0 0x3c 0x00 0x00i2cset -y 0 0x3c 0x00 0x10i2cset -y 0 0x3c 0x00 0x20i2cset -y 0 0x3c 0x00 0x81i2cset -y 0 0x3c 0x00 0x6fi2cset -y 0 0x3c 0x00 0xa0i2cset -y 0 0x3c 0x00 0xc0i2cset -y 0 0x3c 0x00 0xa4i2cset -y 0 0x3c 0x00 0xa6i2cset -y 0 0x3c 0x00 0xd5i2cset -y 0 0x3c 0x00 0x91i2cset -y 0 0x3c 0x00 0xd9i2cset -y 0 0x3c 0x00 0x22i2cset -y 0 0x3c 0x00 0xdbi2cset -y 0 0x3c 0x00 0x3fi2cset -y 0 0x3c 0x00 0xa8i2cset -y 0 0x3c 0x00 0x4fi2cset -y 0 0x3c 0x00 0xd3i2cset -y 0 0x3c 0x00 0x68i2cset -y 0 0x3c 0x00 0xdci2cset -y 0 0x3c 0x00 0x00i2cset -y 0 0x3c 0x00 0xadi2cset -y 0 0x3c 0x00 0x8ai2cset -y 0 0x3c 0x00 0xafi2cset -y 0 0x3c 0x00 0xaf</code></pre><p>​    OLED_WR_Byte(0xAE,OLED_CMD); /<em>display off</em>/<br>​    OLED_WR_Byte(0x00,OLED_CMD); /<em>set lower column address</em>/<br>​    OLED_WR_Byte(0x10,OLED_CMD); /<em>set higher column address</em>/<br>​    OLED_WR_Byte(0x20,OLED_CMD); /* Set Memory addressing mode (0x20/0x21) */<br>​    OLED_WR_Byte(0x81,OLED_CMD); /<em>contract control</em>/<br>​    OLED_WR_Byte(0x6f,OLED_CMD); /<em>b0</em>/<br>​    OLED_WR_Byte(0xA0,OLED_CMD); /<em>set segment remap</em>/<br>​    OLED_WR_Byte(0xC0,OLED_CMD); /<em>Com scan direction</em>/<br>​    OLED_WR_Byte(0xA4,OLED_CMD); /<em>Disable Entire Display On (0xA4/0xA5)</em>/<br>​    OLED_WR_Byte(0xA6,OLED_CMD); /<em>normal / reverse</em>/<br>​    OLED_WR_Byte(0xD5,OLED_CMD); /<em>set osc division</em>/<br>​    OLED_WR_Byte(0x91,OLED_CMD);<br>​    OLED_WR_Byte(0xD9,OLED_CMD); /<em>set pre-charge period</em>/<br>​    OLED_WR_Byte(0x22,OLED_CMD);<br>​    OLED_WR_Byte(0xdb,OLED_CMD); /<em>set vcomh</em>/<br>​    OLED_WR_Byte(0x3f,OLED_CMD);<br>​    OLED_WR_Byte(0xA8,OLED_CMD); /<em>multiplex ratio</em>/<br>​    OLED_WR_Byte(0x4F,OLED_CMD); /<em>duty = 1/80</em>/<br>​    OLED_WR_Byte(0xD3,OLED_CMD); /<em>set display offset</em>/<br>​    OLED_WR_Byte(0x68,OLED_CMD); /<em>18</em>/<br>​    OLED_WR_Byte(0xdc,OLED_CMD); /<em>Set Display Start Line</em>/<br>​    OLED_WR_Byte(0x00,OLED_CMD);<br>​    OLED_WR_Byte(0xad,OLED_CMD); /<em>set charge pump enable</em>/<br>​    OLED_WR_Byte(0x8a,OLED_CMD); /*Set DC-DC enable (a=0:disable; a=1:enable) */<br>​    OLED_WR_Byte(0xAF,OLED_CMD); /<em>display ON</em>/ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-配置编译环境&quot;&gt;&lt;a href=&quot;#1-配置编译环境&quot; class=&quot;headerlink&quot; title=&quot;1. 配置编译环境&quot;&gt;&lt;/a&gt;1. 配置编译环境&lt;/h1&gt;&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code c</summary>
      
    
    
    
    <category term="Linux" scheme="https://0hhhhhh0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>训练您自己的模型——长牡蛎</title>
    <link href="https://0hhhhhh0.github.io/2025/10/22/xun-lian-nin-zi-ji-de-mo-xing-mu-li/"/>
    <id>https://0hhhhhh0.github.io/2025/10/22/xun-lian-nin-zi-ji-de-mo-xing-mu-li/</id>
    <published>2025-10-22T11:26:00.000Z</published>
    <updated>2025-10-22T11:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="训练您自己的模型——长牡蛎"><a href="#训练您自己的模型——长牡蛎" class="headerlink" title="训练您自己的模型——长牡蛎"></a>训练您自己的模型——长牡蛎</h1><p>本指南提供了一个详细、逐步的教程，用于在长牡蛎数据上训练一个 OpenSpliceAI 模型。使用物种特异性的基因组和注释文件，您可以生成训练和测试数据集，然后训练一个专为牡蛎定制的剪接位点预测模型。该流程与人类 MANE 工作流程类似，但根据需要对输入文件和参数进行了调整。</p><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>在开始之前，请确保您已经：</p><ol><li><strong>安装了 OpenSpliceAI</strong>：请按照安装页面的说明进行操作。</li><li><strong>克隆了代码库</strong>：从 LiftOn OpenSpliceAI 代码库克隆 OpenSpliceAI 代码库。</li><li><strong>下载了长牡蛎的输入文件</strong>：<ul><li><strong>参考基因组</strong>：例如，长牡蛎基因组组装可以从这里获取 <code>GCA_902806645.1_cgigas_uk_roslin_v1_genomic.fna</code></li><li><strong>注释文件</strong>：长牡蛎基因注释文件 <code>GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff</code></li></ul></li></ol><h2 id="步骤-1：检查输入文件"><a href="#步骤-1：检查输入文件" class="headerlink" title="步骤 1：检查输入文件"></a>步骤 1：检查输入文件</h2><p>转换基因组名字，使其与注释gff文件中名字一致：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 变量配置</span><span class="token assign-left variable">FLANKING_SIZE</span><span class="token operator">=</span><span class="token number">400</span><span class="token assign-left variable">EXPERIMENT_NAME</span><span class="token operator">=</span><span class="token string">"oyster_full_dataset"</span><span class="token assign-left variable">TRAIN_DATASET</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/train_test_dataset/dataset_train.h5"</span><span class="token assign-left variable">TEST_DATASET</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/train_test_dataset/dataset_test.h5"</span><span class="token assign-left variable">OUTPUT_DIR</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/oyster_model_train_outdir"</span><span class="token assign-left variable">PROJECT_NAME</span><span class="token operator">=</span><span class="token string">"OpenSpliceAI-Oyster"</span><span class="token assign-left variable">RANDOM_SEED</span><span class="token operator">=</span><span class="token number">42</span><span class="token assign-left variable">MODEL</span><span class="token operator">=</span><span class="token string">"SpliceAI"</span><span class="token assign-left variable">LOSS</span><span class="token operator">=</span><span class="token string">"cross_entropy_loss"</span><span class="token assign-left variable">EPOCHS</span><span class="token operator">=</span><span class="token number">20</span><span class="token assign-left variable">PATIENCE</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">SCHEDULER</span><span class="token operator">=</span><span class="token string">"MultiStepLR"</span><span class="token comment"># 创建输出目录（如果不存在）</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$OUTPUT_DIR</span>"</span><span class="token comment"># 执行训练命令</span>openspliceai train <span class="token punctuation">\</span>   --flanking-size <span class="token variable">$FLANKING_SIZE</span> <span class="token punctuation">\</span>   --exp-num <span class="token variable">$EXPERIMENT_NAME</span> <span class="token punctuation">\</span>   --train-dataset <span class="token variable">$TRAIN_DATASET</span> <span class="token punctuation">\</span>   --test-dataset <span class="token variable">$TEST_DATASET</span> <span class="token punctuation">\</span>   --output-dir <span class="token variable">$OUTPUT_DIR</span> <span class="token punctuation">\</span>   --project-name <span class="token variable">$PROJECT_NAME</span> <span class="token punctuation">\</span>   --random-seed <span class="token variable">$RANDOM_SEED</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--model</span> <span class="token variable">$MODEL</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--loss</span> <span class="token variable">$LOSS</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--epochs</span> <span class="token variable">$EPOCHS</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--patience</span> <span class="token variable">$PATIENCE</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--scheduler</span> <span class="token variable">$SCHEDULER</span><span class="token builtin class-name">echo</span> <span class="token string">"Training completed. Model and logs saved to <span class="token variable">$OUTPUT_DIR</span>."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名为<code>1.n2n.sh</code>，<code>chmod +x 1.n2n.sh</code>，<code>./1.n2n.sh</code> 运行命令。</p><h2 id="步骤-2：创建训练和测试数据集"><a href="#步骤-2：创建训练和测试数据集" class="headerlink" title="步骤 2：创建训练和测试数据集"></a>步骤 2：创建训练和测试数据集</h2><p>使用 <code>create-data</code> 子命令处理小鼠参考基因组和注释文件，将其转换为 HDF5 格式的数据集。此步骤提取基因序列，选择典型转录本（通常是蛋白质编码的），并对序列和剪接位点标签进行独热编码。</p><p>运行以下命令（请根据需要更新文件名）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">GENOME</span><span class="token operator">=</span><span class="token string">"GCA_902806645.1_cgigas_uk_roslin_v1_genomic_fixed.fna"</span><span class="token assign-left variable">ANNOTATION</span><span class="token operator">=</span><span class="token string">"GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff"</span><span class="token assign-left variable">OUTPUT_DIR</span><span class="token operator">=</span><span class="token string">"train_test_dataset/"</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">${OUTPUT_DIR}</span><span class="token builtin class-name">echo</span> <span class="token string">"Starting accurate data processing at <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"This may take several hours for a complete genome..."</span>openspliceai create-data <span class="token punctuation">\</span>    --genome-fasta <span class="token string">"<span class="token variable">$GENOME</span>"</span> <span class="token punctuation">\</span>    --annotation-gff <span class="token string">"<span class="token variable">$ANNOTATION</span>"</span> <span class="token punctuation">\</span>    --output-dir <span class="token string">"<span class="token variable">$OUTPUT_DIR</span>"</span> <span class="token punctuation">\</span>    --parse-type canonical <span class="token punctuation">\</span>    --split-method random <span class="token punctuation">\</span>    --remove-paralogs <span class="token punctuation">\</span>    --min-identity <span class="token number">0.8</span> <span class="token punctuation">\</span>    --min-coverage <span class="token number">0.8</span> <span class="token punctuation">\</span>    --canonical-only <span class="token punctuation">\</span>    <span class="token parameter variable">--biotype</span> protein-coding <span class="token punctuation">\</span>    --write-fasta <span class="token punctuation">\</span>    <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token string">"<span class="token variable">$OUTPUT_DIR</span>/processing.log"</span><span class="token builtin class-name">echo</span> <span class="token string">"Completed at <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"Check <span class="token variable">$OUTPUT_DIR</span> for output files"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>关键选项解释</strong>：</p><ul><li><code>--remove-paralogs</code>：过滤掉旁系同源序列以避免数据泄露。</li><li><code>--min-identity 0.8</code> 和 <code>--min-coverage 0.8</code>：设置过滤阈值。</li><li><code>--parse-type canonical</code>：选择每个基因最长的典型转录本。</li><li><code>--split-method mouse</code>：应用小鼠特定的规则将数据分割成训练集和测试集。</li><li><code>--canonical-only</code>：将标记限制在保守的剪接位点模体。</li></ul><p>运行此命令后，检查输出目录中的两个主要文件：</p><ul><li><code>dataset_train.h5</code>（训练数据集）</li><li><code>dataset_test.h5</code>（测试数据集）</li></ul><p>命名为<code>2.create-data_cg.sh</code>，<code>chmod +x 2.create-data_cg.sh</code>，<code>./2.create-data_cg.sh</code> 运行命令。</p><h2 id="步骤-3：训练长牡蛎模型"><a href="#步骤-3：训练长牡蛎模型" class="headerlink" title="步骤 3：训练长牡蛎模型"></a>步骤 3：训练长牡蛎模型</h2><p>数据集准备好后，使用 <code>train</code> 子命令训练您的小鼠剪接位点预测模型。您可以根据应用选择合适的两侧侧翼序列长度；在此示例中，我们使用 10,000 个核苷酸的侧翼大小，这在先前的研究中已被证明是有效的。</p><p>运行以下命令（根据需要调整文件路径和参数）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 变量配置</span><span class="token assign-left variable">FLANKING_SIZE</span><span class="token operator">=</span><span class="token number">400</span><span class="token assign-left variable">EXPERIMENT_NAME</span><span class="token operator">=</span><span class="token string">"oyster_full_dataset"</span><span class="token assign-left variable">TRAIN_DATASET</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/train_test_dataset/dataset_train.h5"</span><span class="token assign-left variable">TEST_DATASET</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/train_test_dataset/dataset_test.h5"</span><span class="token assign-left variable">OUTPUT_DIR</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/oyster_model_train_outdir"</span><span class="token assign-left variable">PROJECT_NAME</span><span class="token operator">=</span><span class="token string">"OpenSpliceAI-Oyster"</span><span class="token assign-left variable">RANDOM_SEED</span><span class="token operator">=</span><span class="token number">42</span><span class="token assign-left variable">MODEL</span><span class="token operator">=</span><span class="token string">"SpliceAI"</span><span class="token assign-left variable">LOSS</span><span class="token operator">=</span><span class="token string">"cross_entropy_loss"</span><span class="token assign-left variable">EPOCHS</span><span class="token operator">=</span><span class="token number">20</span><span class="token assign-left variable">PATIENCE</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">SCHEDULER</span><span class="token operator">=</span><span class="token string">"MultiStepLR"</span><span class="token comment"># 创建输出目录（如果不存在）</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token string">"<span class="token variable">$OUTPUT_DIR</span>"</span><span class="token comment"># 执行训练命令</span>openspliceai train <span class="token punctuation">\</span>   --flanking-size <span class="token variable">$FLANKING_SIZE</span> <span class="token punctuation">\</span>   --exp-num <span class="token variable">$EXPERIMENT_NAME</span> <span class="token punctuation">\</span>   --train-dataset <span class="token variable">$TRAIN_DATASET</span> <span class="token punctuation">\</span>   --test-dataset <span class="token variable">$TEST_DATASET</span> <span class="token punctuation">\</span>   --output-dir <span class="token variable">$OUTPUT_DIR</span> <span class="token punctuation">\</span>   --project-name <span class="token variable">$PROJECT_NAME</span> <span class="token punctuation">\</span>   --random-seed <span class="token variable">$RANDOM_SEED</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--model</span> <span class="token variable">$MODEL</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--loss</span> <span class="token variable">$LOSS</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--epochs</span> <span class="token variable">$EPOCHS</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--patience</span> <span class="token variable">$PATIENCE</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--scheduler</span> <span class="token variable">$SCHEDULER</span><span class="token builtin class-name">echo</span> <span class="token string">"Training completed. Model and logs saved to <span class="token variable">$OUTPUT_DIR</span>."</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>选项解释</strong>：</p><ul><li><code>--flanking-size 10000</code>：将侧翼区域设置为 10,000 个核苷酸。</li><li><code>--exp-num mouse_full_dataset</code>：此实验的标签。</li><li><code>--random-seed 42</code>：确保结果可重现。</li><li><code>--model SpliceAI</code>：使用 SpliceAI 模型架构。</li><li><code>--loss cross_entropy_loss</code>：指定损失函数。</li><li>模型检查点（例如 <code>model_best.pt</code>）和训练日志将保存在指定的输出目录中。</li></ul><p>命名为<code>3.train_model.sh</code>，<code>chmod +x 3.train_model.sh</code>，<code>./3.train_model.sh</code> 运行命令。</p><h2 id="步骤-4（可选）：转移模型"><a href="#步骤-4（可选）：转移模型" class="headerlink" title="步骤 4（可选）：转移模型"></a>步骤 4（可选）：转移模型</h2><p>下面可以不运行，前面模型训练使用的fz == 400，机器不行，没跑大的，所以下面使用<code>transfer</code>训练2000的。</p><p>运行以下命令（根据需要调整文件路径和参数）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">openspliceai transfer <span class="token punctuation">\</span>   --train-dataset /home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/train_test_dataset/dataset_train.h5 <span class="token punctuation">\</span>   --test-dataset /home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/train_test_dataset/dataset_test.h5 <span class="token punctuation">\</span>   --pretrained-model /home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/oyster_model_train_outdir/SpliceAI_OpenSpliceAI-Oyster_400_oyster_full_dataset_rs42/oyster_full_dataset/models/model_best.pt <span class="token punctuation">\</span>   --flanking-size <span class="token number">2000</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--unfreeze</span> <span class="token number">2</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--scheduler</span> CosineAnnealingWarmRestarts <span class="token punctuation">\</span>   <span class="token parameter variable">--loss</span> focal_loss <span class="token punctuation">\</span>   <span class="token parameter variable">--epochs</span> <span class="token number">10</span> <span class="token punctuation">\</span>   <span class="token parameter variable">--patience</span> <span class="token number">3</span> <span class="token punctuation">\</span>   --early-stopping <span class="token punctuation">\</span>   --project-name OpenSpliceAI-Oyster_2000_transfer <span class="token punctuation">\</span>   --output-dir /home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/oyster_model_train_outdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名为<code>4.transfer_model.sh</code>，<code>chmod +x 4.transfer_model.sh</code>，<code>./4.transfer_model.sh</code> 运行命令。</p><h2 id="步骤-5（可选）：校准长牡蛎模型"><a href="#步骤-5（可选）：校准长牡蛎模型" class="headerlink" title="步骤 5（可选）：校准长牡蛎模型"></a>步骤 5（可选）：校准长牡蛎模型</h2><p>校准可以优化模型的输出概率，使其更能反映经验上的剪接位点可能性。如果需要，可以使用 <code>calibrate</code> 子命令运行校准步骤。</p><p>执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 强制使用CPU避免内存问题</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token string">""</span>openspliceai calibrate <span class="token punctuation">\</span>   --flanking-size <span class="token number">2000</span> <span class="token punctuation">\</span>   --train-dataset train_test_dataset/dataset_train.h5 <span class="token punctuation">\</span>   --test-dataset train_test_dataset/dataset_test.h5 <span class="token punctuation">\</span>   --output-dir model_calibrate_outdir_oyster/ <span class="token punctuation">\</span>   --project-name OpenSpliceAI-oyster-calibrate <span class="token punctuation">\</span>   --random-seed <span class="token number">42</span> <span class="token punctuation">\</span>   --pretrained-model oyster_model_train_outdir/SpliceAI_OpenSpliceAI-Oyster_2000_transfer_2000_0_rs42/0/models/model_best.pt <span class="token punctuation">\</span>   <span class="token parameter variable">--loss</span> cross_entropy_loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此命令：</p><ul><li>从您的长牡蛎训练运行中加载最佳模型检查点。</li><li>优化用于校准的温度参数。</li><li>将校准输出（例如，温度参数、可靠性曲线）保存在指定目录中。</li></ul><h2 id="步骤-6：部署您训练好的长牡蛎模型"><a href="#步骤-6：部署您训练好的长牡蛎模型" class="headerlink" title="步骤 6：部署您训练好的长牡蛎模型"></a>步骤 6：部署您训练好的长牡蛎模型</h2><p>训练（以及可选的校准）完成后，您的小鼠模型就可以使用了。您现在可以：</p><ul><li><strong>预测剪接位点</strong>：使用 <code>predict</code> 子命令对新的长牡蛎 FASTA 序列进行推理。</li><li><strong>分析变异效应</strong>：使用 <code>variant</code> 子命令评估特定突变如何影响长牡蛎基因组中的剪接。</li></ul><h3 id="测试1："><a href="#测试1：" class="headerlink" title="测试1："></a>测试1：</h3><p>执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">cd</span> /home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai<span class="token builtin class-name">echo</span> <span class="token string">"=== 使用绝对路径测试 ==="</span><span class="token comment"># 使用绝对路径</span><span class="token assign-left variable">MODEL_PATH</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/oyster_model_train_outdir/SpliceAI_OpenSpliceAI-Oyster_2000_transfer_2000_0_rs42/0/models/model_best.pt"</span><span class="token builtin class-name">echo</span> <span class="token string">"模型路径: <span class="token variable">$MODEL_PATH</span>"</span><span class="token function">ls</span> <span class="token parameter variable">-la</span> <span class="token string">"<span class="token variable">$MODEL_PATH</span>"</span><span class="token comment"># 创建测试序列</span><span class="token function">cat</span> <span class="token operator">&gt;</span> test_snp.fasta <span class="token operator">&lt;&lt;</span> <span class="token string">'EOF'&gt;reference_sequence$(python3 -c "import random; random.seed(42); print(''.join(random.choices(['A','C','G','T'], k=1000)))")&gt;mutant_sequence  $(python3 -c "import random; random.seed(42); s=''.join(random.choices(['A','C','G','T'], k=1000)); print(s[:500] + 'A' + s[501:])")EOF</span><span class="token builtin class-name">echo</span> <span class="token string">"测试序列已创建"</span><span class="token comment"># 运行预测</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"开始剪接位点预测..."</span>openspliceai predict <span class="token punctuation">\</span>    --input-sequence <span class="token string">"test_snp.fasta"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">--model</span> <span class="token string">"<span class="token variable">$MODEL_PATH</span>"</span> <span class="token punctuation">\</span>    --flanking-size <span class="token number">2000</span> <span class="token punctuation">\</span>    --output-dir <span class="token string">"snp_prediction_results"</span><span class="token builtin class-name">echo</span> <span class="token string">"=== 预测完成 ==="</span><span class="token builtin class-name">echo</span> <span class="token string">"结果文件:"</span><span class="token function">find</span> snp_prediction_results <span class="token parameter variable">-type</span> f <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名为<code>6.single_snp_test.sh</code>，<code>chmod +x 6.single_snp_test.sh</code>，<code>./6.single_snp_test.sh</code> 运行命令。</p><h3 id="测试2："><a href="#测试2：" class="headerlink" title="测试2："></a>测试2：</h3><p>执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># OpenSpliceAI 自动提取染色体长度版本</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"OpenSpliceAI - 自动提取染色体长度"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token comment"># 设置变量</span><span class="token assign-left variable">INPUT_TSV</span><span class="token operator">=</span><span class="token string">"filtered_three2one.tsv"</span><span class="token assign-left variable">MODEL_PATH</span><span class="token operator">=</span><span class="token string">"/home/hhhh/OpenSpliceAI/OpenSpliceAI/spliciai/oyster_model_train_outdir/SpliceAI_OpenSpliceAI-Oyster_2000_transfer_2000_0_rs42/0/models/model_best.pt"</span><span class="token assign-left variable">REF_GENOME</span><span class="token operator">=</span><span class="token string">"GCA_902806645.1_cgigas_uk_roslin_v1_genomic_fixed.fna"</span><span class="token assign-left variable">OUTPUT_DIR</span><span class="token operator">=</span><span class="token string">"./final_fix_results_auto"</span><span class="token assign-left variable">INPUT_GFF</span><span class="token operator">=</span><span class="token string">"GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff"</span><span class="token assign-left variable">OUTPUT_TXT</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/oyster_annotation_clean.txt"</span><span class="token assign-left variable">ANNOTATION</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${OUTPUT_TXT}</span>"</span><span class="token comment"># 创建输出目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">${OUTPUT_DIR}</span><span class="token comment"># 1. 自动从FASTA文件提取染色体长度</span><span class="token builtin class-name">echo</span> <span class="token string">"[1/6] 从FASTA文件提取染色体长度..."</span><span class="token comment"># 创建提取染色体长度的Python脚本</span><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/extract_chrom_lengths.py"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'EOF'import reimport sysdef extract_chromosome_lengths(fasta_file, output_file):    print(f"从FASTA文件提取染色体长度: {fasta_file}")        chrom_lengths = {}    current_chrom = None    current_length = 0        with open(fasta_file, 'r') as f:        for line in f:            if line.startswith('&gt;'):                # 保存前一个染色体的长度                if current_chrom and current_length &gt; 0:                    chrom_lengths[current_chrom] = current_length                                # 解析新的染色体头                header = line[1:].strip()                # 提取染色体名称（通常是第一个空格前的部分）                chrom_name = header.split()[0]                current_chrom = chrom_name                current_length = 0                                print(f"找到染色体: {chrom_name}")            else:                # 计算序列长度                current_length += len(line.strip())                # 保存最后一个染色体        if current_chrom and current_length &gt; 0:            chrom_lengths[current_chrom] = current_length        print(f"\n📊 染色体长度统计:")    for chrom, length in chrom_lengths.items():        print(f"  {chrom}: {length:,} bp")        # 写入VCF头文件    with open(output_file, 'w') as out:        out.write("##fileformat=VCFv4.2\n")        out.write('##INFO=&lt;ID=SpliceAI,Number=.,Type=String,Description="OpenSpliceAI annotation"&gt;\n')                # 写入准确的contig定义        for chrom, length in chrom_lengths.items():            out.write(f'##contig=&lt;ID={chrom},length={length}&gt;\n')                out.write("#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\n")        print(f"✅ VCF头文件已生成: {output_file}")    return chrom_lengthsif __name__ == "__main__":    if len(sys.argv) != 3:        print("用法: python extract_chrom_lengths.py input.fasta output.vcf_header")        sys.exit(1)        chrom_lengths = extract_chromosome_lengths(sys.argv[1], sys.argv[2])EOF</span><span class="token comment"># 运行染色体长度提取</span>python3 <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/extract_chrom_lengths.py"</span> <span class="token string">"<span class="token variable">${REF_GENOME}</span>"</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/vcf_header.txt"</span><span class="token comment"># 2. 创建过滤后的GFF注释文件</span><span class="token builtin class-name">echo</span> <span class="token string">"[2/6] 创建过滤后的GFF注释文件..."</span><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/fix_gff_with_filter.py"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'EOF'import pandas as pdimport reimport sysdef extract_gene_info_with_filter(gff_file, output_file):    print("读取GFF文件并提取完整基因信息（过滤无外显子基因）...")        genes = {}    mrnas = {}    exons = []        with open(gff_file, 'r') as f:        for line in f:            if line.startswith('#'):                continue                        fields = line.strip().split('\t')            if len(fields) &lt; 9:                continue                        chrom, source, feature_type, start, end, score, strand, phase, attributes = fields                        if feature_type == 'gene':                gene_id = 'Unknown'                gene_name = 'Unknown'                                if 'ID=' in attributes:                    gene_id = attributes.split('ID=')[1].split(';')[0]                if 'gene=' in attributes:                    gene_name = attributes.split('gene=')[1].split(';')[0]                elif 'Name=' in attributes:                    gene_name = attributes.split('Name=')[1].split(';')[0]                elif gene_id != 'Unknown':                    gene_name = gene_id                                genes[gene_id] = {                    'name': gene_name,                    'chrom': chrom,                    'strand': strand,                    'start': int(start),                    'end': int(end),                    'mrnas': []                }                        elif feature_type == 'mRNA':                mrna_id = 'Unknown'                parent_gene = 'Unknown'                                if 'ID=' in attributes:                    mrna_id = attributes.split('ID=')[1].split(';')[0]                if 'Parent=' in attributes:                    parent_gene = attributes.split('Parent=')[1].split(';')[0]                                mrnas[mrna_id] = {                    'parent': parent_gene,                    'chrom': chrom,                    'strand': strand,                    'start': int(start),                    'end': int(end),                    'exons': []                }                                if parent_gene in genes:                    genes[parent_gene]['mrnas'].append(mrna_id)                        elif feature_type == 'exon':                parent_mrna = 'Unknown'                                if 'Parent=' in attributes:                    parent_mrna = attributes.split('Parent=')[1].split(';')[0]                                exons.append({                    'parent': parent_mrna,                    'chrom': chrom,                    'start': int(start),                    'end': int(end)                })        print(f"找到 {len(genes)} 个基因, {len(mrnas)} 个mRNA, {len(exons)} 个外显子")        # 关联外显子到mRNA    for exon in exons:        parent = exon['parent']        if parent in mrnas:            mrnas[parent]['exons'].append((exon['start'], exon['end']))        # 为每个基因选择最长的mRNA作为代表，并过滤无外显子的基因    print("处理基因和转录本（过滤无外显子基因）...")    gene_records = []    skipped_genes = 0        for gene_id, gene_info in genes.items():        if not gene_info['mrnas']:            skipped_genes += 1            continue        else:            longest_mrna = None            max_length = 0                        for mrna_id in gene_info['mrnas']:                if mrna_id in mrnas:                    mrna = mrnas[mrna_id]                    length = mrna['end'] - mrna['start']                    if length &gt; max_length:                        max_length = length                        longest_mrna = mrna                        if longest_mrna and longest_mrna['exons']:                sorted_exons = sorted(longest_mrna['exons'], key=lambda x: x[0])                exon_starts = [exon[0] for exon in sorted_exons]                exon_ends = [exon[1] for exon in sorted_exons]                                gene_records.append({                    'name': gene_info['name'],                    'chrom': gene_info['chrom'],                    'strand': gene_info['strand'],                    'tx_start': longest_mrna['start'],                    'tx_end': longest_mrna['end'],                    'exon_starts': exon_starts,                    'exon_ends': exon_ends                })            else:                skipped_genes += 1        print(f"生成 {len(gene_records)} 个基因记录")    print(f"跳过 {skipped_genes} 个无外显子信息的基因")        # 写入输出文件    print("写入输出文件...")    with open(output_file, 'w') as out:        out.write("#NAME\tCHROM\tSTRAND\tTX_START\tTX_END\tEXON_START\tEXON_END\n")                for gene in gene_records:            exon_start_str = ','.join(map(str, gene['exon_starts'])) + ','            exon_end_str = ','.join(map(str, gene['exon_ends'])) + ','                        out.write(f"{gene['name']}\t{gene['chrom']}\t{gene['strand']}\t")            out.write(f"{gene['tx_start']}\t{gene['tx_end']}\t")            out.write(f"{exon_start_str}\t{exon_end_str}\n")        print(f"转换完成: {output_file}")        print(f"\n📊 统计信息:")    print(f"总基因数: {len(genes)}")    print(f"有效基因数（有外显子）: {len(gene_records)}")    print(f"无效基因数（无外显子）: {skipped_genes}")    print(f"过滤率: {skipped_genes/len(genes)*100:.1f}%")if __name__ == "__main__":    if len(sys.argv) != 3:        print("用法: python fix_gff_with_filter.py input.gff output.txt")        sys.exit(1)        extract_gene_info_with_filter(sys.argv[1], sys.argv[2])EOF</span>python3 <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/fix_gff_with_filter.py"</span> <span class="token string">"<span class="token variable">${INPUT_GFF}</span>"</span> <span class="token string">"<span class="token variable">${OUTPUT_TXT}</span>"</span><span class="token comment"># 3. 创建VCF文件（使用准确的染色体长度）</span><span class="token builtin class-name">echo</span> <span class="token string">"[3/6] 创建VCF文件（使用准确染色体长度）..."</span><span class="token assign-left variable">INPUT_VCF</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/input_variants.vcf"</span><span class="token comment"># 使用提取的VCF头</span><span class="token function">cat</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/vcf_header.txt"</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">${INPUT_VCF}</span>"</span><span class="token comment"># 添加变异数据</span><span class="token function">awk</span> -F<span class="token string">'\t'</span> <span class="token string">'NR==1 { next }{    chrom = $1;    pos = $2;    ref = $3;    alt = $4;    if (length(ref) == 1 &amp;&amp; length(alt) == 1) {        print chrom "\t" pos "\t.\t" ref "\t" alt "\t.\tPASS\t."    }}'</span> <span class="token string">"<span class="token variable">${INPUT_TSV}</span>"</span> <span class="token operator">&gt;&gt;</span> <span class="token string">"<span class="token variable">${INPUT_VCF}</span>"</span><span class="token assign-left variable">VARIANT_COUNT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'^#'</span> <span class="token string">"<span class="token variable">${INPUT_VCF}</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token string">"✅ VCF创建完成: <span class="token variable">${VARIANT_COUNT}</span> 个变异"</span><span class="token comment"># 4. 运行预测</span><span class="token builtin class-name">echo</span> <span class="token string">"[4/6] 运行OpenSpliceAI预测..."</span><span class="token assign-left variable">OUTPUT_VCF</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/output.vcf"</span><span class="token builtin class-name">echo</span> <span class="token string">"使用准确的染色体长度和过滤后的注释文件..."</span>openspliceai variant <span class="token punctuation">\</span>    <span class="token parameter variable">-I</span> <span class="token string">"<span class="token variable">${INPUT_VCF}</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-R</span> <span class="token string">"<span class="token variable">${REF_GENOME}</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-A</span> <span class="token string">"<span class="token variable">${ANNOTATION}</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-m</span> <span class="token string">"<span class="token variable">${MODEL_PATH}</span>"</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-f</span> <span class="token number">2000</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-D</span> <span class="token number">50</span> <span class="token punctuation">\</span>    <span class="token parameter variable">-O</span> <span class="token string">"<span class="token variable">${OUTPUT_VCF}</span>"</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">tee</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/prediction.log"</span><span class="token comment"># 检查预测结果</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">${OUTPUT_VCF}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">ANNOTATED_COUNT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">'SpliceAI'</span> <span class="token string">"<span class="token variable">${OUTPUT_VCF}</span>"</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>/dev/null <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"0"</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"✅ 预测完成: <span class="token variable">${ANNOTATED_COUNT}</span> 个变异被注释"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"❌ 预测失败"</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token comment"># 5. 提取结果</span><span class="token builtin class-name">echo</span> <span class="token string">"[5/6] 提取预测结果..."</span><span class="token assign-left variable">FINAL_RESULTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/final_results.tsv"</span><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/extract_results.py"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'EOF'import sysimport revcf_file = sys.argv[1]output_file = sys.argv[2]with open(vcf_file, 'r') as f, open(output_file, 'w') as out:    out.write("Chromosome\tPosition\tRef\tAlt\tGene\tDS_AG\tDS_AL\tDS_DG\tDS_DL\tMax_Score\tImpact\n")        count = 0    for line in f:        if line.startswith('#'):            continue                fields = line.strip().split('\t')        if len(fields) &lt; 8:            continue                chrom, pos, _, ref, alt, _, _, info = fields                if 'SpliceAI=' in info:            match = re.search(r'SpliceAI=([^;]+)', info)            if match:                data = match.group(1).split('|')                if len(data) &gt;= 7:                    gene = data[1]                    try:                        ds_ag = float(data[2]) if data[2] != '.' else 0.0                        ds_al = float(data[3]) if data[3] != '.' else 0.0                        ds_dg = float(data[4]) if data[4] != '.' else 0.0                        ds_dl = float(data[5]) if data[5] != '.' else 0.0                                                max_score = max(ds_ag, ds_al, ds_dg, ds_dl)                                                if max_score &gt; 0.8:                            impact = "VERY_HIGH"                        elif max_score &gt; 0.5:                            impact = "HIGH"                        elif max_score &gt; 0.2:                            impact = "MEDIUM"                        else:                            impact = "LOW"                                                out.write(f"{chrom}\t{pos}\t{ref}\t{alt}\t{gene}\t{ds_ag:.6f}\t{ds_al:.6f}\t{ds_dg:.6f}\t{ds_dl:.6f}\t{max_score:.6f}\t{impact}\n")                        count += 1                    except ValueError:                        continueprint(f"提取了 {count} 个变异的结果")EOF</span>python3 <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/extract_results.py"</span> <span class="token string">"<span class="token variable">${OUTPUT_VCF}</span>"</span> <span class="token string">"<span class="token variable">${FINAL_RESULTS}</span>"</span><span class="token comment"># 6. 清理和报告</span><span class="token builtin class-name">echo</span> <span class="token string">"[6/6] 清理和生成报告..."</span><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/extract_chrom_lengths.py"</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/fix_gff_with_filter.py"</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/extract_results.py"</span> <span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/vcf_header.txt"</span><span class="token comment"># 显示染色体长度信息</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"📏 使用的准确染色体长度:"</span>python3 <span class="token operator">&lt;&lt;</span> <span class="token string">EOFimport rewith open("<span class="token variable">${REF_GENOME}</span>", 'r') as f:    chrom_lengths = {}    current_chrom = None    current_length = 0        for line in f:        if line.startswith('&gt;'):            if current_chrom and current_length &gt; 0:                chrom_lengths[current_chrom] = current_length                        header = line[1:].strip()            chrom_name = header.split()[0]            current_chrom = chrom_name            current_length = 0        else:            current_length += len(line.strip())        if current_chrom and current_length &gt; 0:        chrom_lengths[current_chrom] = current_lengthprint("染色体长度统计:")for chrom, length in sorted(chrom_lengths.items()):    print(f"  {chrom}: {length:,} bp")EOF</span><span class="token comment"># 最终报告</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"🎉 使用准确染色体长度完成！"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"📊 结果统计:"</span><span class="token builtin class-name">echo</span> <span class="token string">"  - 输入变异: <span class="token variable">${VARIANT_COUNT}</span> 个"</span><span class="token builtin class-name">echo</span> <span class="token string">"  - 成功注释: <span class="token variable">${ANNOTATED_COUNT}</span> 个"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${VARIANT_COUNT}</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">SUCCESS_RATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"scale=2; <span class="token variable">${ANNOTATED_COUNT}</span> * 100 / <span class="token variable">${VARIANT_COUNT}</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token string">"  - 成功率: <span class="token variable">${SUCCESS_RATE}</span>%"</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"🔧 改进内容:"</span><span class="token builtin class-name">echo</span> <span class="token string">"  ✅ 自动从FASTA提取准确染色体长度"</span><span class="token builtin class-name">echo</span> <span class="token string">"  ✅ 过滤无外显子信息的基因"</span><span class="token builtin class-name">echo</span> <span class="token string">"  ✅ 使用真实的基因组坐标"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"📁 输出文件:"</span><span class="token builtin class-name">echo</span> <span class="token string">"  📋 <span class="token variable">${FINAL_RESULTS}</span> (主要结果)"</span><span class="token builtin class-name">echo</span> <span class="token string">"  🧬 <span class="token variable">${OUTPUT_TXT}</span> (过滤后的基因注释)"</span><span class="token builtin class-name">echo</span> <span class="token string">"  🧬 <span class="token variable">${OUTPUT_VCF}</span> (预测结果VCF)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名为<code>7.run_openspliceai_predict.sh</code>，<code>chmod +x 7.run_openspliceai_predict.sh</code>，<code>./7.run_openspliceai_predict.sh</code> 运行命令。</p><h3 id="结果展示："><a href="#结果展示：" class="headerlink" title="结果展示："></a>结果展示：</h3><p>执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># OpenSpliceAI 最终结果详细分析报告</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"🎊 OpenSpliceAI 最终成果报告"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token assign-left variable">OUTPUT_DIR</span><span class="token operator">=</span><span class="token string">"./final_fix_results_auto"</span><span class="token assign-left variable">FINAL_RESULTS</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${OUTPUT_DIR}</span>/final_results.tsv"</span><span class="token comment"># 详细结果分析</span>python3 <span class="token operator">&lt;&lt;</span> <span class="token string">EOFimport pandas as pdimport numpy as npfrom datetime import datetime# 读取结果文件df = pd.read_csv("<span class="token variable">${FINAL_RESULTS}</span>", sep='<span class="token entity" title="\t">\t</span>')print("🚀 重大性能提升!")print("=" * 50)print("优化前后对比:")print("  🔴 初始版本:  4/358 (1.11%)")print("  🟡 中间版本: 50/358 (13.96%)") print("  🟢 最终版本: 235/358 (65.64%)")print("")print(f"📈 性能提升: +64.53个百分点!")print(f"<span class="token entity" title="\n">\n</span>📊 详细结果分析 - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")print("=" * 60)# 基本统计total_variants = len(df)print(f"总注释变异数: {total_variants}")# 影响级别统计impact_counts = df['Impact'].value_counts()print(f"<span class="token entity" title="\n">\n</span>🎯 影响级别分布:")for impact in ['VERY_HIGH', 'HIGH', 'MEDIUM', 'LOW']:    count = impact_counts.get(impact, 0)    percentage = (count / total_variants) * 100    icon = "🔴" if impact == "VERY_HIGH" else "🟠" if impact == "HIGH" else "🟡" if impact == "MEDIUM" else "🟢"    print(f"  {icon} {impact:&lt;9}: {count:3d} 个 ({percentage:5.1f}%)")# 高影响变异详细分析high_impact = df[df['Impact'].isin(['HIGH', 'VERY_HIGH'])]if len(high_impact) &gt; 0:    print(f"<span class="token entity" title="\n">\n</span>🚨 高影响变异详情 ({len(high_impact)} 个):")    print("-" * 80)    for idx, row in high_impact.sort_values('Max_Score', ascending=False).iterrows():        icon = "🔴" if row['Impact'] == "VERY_HIGH" else "🟠"        print(f"{icon} {row['Chromosome']}:{row['Position']} {row['Ref']}-&gt;{row['Alt']}")        print(f"  基因: {row['Gene']}")        print(f"  最大分数: {row['Max_Score']:.4f} ({row['Impact']})")        print(f"  详细分数: AG={row['DS_AG']:.4f}, AL={row['DS_AL']:.4f}, DG={row['DS_DG']:.4f}, DL={row['DS_DL']:.4f}")        print()else:    print("<span class="token entity" title="\n">\n</span>✅ 未发现高影响变异")# 分数分布统计print(f"<span class="token entity" title="\n">\n</span>📈 分数分布统计:")score_stats = {}for score_col in ['DS_AG', 'DS_AL', 'DS_DG', 'DS_DL']:    scores = df[score_col]    score_stats[score_col] = {        'max': scores.max(),        'mean': scores.mean(),        '&gt;0.2': len(scores[scores &gt; 0.2]),        '&gt;0.5': len(scores[scores &gt; 0.5]),        '&gt;0.8': len(scores[scores &gt; 0.8])    }score_names = {    'DS_AG': 'Acceptor Gain',    'DS_AL': 'Acceptor Loss',     'DS_DG': 'Donor Gain',    'DS_DL': 'Donor Loss'}for score_col, stats in score_stats.items():    name = score_names[score_col]    print(f"  {name}:")    print(f"    🔺 最高分: {stats['max']:.4f}")    print(f"    📊 平均分: {stats['mean']:.4f}")    print(f"    🟡 &gt;0.2: {stats['&gt;0.2']:3d} 个")    print(f"    🟠 &gt;0.5: {stats['&gt;0.5']:3d} 个")     print(f"    🔴 &gt;0.8: {stats['&gt;0.8']:3d} 个")# 基因分布统计print(f"<span class="token entity" title="\n">\n</span>🧬 基因分布统计 (前15个):")gene_counts = df['Gene'].value_counts().head(15)for gene, count in gene_counts.items():    percentage = (count / total_variants) * 100    print(f"  {gene}: {count:2d} 个变异 ({percentage:4.1f}%)")# 染色体分布print(f"<span class="token entity" title="\n">\n</span>🔬 染色体分布:")chrom_counts = df['Chromosome'].value_counts()for chrom, count in chrom_counts.items():    percentage = (count / total_variants) * 100    print(f"  {chrom}: {count:3d} 个变异 ({percentage:5.1f}%)")# 保存详细报告report_file = "<span class="token variable">${OUTPUT_DIR}</span>/final_detailed_report.txt"with open(report_file, 'w') as f:    f.write("OpenSpliceAI 最终详细分析报告<span class="token entity" title="\\">\\</span>n")    f.write("=" * 60 + "<span class="token entity" title="\\">\\</span>n<span class="token entity" title="\\">\\</span>n")        f.write("性能提升总结:<span class="token entity" title="\\">\\</span>n")    f.write("- 初始版本: 4/358 (1.11%)<span class="token entity" title="\\">\\</span>n")    f.write("- 中间版本: 50/358 (13.96%)<span class="token entity" title="\\">\\</span>n")    f.write("- 最终版本: 235/358 (65.64%)<span class="token entity" title="\\">\\</span>n")    f.write("- 总提升: +64.53个百分点<span class="token entity" title="\\">\\</span>n<span class="token entity" title="\\">\\</span>n")        f.write(f"总注释变异数: {total_variants}<span class="token entity" title="\\">\\</span>n<span class="token entity" title="\\">\\</span>n")        f.write("影响级别分布:<span class="token entity" title="\\">\\</span>n")    for impact in ['VERY_HIGH', 'HIGH', 'MEDIUM', 'LOW']:        count = impact_counts.get(impact, 0)        percentage = (count / total_variants) * 100        f.write(f"  {impact}: {count} 个 ({percentage:.1f}%)<span class="token entity" title="\\">\\</span>n")        if len(high_impact) &gt; 0:        f.write(f"<span class="token entity" title="\\">\\</span>n高影响变异 ({len(high_impact)} 个):<span class="token entity" title="\\">\\</span>n")        for idx, row in high_impact.sort_values('Max_Score', ascending=False).iterrows():            f.write(f"{row['Chromosome']}:{row['Position']} {row['Ref']}-&gt;{row['Alt']}<span class="token entity" title="\\">\\</span>n")            f.write(f"  基因: {row['Gene']}, 最大分数: {row['Max_Score']:.4f} ({row['Impact']})<span class="token entity" title="\\">\\</span>n")            f.write(f"  AG={row['DS_AG']:.4f}, AL={row['DS_AL']:.4f}, DG={row['DS_DG']:.4f}, DL={row['DS_DL']:.4f}<span class="token entity" title="\\">\\</span>n<span class="token entity" title="\\">\\</span>n")        f.write("所有注释变异:<span class="token entity" title="\\">\\</span>n")    for idx, row in df.iterrows():        f.write(f"{row['Chromosome']}:{row['Position']} {row['Ref']}-&gt;{row['Alt']}<span class="token entity" title="\\">\\</span>n")        f.write(f"  基因: {row['Gene']}, 最大分数: {row['Max_Score']:.4f} ({row['Impact']})<span class="token entity" title="\\">\\</span>n<span class="token entity" title="\\">\\</span>n")print(f"<span class="token entity" title="\\">\\</span>n📄 详细报告已保存: {report_file}")EOF</span><span class="token comment"># 创建优化总结</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"💡 优化关键因素总结"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"1. 🔧 准确的染色体长度"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 从FASTA文件自动提取真实长度"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 避免坐标越界和计算错误"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"2. 🧬 有效的基因注释"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 过滤无外显子信息的基因 (6,837个)"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 只保留有完整结构的基因 (31,371个)"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 避免空序列错误"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"3. 📍 真实的基因组坐标"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 使用准确的基因组位置信息"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 提高剪接位点预测的准确性"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"🎯 下一步研究建议"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"1. 🔍 验证高影响变异"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 检查分数 &gt;0.5的变异"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 与已知剪接变异数据库对比"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"2. 🧪 实验验证"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 对高影响变异进行RT-PCR验证"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 检查剪接异构体的变化"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"3. 📚 功能分析"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 分析受影响基因的生物学功能"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 研究剪接改变对蛋白质功能的影响"</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"4. 🎯 临床意义"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 评估高影响变异的致病潜力"</span><span class="token builtin class-name">echo</span> <span class="token string">"   - 与疾病数据库进行关联分析"</span><span class="token comment"># 显示最重要的高影响变异</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"🏆 最重要的发现"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">${FINAL_RESULTS}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"前5个最高分数变异:"</span>    python3 <span class="token operator">&lt;&lt;</span> <span class="token string">EOFimport pandas as pddf = pd.read_csv("<span class="token variable">${FINAL_RESULTS}</span>", sep='<span class="token entity" title="\t">\t</span>')top_variants = df.nlargest(5, 'Max_Score')for idx, row in top_variants.iterrows():    icon = "🏆" if row['Max_Score'] &gt; 0.8 else "🥇" if row['Max_Score'] &gt; 0.5 else "🥈"    print(f"{icon} {row['Chromosome']}:{row['Position']} {row['Ref']}-&gt;{row['Alt']}")    print(f"   基因: {row['Gene']}")    print(f"   分数: {row['Max_Score']:.4f} ({row['Impact']})")    print(f"   AG: {row['DS_AG']:.4f}, AL: {row['DS_AL']:.4f}, DG: {row['DS_DG']:.4f}, DL: {row['DS_DL']:.4f}")    print()EOF</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">""</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span class="token builtin class-name">echo</span> <span class="token string">"✅ 分析完全成功！"</span><span class="token builtin class-name">echo</span> <span class="token string">"========================================"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命名为<code>8.show_result.sh</code>，<code>chmod +x 8.show_result.sh</code>，<code>./8.show_result.sh</code> 运行命令。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过遵循这些步骤，您已经成功地使用物种特异性的基因组和注释文件，在长牡蛎数据上训练了一个 OpenSpliceAI 模型。该模型现在可用于预测长牡蛎的剪接位点和分析遗传变异的影响，从而将 OpenSpliceAI 的实用性扩展到非人类基因组学领域。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;训练您自己的模型——长牡蛎&quot;&gt;&lt;a href=&quot;#训练您自己的模型——长牡蛎&quot; class=&quot;headerlink&quot; title=&quot;训练您自己的模型——长牡蛎&quot;&gt;&lt;/a&gt;训练您自己的模型——长牡蛎&lt;/h1&gt;&lt;p&gt;本指南提供了一个详细、逐步的教程，用于在长牡蛎数据上</summary>
      
    
    
    
    <category term="Linux" scheme="https://0hhhhhh0.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo + Butterfly 个人博客搭建</title>
    <link href="https://0hhhhhh0.github.io/2025/10/09/hexo-butterfly-ge-ren-bo-ke-da-jian/"/>
    <id>https://0hhhhhh0.github.io/2025/10/09/hexo-butterfly-ge-ren-bo-ke-da-jian/</id>
    <published>2025-10-09T14:45:00.000Z</published>
    <updated>2025-10-09T14:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Butterfly-个人博客搭建"><a href="#Hexo-Butterfly-个人博客搭建" class="headerlink" title="Hexo + Butterfly 个人博客搭建"></a>Hexo + Butterfly 个人博客搭建</h1><p>在用了一周左右的时间搭建博客，沉浸于试效果、改 bug、试效果、改 bug……的循环后，我还是决定写一篇文章来记录一下，省得未来的自己再走一遍这痛苦的过程。</p><hr><h2 id="一、Hexo-静态网页生成"><a href="#一、Hexo-静态网页生成" class="headerlink" title="一、Hexo 静态网页生成"></a>一、Hexo 静态网页生成</h2><p><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/cmd.png" alt="cmd"></p><h3 id="1-Node-js-安装"><a href="#1-Node-js-安装" class="headerlink" title="1. Node.js 安装!"></a>1. Node.js 安装!</h3><p>首先我们需要下载 Node.js<br>👉 <a href="https://nodejs.org/">Node.js — 在任何地方运行 JavaScript</a></p><p>安装好之后我们可以输入以下指令，如果都能正常输出版本号则安装成功。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token function">npm</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="2-Git-安装"><a href="#2-Git-安装" class="headerlink" title="2. Git 安装"></a>2. Git 安装</h3><p>Git 可是个好东西，程序员必备。<br>官网在这里：<a href="https://git-scm.com/downloads">Git - Downloading Package</a></p><p>验证是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常显示版本即可。</p><hr><h3 id="3-Hexo-安装"><a href="#3-Hexo-安装" class="headerlink" title="3. Hexo 安装"></a>3. Hexo 安装</h3><p>在自己心仪的文件夹下（如 <code>E:/hexo</code>），鼠标右击选择 <strong>Git Bash Here</strong>，依次执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span class="token function">npm</span> <span class="token function">install</span> hexo <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果已经安装过 hexo 或不确定装没装过也没关系，装过的执行完会显示 <em>update</em>。</p><p>查看版本：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常显示版本号说明安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/image-20251009212637204.png" alt="image-20251009212637204"></p><hr><h2 id="二、Hexo-初始化"><a href="#二、Hexo-初始化" class="headerlink" title="二、Hexo 初始化"></a>二、Hexo 初始化</h2><p>首先确保你要存放 Hexo 博客的文件夹下是空的。<br>随后在该文件夹右键选择 <strong>Git Bash Here</strong>，执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行完毕后就能看到 Hexo 框架的文件结构。</p><p>生成一个初始页面测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在页面启动后，按住 <strong>Ctrl</strong> 点击终端中显示的<br><code>http://localhost:4000/</code>  即可自动跳转至浏览器预览。</p><p><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/image-20251009212745176.png" alt="image-20251009212745176"></p><p>当你看到 Hexo 从地平线升起时，你就成功创建了一个本地静态博客网页。</p><hr><h2 id="三、部署到-GitHub"><a href="#三、部署到-GitHub" class="headerlink" title="三、部署到 GitHub"></a>三、部署到 GitHub</h2><h3 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h3><p>在 GitHub 创建一个公共仓库，命名为：</p><pre class="line-numbers language-none"><code class="language-none">username.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置账户并生成-SSH-密钥"><a href="#2-配置账户并生成-SSH-密钥" class="headerlink" title="2. 配置账户并生成 SSH 密钥"></a>2. 配置账户并生成 SSH 密钥</h3><p>在 Git Bash 中输入以下指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"XXXX"</span>                       <span class="token comment"># 配置个人信息-username</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"XXXXXXXXX@XXX.com"</span>         <span class="token comment"># 配置个人信息-useremail</span>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"XXXXXXXXX@XXX.com"</span>               <span class="token comment"># 生成密钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>生成过程中直接回车直到完成即可。<br>默认路径为：</p><pre class="line-numbers language-none"><code class="language-none">C:\Users\用户名\.ssh\id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开 GitHub 设置 → 添加 SSH 密钥 → 将文件内容粘贴进去。</p><hr><h3 id="3-添加密钥到本地-Git"><a href="#3-添加密钥到本地-Git" class="headerlink" title="3. 添加密钥到本地 Git"></a>3. 添加密钥到本地 Git</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>ssh-agent <span class="token parameter variable">-s</span><span class="token variable">)</span></span>"</span>ssh-add ~/.ssh/id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试连接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若得到以下回复则说明连接成功。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Hi username! You've successfully authenticated...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="4-确保使用正确的密钥"><a href="#4-确保使用正确的密钥" class="headerlink" title="4. 确保使用正确的密钥"></a>4. 确保使用正确的密钥</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> core.sshCommand <span class="token string">"ssh -i ~/.ssh/id_rsa"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若出现以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The authenticity of <span class="token function">host</span> <span class="token string">'github.com (20.205.243.166)'</span> can't be established.Host key verification failed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明 SSH 客户端未信任 GitHub 的主机密钥。执行以下命令修复：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> ~/.ssh/known_hosts<span class="token function">chmod</span> <span class="token number">644</span> ~/.ssh/known_hostsssh-keyscan <span class="token parameter variable">-t</span> ed25519 github.com <span class="token operator">&gt;&gt;</span> ~/.ssh/known_hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次执行 <code>ssh -T git@github.com</code> 即可。</p><hr><h3 id="5-修改-Hexo-配置文件"><a href="#5-修改-Hexo-配置文件" class="headerlink" title="5. 修改 Hexo 配置文件"></a>5. 修改 Hexo 配置文件</h3><p>打开站点配置文件 <code>_config.yml</code>，修改 <code>deploy</code> 部分如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>XXXXX/XXXXX.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后执行 Hexo 三连：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时即可通过：</p><pre class="line-numbers language-none"><code class="language-none">https://username.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问你的博客啦！</p><hr><h2 id="四、安装-Butterfly-主题"><a href="#四、安装-Butterfly-主题" class="headerlink" title="四、安装 Butterfly 主题"></a>四、安装 Butterfly 主题</h2><h3 id="1-下载主题文件"><a href="#1-下载主题文件" class="headerlink" title="1. 下载主题文件"></a>1. 下载主题文件</h3><p>在 Git 中执行以下命令安装 Butterfly 主题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没有修改代码的需求，也可以使用 npm 安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-theme-butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="2-安装渲染器"><a href="#2-安装渲染器" class="headerlink" title="2. 安装渲染器"></a>2. 安装渲染器</h3><p>Butterfly 主题依赖 <code>pug</code> 和 <code>stylus</code> 渲染器，否则启动后访问会报错。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-renderer-pug hexo-renderer-stylus <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="3-启用主题"><a href="#3-启用主题" class="headerlink" title="3. 启用主题"></a>3. 启用主题</h3><p>在站点配置文件 <code>_config.yml</code> 中找到 <code>theme</code> 字段，修改为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">theme: butterfly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再次 Hexo 三连：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就完成了主题替换！</p><hr><h2 id="五、Butterfly-主题美化"><a href="#五、Butterfly-主题美化" class="headerlink" title="五、Butterfly 主题美化"></a>五、Butterfly 主题美化</h2><h3 id="1-网站资料修改"><a href="#1-网站资料修改" class="headerlink" title="1. 网站资料修改"></a>1. 网站资料修改</h3><p>修改网站标题、副标题、邮箱等个人信息，编辑 <code>_config.yml</code> 中对应字段。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>描述</td></tr><tr><td>description</td><td>网站描述</td></tr><tr><td>keywords</td><td>网站关键词，支持多个</td></tr><tr><td>author</td><td>作者名</td></tr><tr><td>language</td><td>网站语言（常用 zh-Hans 或 zh-CN）</td></tr><tr><td>timezone</td><td>时区（如 Asia/Shanghai）</td></tr></tbody></table><hr><h3 id="2-背景图片"><a href="#2-背景图片" class="headerlink" title="2. 背景图片"></a>2. 背景图片</h3><p>修改 <code>_config.yml</code> 中的 <code>background</code> 字段即可。</p><h3 id="3-网站副标题"><a href="#3-网站副标题" class="headerlink" title="3. 网站副标题"></a>3. 网站副标题</h3><p><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/a5601f8f68744cfe4195f6e04cd5b58e.gif" alt="img"><br>启用首页副标题，启用打字机效果，以及相关配置。<br>博客根目录下<code>_config.butterfly.yml</code>文件。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页副标题设置</span><span class="token key atrule">subtitle</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 是否启用副标题</span>  <span class="token key atrule">effect</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>       <span class="token comment"># 是否启用打字机效果</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>         <span class="token comment"># 是否循环播放打字机效果</span>  <span class="token comment"># 自定义打字机效果配置（基于typed.js）</span>  <span class="token comment"># 官方配置文档：https://github.com/mattboldt/typed.js/#customization</span>  <span class="token key atrule">typed_option</span><span class="token punctuation">:</span>  <span class="token comment"># 第三方文案来源（目前仅支持中文）</span>  <span class="token comment"># 会先显示来源标识，再显示下方sub中的内容</span>  <span class="token comment"># 可选值：false/1/2/3</span>  <span class="token comment"># false - 禁用此功能</span>  <span class="token comment"># 1 - 使用 hitokoto.cn 的API</span>  <span class="token comment"># 2 - 使用 https://api.aa1.cn/doc/yiyan.html 的API</span>  <span class="token comment"># 3 - 使用 jinrishici.com 的API</span>  <span class="token key atrule">source</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 如果关闭打字机效果，将只显示sub中的第一条内容</span>  <span class="token key atrule">sub</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 学无止境'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 千里之行，始于足下 —— 老子'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 读书破万卷，下笔如有神'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 吾日三省吾身'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 星光不问赶路人，时光不负有心人'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 人生没有白走的路，每一步都算数'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 保持热爱，奔赴山海'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 纸上得来终觉浅，绝知此事要躬行'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 成功的秘诀在于坚持'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; The best way to predict the future is to invent it'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 生活是一场马拉松，你需要不断地奔跑'</span>    <span class="token punctuation">-</span> <span class="token string">'&lt;i class="fas fa-quote-left"&gt;&lt;/i&gt; 成功不是将来才有的，而是从决定去做的那一刻起，持续累积而成'</span>AI写代码yaml123456789101112131415161718192021222324252627282930<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-首页文章卡片双栏布局"><a href="#4-首页文章卡片双栏布局" class="headerlink" title="4. 首页文章卡片双栏布局"></a>4. 首页文章卡片双栏布局</h3><p><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/f11483f270f35e41af02eb7fc2fce019.png" alt="img"><br>首页文章双栏<a href="https://so.csdn.net/so/search?q=%E5%B8%83%E5%B1%80%E8%AE%BE%E7%BD%AE&amp;spm=1001.2101.3001.7020">布局设置</a>，文章摘要显示设置。<br>博客根目录下<code>_config.butterfly.yml</code>文件的<code>首页设置</code>的相关<a href="https://so.csdn.net/so/search?q=%E4%BF%AE%E6%94%B9%E4%BB%A3%E7%A0%81&amp;spm=1001.2101.3001.7020">修改代码</a>如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页文章布局方式</span><span class="token comment"># 1: 封面图在左，信息在右</span><span class="token comment"># 2: 封面图在右，信息在左</span><span class="token comment"># 3: 封面图与信息左右交替排列</span><span class="token comment"># 4: 封面图在上，信息在下</span><span class="token comment"># 5: 信息直接显示在封面图上</span><span class="token comment"># 6: 瀑布流布局 - 封面图在上，信息在下</span><span class="token comment"># 7: 瀑布流布局 - 信息直接显示在封面图上</span><span class="token key atrule">index_layout</span><span class="token punctuation">:</span> <span class="token number">6</span>AI写代码yaml123456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-首页文章摘要显示设置"><a href="#5-首页文章摘要显示设置" class="headerlink" title="5. 首页文章摘要显示设置"></a>5. 首页文章摘要显示设置</h3><p>博客根目录下<code>_config.butterfly.yml</code>文件。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 首页文章摘要显示设置</span><span class="token comment"># 1: 显示文章描述的description</span><span class="token comment"># 2: 智能显示（存在description则显示，否则显示自动截取的内容）</span><span class="token comment"># 3: 自动截取内容（默认，从前N个字符截取）</span><span class="token comment"># false: 不显示文章摘要</span><span class="token key atrule">index_post_content</span><span class="token punctuation">:</span>  <span class="token key atrule">method</span><span class="token punctuation">:</span> <span class="token number">1</span>         <span class="token comment"># 选择摘要显示方式</span>  <span class="token key atrule">length</span><span class="token punctuation">:</span> <span class="token number">300</span>       <span class="token comment"># 当method为2或3时，指定截取长度（单位：字符）</span>AI写代码yaml12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-首页文章置顶轮播插件及设置"><a href="#6-首页文章置顶轮播插件及设置" class="headerlink" title="6. 首页文章置顶轮播插件及设置"></a>6. 首页文章置顶轮播插件及设置</h3><p><img src="https://cdn.jsdelivr.net/gh/0HHHHHH0/Image@master/blog/07aa1c63a5e70ff25f99187f5bc8d880.gif" alt="img"></p><ol><li>安装插件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-butterfly-swiper <span class="token parameter variable">--save</span>AI写代码bash1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>在根目录的<code>_config.butterfly.yml</code>文件后添加以下代码：</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># hexo-butterfly-swiper</span><span class="token comment"># see https://akilar.top/posts/8e1264d1/</span><span class="token key atrule">swiper</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开关</span>  <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">5</span> <span class="token comment">#过滤器优先权</span>  <span class="token key atrule">enable_page</span><span class="token punctuation">:</span> / <span class="token comment"># 应用页面</span>  <span class="token key atrule">timemode</span><span class="token punctuation">:</span> date <span class="token comment">#date/updated</span>  <span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token comment"># 挂载容器类型</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> id    <span class="token key atrule">name</span><span class="token punctuation">:</span> recent<span class="token punctuation">-</span>posts    <span class="token key atrule">index</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">default_descr</span><span class="token punctuation">:</span> 再怎么看我也不知道怎么描述它的啦！  <span class="token key atrule">swiper_css</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//npm.elemecdn.com/hexo<span class="token punctuation">-</span>butterfly<span class="token punctuation">-</span>swiper/lib/swiper.min.css <span class="token comment">#swiper css依赖</span>  <span class="token key atrule">swiper_js</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//npm.elemecdn.com/hexo<span class="token punctuation">-</span>butterfly<span class="token punctuation">-</span>swiper/lib/swiper.min.js <span class="token comment">#swiper js依赖</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//npm.elemecdn.com/hexo<span class="token punctuation">-</span>butterfly<span class="token punctuation">-</span>swiper/lib/swiperstyle.css <span class="token comment"># 适配主题样式补丁</span>  <span class="token key atrule">custom_js</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//npm.elemecdn.com/hexo<span class="token punctuation">-</span>butterfly<span class="token punctuation">-</span>swiper/lib/swiper_init.js <span class="token comment"># swiper初始化方法</span>AI写代码yaml12345678910111213141516<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在文章的头部添加属性<code>swiper_index</code>，置顶轮播图顺序，需填非负整数，数字越大越靠前</li></ol><hr><h3 id="7-更多美化参考"><a href="#7-更多美化参考" class="headerlink" title="7. 更多美化参考"></a>7. 更多美化参考</h3><ul><li><a href="https://blog.csdn.net/">【Hexo系列】【7】Butterfly主题使用及美化 - CSDN 博客</a></li><li><a href="https://tangzhiyuan.top/">基于 Hexo 从零开始搭建个人博客（五） | 唐志远</a></li><li>[butterfly主题魔改06：首页页面美化](<a href="https://blog.csdn.net/weixin_74811095/article/details/147955459#:~:text=%E6%9C%AC%E6%96%87%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%A6%82%E4%BD%95%E5%AF%B9Butterfly%E4%B8%BB%E9%A2%98%E7%9A%84%E9%A6%96%E9%A1%B5%E8%BF%9B%E8%A1%8C%E7%BE%8E%E5%8C%96%EF%BC%8C%E4%B8%BB%E8%A6%81%E5%8C%85%E6%8B%AC%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%E7%9A%84%E4%BF%AE%E6%94%B9%EF%BC%9A%E9%A6%96%E5%85%88%EF%BC%8C%E8%B0%83%E6%95%B4%E4%BA%86%E9%A6%96%E9%A1%B5%E9%A1%B6%E9%83%A8%E5%9B%BE%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%92%8C%E4%B8%BB%E9%A1%B5%E6%A0%87%E9%A2%98%E7%9A%84%E9%A1%B6%E9%83%A8%E8%B7%9D%E7%A6%BB%EF%BC%9B%E5%85%B6%E6%AC%A1%EF%BC%8C%E5%90%AF%E7%94%A8%E4%BA%86%E7%BD%91%E7%AB%99%E5%89%AF%E6%A0%87%E9%A2%98%E5%B9%B6%E9%85%8D%E7%BD%AE%E4%BA%86%E6%89%93%E5%AD%97%E6%9C%BA%E6%95%88%E6%9E%9C%EF%BC%9B%E6%8E%A5%E7%9D%80%EF%BC%8C%E8%AE%BE%E7%BD%AE%E4%BA%86%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E5%8D%A1%E7%89%87%E7%9A%84%E5%8F%8C%E6%A0%8F%E5%B8%83%E5%B1%80%E5%92%8C%E6%91%98%E8%A6%81%E6%98%BE%E7%A4%BA%E6%96%B9%E5%BC%8F%EF%BC%9B%E6%9C%80%E5%90%8E%EF%BC%8C%E4%BB%8B%E7%BB%8D%E4%BA%86%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E9%A6%96%E9%A1%B5%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6%E8%BD%AE%E6%92%AD%E6%8F%92%E4%BB%B6%EF%BC%8C%E5%B9%B6%E6%8F%90%E4%BE%9B%E4%BA%86%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E3%80%82,%E9%80%9A%E8%BF%87%E8%BF%99%E4%BA%9B%E6%AD%A5%E9%AA%A4%EF%BC%8C%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E6%98%BE%E8%91%97%E6%8F%90%E5%8D%87%E5%8D%9A%E5%AE%A2%E9%A6%96%E9%A1%B5%E7%9A%84%E8%A7%86%E8%A7%89%E6%95%88%E6%9E%9C%E5%92%8C%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E3%80%82">https://blog.csdn.net/weixin_74811095/article/details/147955459#:~:text=本文介绍了如何对Butterfly主题的首页进行美化，主要包括以下几个方面的修改：首先，调整了首页顶部图的大小和主页标题的顶部距离；其次，启用了网站副标题并配置了打字机效果；接着，设置了首页文章卡片的双栏布局和摘要显示方式；最后，介绍了如何安装和使用首页文章置顶轮播插件，并提供了相关配置代码。,通过这些步骤，用户可以显著提升博客首页的视觉效果和用户体验。</a> _butterfly主题配置中间大标题怎么改)</li></ul><p><strong>原文链接</strong>：<a href="https://xbxyftx.top/2025/01/26/butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/index.html">https://xbxyftx.top/2025/01/26/butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/index.html</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo-Butterfly-个人博客搭建&quot;&gt;&lt;a href=&quot;#Hexo-Butterfly-个人博客搭建&quot; class=&quot;headerlink&quot; title=&quot;Hexo + Butterfly 个人博客搭建&quot;&gt;&lt;/a&gt;Hexo + Butterfly 个人博客</summary>
      
    
    
    
    <category term="默认分类" scheme="https://0hhhhhh0.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>410随身WiFi棒子Debian刷入青龙教程</title>
    <link href="https://0hhhhhh0.github.io/2025/09/25/56/"/>
    <id>https://0hhhhhh0.github.io/2025/09/25/56/</id>
    <published>2025-09-25T11:26:00.000Z</published>
    <updated>2025-09-25T11:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>备份教程<br>刷Debian前请先备份（非常重要！！！）</p><p>弄成砖了是可以刷回来的，大佬可忽略</p><p>备份教程：<a href="https://xiao54.com/linux/32.html">https://xiao54.com/linux/32.html</a><br>视频教程：<a href="https://www.bilibili.com/blackboard/webplayer/mbplayer.html?aid=326276265&amp;bvid=BV1iw411J7BG&amp;cid=1406661980&amp;p=1">https://www.bilibili.com/blackboard/webplayer/mbplayer.html?aid=326276265&amp;bvid=BV1iw411J7BG&amp;cid=1406661980&amp;p=1</a><br>下载链接：<a href="https://www.123pan.com/s/354uVv-z7YU3.html">https://www.123pan.com/s/354uVv-z7YU3.html</a><br>先进入fastboot模式，输入指令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">adb reboot bootloader<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>410随身WiFi棒子Debian刷入青龙教程<br>SSH账号密码<br>解压要刷的Debian系统，然后点击一件刷入</p><p>cmd登录地址:ssh <a href="mailto:root@10.42.0.1">root@10.42.0.1</a> 密码:1313144</p><p>SSH软件:IP:10.42.0.1 用户名:root 密码:1313144</p><p>热点:4G-wifi 密码:12345678</p><p>更新驱动<br>更新驱动视频教程：<a href="https://player.bilibili.com/">https://player.bilibili.com/</a></p><p>更新驱动前注意事项：需要安装vivo9008drivers.exe软件，如安装过请忽略</p><p>1、在【Android Device】下查看有没有【Android Composite ADB Interface】这个驱动，如果不是，右键【更新驱动程序】-【浏览我的计算机以查找驱动程序软件】-【让我从计算机上的可用驱动程序列表中选取(L)】，选择【Android Composite ADB Interface或者USB Composite Device】-【下一步】</p><p>2、插入棒子会显示一个未知设备或者RNDIS，不确定是那个就先拔掉棒子，然后重新插入</p><p>3、下拉找到【网络适配器】-厂商下拉选择【Microsoft】型号下拉选择【基于远程 NDIS 的Internet 共享设备】-【下一步】-即可完成安装驱动</p><p>网络编辑<br>1、现在就用键盘上的方向键编辑，鼠标就不能用了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">nmtui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、把热点删除，因为他现在不支持WiFi和热点一起开启，所以要把热点删除连接WiFi给debian系统通网才能继续操作</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">true &gt; /etc/apt/sources.list.d/mobian.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、更新软件包</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、更新curl wget</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">apt install curl wget<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、安装docker系统</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">apt install docker.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、docker设置随服务启动而自启动</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、启动docker</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给docker设置加速代理<br>1、创建文件夹</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo mkdir -p /etc/docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、填入加速代理</p><p>如不能使用则代理失效了，请更换代理，更换里面的链接即可。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">sudo tee /etc/docker/daemon.json  /sys/kernel/debug/usb/ci_hdrc.0/role安装1panel代码```htmlcurl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh &amp;&amp; bash quick_start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>近期商家为了成本emmmc质量都不太行下面这个指令查看寿命</p><p>查看棒子颗粒寿命<br>查看内存寿命如果显示是0x01寿命就很好，如果显示0+09等越来越远的寿命也就离挂不远了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">cat /sys/class/mmc_host/mmc0/mmc0\:0001/life_time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/56/477017655.png" alt="mfzbzmj7.png"></p><p>410随身WiFi棒子Debian刷入青龙教程<br>关灯方法一<br>1、先安装dialog</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">apt install dialog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、然后执行一键命令</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">curl -L gitee.com/ojf6ii/led-control-script/raw/master/led2.sh -o /bin/ledctl &amp;&amp; chmod 755 /bin/ledctl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、下载完成后输入指令即可打开界面</p><p>ledctl<br>关灯方法二<br>1、打开文件夹</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">vi /etc/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、粘贴以下代码保存设置开机自启关闭led，重启即可生效</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">echo none &gt; /sys/class/leds/red\:os/triggerecho none &gt; /sys/class/leds/blue\:wifi/triggerecho none &gt; /sys/class/leds/green\:internet/trigger<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;备份教程&lt;br&gt;刷Debian前请先备份（非常重要！！！）&lt;/p&gt;
&lt;p&gt;弄成砖了是可以刷回来的，大佬可忽略&lt;/p&gt;
&lt;p&gt;备份教程：	&lt;a href=&quot;https://xiao54.com/linux/32.html&quot;&gt;https://xiao54.com/linux/3</summary>
      
    
    
    
    <category term="WIFI" scheme="https://0hhhhhh0.github.io/categories/WIFI/"/>
    
    
  </entry>
  
  <entry>
    <title>基因结构</title>
    <link href="https://0hhhhhh0.github.io/2025/09/17/55/"/>
    <id>https://0hhhhhh0.github.io/2025/09/17/55/</id>
    <published>2025-09-17T14:24:00.000Z</published>
    <updated>2025-09-17T14:34:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p>!!!</p><pre><code>    flowchart TD    A["一个完整的真核生物基因（DNA模板链）"]        subgraph A_Sub[基因结构]        direction LR        Promoter[启动子 Promoter]        Exon1[外显子1 Exon 1]        Intron[内含子 Intron]        Exon2[外显子2 Exon 2]        Terminator[终止子 Terminator]    end        A --&gt; A_Sub        subgraph Transcription[第一步：转录]        direction TB        B["初级mRNA转录本（Pre-mRNA, 包含所有序列）"]    end        A_Sub --转录--&gt; Transcription        subgraph Splicing[第二步：加工（剪切与拼接）]        direction TB        C["切除内含子并将外显子连接起来"]    end        Transcription --加工--&gt; Splicing        subgraph Final_mRNA[第三步：成熟mRNA]        direction LR        D["5' 帽子"]        E["5' UTR"]        F["CDS (编码序列)起始密码子AUG -&gt; 终止密码子UAA/UAG/UGA"]        G["3' UTR"]        H["多聚A尾巴"]    end        Splicing --"拼接后形成"--&gt; Final_mRNA        %% 定义关系    Exon1 --包含--&gt; UTR1[5' UTR部分]    Exon1 --包含--&gt; CDS_Part1[CDS部分]    Exon2 --包含--&gt; CDS_Part2[CDS部分]    Exon2 --包含--&gt; UTR2[3' UTR部分]        UTR1 --最终成为--&gt; E    CDS_Part1 --最终成为--&gt; F    CDS_Part2 --最终成为--&gt; F    UTR2 --最终成为--&gt; G        Final_mRNA --"进入细胞质进行翻译（核糖体）"--&gt; I["合成的蛋白质"]    F --&gt; I        classDef default fill:#f9f9f9,stroke:#333,stroke-width:2px;    classDef coding fill:#e6f7ff,stroke:#333,stroke-width:1px;    classDef noncoding fill:#fff5e6,stroke:#333,stroke-width:1px;    classDef process fill:#f0f8ff,stroke:#2266ff,stroke-width:2px;        class Exon1,Exon2,CDS_Part1,CDS_Part2,F coding;    class Promoter,Intron,Terminator,UTR1,UTR2,E,G noncoding;    class Transcription,Splicing process;</code></pre><p>!!!</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>下面是代码</p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">flowchart</span> TDA<span class="token text string">["一个完整的真核生物基因（DNA模板链）"]</span><span class="token keyword">subgraph</span> A_Sub<span class="token text string">[基因结构]</span>    <span class="token keyword">direction</span> LR    Promoter<span class="token text string">[启动子 Promoter]</span>    Exon1<span class="token text string">[外显子1 Exon 1]</span>    Intron<span class="token text string">[内含子 Intron]</span>    Exon2<span class="token text string">[外显子2 Exon 2]</span>    Terminator<span class="token text string">[终止子 Terminator]</span><span class="token keyword">end</span>A <span class="token arrow operator">--&gt;</span> A_Sub<span class="token keyword">subgraph</span> Transcription<span class="token text string">[第一步：转录]</span>    <span class="token keyword">direction</span> TB    B<span class="token text string">["初级mRNA转录本（Pre-mRNA, 包含所有序列）"]</span><span class="token keyword">end</span>A_Sub <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">转录</span><span class="token arrow operator">--&gt;</span></span> Transcription<span class="token keyword">subgraph</span> Splicing<span class="token text string">[第二步：加工（剪切与拼接）]</span>    <span class="token keyword">direction</span> TB    C<span class="token text string">["切除内含子并将外显子连接起来"]</span><span class="token keyword">end</span>Transcription <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">加工</span><span class="token arrow operator">--&gt;</span></span> Splicing<span class="token keyword">subgraph</span> Final_mRNA<span class="token text string">[第三步：成熟mRNA]</span>    <span class="token keyword">direction</span> LR    D<span class="token text string">["5' 帽子"]</span>    E<span class="token text string">["5' UTR"]</span>    F[<span class="token string">"CDS (编码序列)起始密码子AUG -&gt; 终止密码子UAA/UAG/UGA"</span>]    G<span class="token text string">["3' UTR"]</span>    H<span class="token text string">["多聚A尾巴"]</span><span class="token keyword">end</span>Splicing <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">"拼接后形成"</span><span class="token arrow operator">--&gt;</span></span> Final_mRNA<span class="token comment">%% 定义关系</span>Exon1 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">包含</span><span class="token arrow operator">--&gt;</span></span> UTR1<span class="token text string">[5' UTR部分]</span>Exon1 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">包含</span><span class="token arrow operator">--&gt;</span></span> CDS_Part1<span class="token text string">[CDS部分]</span>Exon2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">包含</span><span class="token arrow operator">--&gt;</span></span> CDS_Part2<span class="token text string">[CDS部分]</span>Exon2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">包含</span><span class="token arrow operator">--&gt;</span></span> UTR2<span class="token text string">[3' UTR部分]</span>UTR1 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">最终成为</span><span class="token arrow operator">--&gt;</span></span> ECDS_Part1 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">最终成为</span><span class="token arrow operator">--&gt;</span></span> FCDS_Part2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">最终成为</span><span class="token arrow operator">--&gt;</span></span> FUTR2 <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">最终成为</span><span class="token arrow operator">--&gt;</span></span> GFinal_mRNA <span class="token inter-arrow-label"><span class="token arrow-head arrow operator">--</span><span class="token label property">"进入细胞质进行翻译（核糖体）"</span><span class="token arrow operator">--&gt;</span></span> I<span class="token text string">["合成的蛋白质"]</span>F <span class="token arrow operator">--&gt;</span> I<span class="token keyword">classDef</span> default <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#f9f9f9<span class="token punctuation">,</span><span class="token property">stroke</span><span class="token operator">:</span>#333<span class="token punctuation">,</span><span class="token property">stroke-width</span><span class="token operator">:</span>2px</span><span class="token punctuation">;</span><span class="token keyword">classDef</span> coding <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#e6f7ff<span class="token punctuation">,</span><span class="token property">stroke</span><span class="token operator">:</span>#333<span class="token punctuation">,</span><span class="token property">stroke-width</span><span class="token operator">:</span>1px</span><span class="token punctuation">;</span><span class="token keyword">classDef</span> noncoding <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#fff5e6<span class="token punctuation">,</span><span class="token property">stroke</span><span class="token operator">:</span>#333<span class="token punctuation">,</span><span class="token property">stroke-width</span><span class="token operator">:</span>1px</span><span class="token punctuation">;</span><span class="token keyword">classDef</span> process <span class="token style"><span class="token property">fill</span><span class="token operator">:</span>#f0f8ff<span class="token punctuation">,</span><span class="token property">stroke</span><span class="token operator">:</span>#2266ff<span class="token punctuation">,</span><span class="token property">stroke-width</span><span class="token operator">:</span>2px</span><span class="token punctuation">;</span><span class="token keyword">class</span> Exon1,Exon2,CDS_Part1,CDS_Part2,F coding<span class="token punctuation">;</span><span class="token keyword">class</span> Promoter,Intron,Terminator,UTR1,UTR2,E,G noncoding<span class="token punctuation">;</span><span class="token keyword">class</span> Transcription,Splicing process<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;结构图&quot;&gt;&lt;a href=&quot;#结构图&quot; class=&quot;headerlink&quot; title=&quot;结构图&quot;&gt;&lt;/a&gt;结构图&lt;/h2&gt;&lt;p&gt;!!!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    flowchart TD
    A[&quot;一个完整的真核生物基因（DNA模板链）&quot;]
 </summary>
      
    
    
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>ANNOVAR | 变异注释</title>
    <link href="https://0hhhhhh0.github.io/2025/09/16/53/"/>
    <id>https://0hhhhhh0.github.io/2025/09/16/53/</id>
    <published>2025-09-16T13:43:00.000Z</published>
    <updated>2025-09-16T13:53:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>会得到一系列变异数据，这些变异数据只是告诉我们在基因组的某个位置发生了一段序列的改变，至于这个改变会不会影响生物学功能，我们并不清楚。而注释就是将基因组的序列变异数据转化为我们更关心的生物学功能变化的信息。</p><p>Annovar常被用在人类基因组的注释上，其实，它也可以对人类以外的基因组数据进行注释。比如，老鼠基因组的注释上。需要自己进行建立注释信息。</p><p>ANNOVAR是一个perl编写的命令行工具，能在安装了perl解释器的多种操作系统上执行。允许多种输入文件格式，包括最常被使用的VCF格式。输出文件也有多种格式，包括注释过的VCF文件、用tab或者逗号分隔的text文件。</p><p>ANNOVAR能快速注释遗传变异并预测其功能。类似的variants注释软件还有 VEP, snpEff, VAAST, AnnTools等等.</p><hr><p>ANNOVAR 注释变异可以分成有基于基因、基于染色体区间和变异数据等三种类型. 这三种注释分别针对于每一个variant的不同方面：</p><p>基于基因的注释（gene-based annotation）<br>注释结果为突变位点位于基因的相对位置，是否改变氨基酸编码，确定受影响的氨基酸，获得变异位点的HGVS命名方式，揭示variant与已知基因直接的关系以及对其产生的功能性影响。可灵活使用RefSeq genes, UCSC genes, ENSEMBL genes, GENCODE genes或许多其他基因定义系统。</p><p>基于染色体区间的注释（region-based annotation）<br>识别特定基因组区域的变异，例如，44个物种中的保守区域，预测的转录因子结合位点, segmental duplication regions, GWAS hits, ChIP-Seq peaks, RNA-Seq peaks等等许多其他的在基因组区间的注释；</p><p>变异数据库的注释 / 基于过滤的注释（ filter-based annotation ）<br>则给出这个variant的一系列信息，如： population frequency in different populations 和various types of variant-deleteriousness prediction scores, 这些可被用来过滤掉一些公共的及 probably（大概,肯定的成分较大,是most likely） nondeleterious variants. 包括Clinvar, dbSNP, Cosmic, ExAC, gnomAD等等，突变数据库整理可参考从 vcf 文件准备 ANNOVAR 数据库。鉴定特定数据库中记录的变异，例如，该变异位点是否在dbSNP中有报道，在千人基因组计划中的等位基因频率如何等等。</p><p>ANNOVAR 数据库文件实际上为特定格式的文本文件，其数据库文件命名规则为: ${path_database}/${buildver}_${database_name}.txt</p><p>ANNOVAR 所有注释结果都在 vcf 文件 INFO 列添加key-value</p><h2 id="二、ANNOVAR的下载"><a href="#二、ANNOVAR的下载" class="headerlink" title="二、ANNOVAR的下载"></a>二、ANNOVAR的下载</h2><p>下载地址</p><p>填写登记表，下载ANNOVAR软件（<a href="http://annovar.openbio/">http://annovar.openbio</a> informatics.org/），解压文件</p><p>tar xvfz annovar.latest.tar.gz<br>解压后生成annovar文件夹，里面有6个perl脚本程序和2个文件夹。</p><h3 id="ANNOVAR-的文件结构"><a href="#ANNOVAR-的文件结构" class="headerlink" title="ANNOVAR 的文件结构"></a>ANNOVAR 的文件结构</h3><p>|– annotate_variation.pl              # 主程序，功能包括下载数据库，三种不同的注释<br>|– coding_change.pl                   # 可用来推断蛋白质序列<br>|– convert2annovar.pl                 # 将多种格式转为.avinput的程序<br>|– retrieve_seq_from_fasta.pl         # 用于自行建立其他物种的转录本<br>|– table_annovar.pl                   # 注释程序，可一次性完成三种类型的注释<br>|– variants_reduction.pl              # 可用来更灵活地定制过滤注释流程<br>|– example                            # 存放示例文件<br>|– humandb                            # 人类注释数据库<br>自带了humandb是已经建立好的hg19或者GRCh37等常用的数据库，可用于人的注释。 如果要进行其他注释，需要使用 -downdb命令下载数据库到 humandb/ 目录。</p><p>三、注释<br>perl retrieve_seq_from_fasta.pl<br>  –format refGene<br>  –seqfile zunla.fasta  zunla_refGene.txt<br>  –out zunla_refGeneMrna.fa</p><ol><li>用ANNOVAR注释人类基因组variants信息<br>1.1 下载所有需要的注释信息库<br>对于基于基因的注释的数据库已经在下好的 ANNOVAR package中了。如果要进行其他注释，需要按以下命令下载数据库到 ‘humandb/’ 目录里：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">perl annotate_variation.pl --downdb --buildver hg19 cytoBand humandb/perl annotate_variation.pl --downdb --webfrom annovar --buildver hg19 1000g2014oct humandb/perl annotate_variation.pl --downdb --webfrom annovar --buildver hg19 exac03 humandb/perl annotate_variation.pl --downdb --webfrom annovar --buildver hg19 ljb26_all humandb/perl annotate_variation.pl --downdb --webfrom annovar --buildver hg19 clinvar_20140929 humandb/perl annotate_variation.pl --downdb --webfrom annovar --buildver hg19 snp138 humandb/# -buildver: 基因组对应版本# -webfrom annovar: 从annovar库里下载;如果annovar库中没有，则不用写该选项，会从UCSC中下载# refGene: 数据库名称# humandb/: 下载至该目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这里下载的是几个通常用到的数据库：<br>1）cytoBand 是每个细胞间band（cytogenetic band）的染色体坐标信息 ,<br>2）1000g2014oct<br>　　　　for alternative allele frequency in the 1000 Genomes Project (version October 2014),<br>　　　　是2014年10版，1000基因组项目（和ExAV 外显子集合联合一样，是公开、开放的数据库）<br>　　　　里面供选择的等位基因频率信息<br>3）exac03<br>　　　　for the variants reported in the Exome Aggregation Consortium (version 0.3),<br>　　　　是0.3版外显子集合联合中报道过的variants.<br>4）ljb26_all<br>　　　　for various functional deleteriousness prediction scores from the dbNSFP database (version 2.6),<br>　　　　 dbNSFP: A Lightweight Database of Human NonsynonymousSNPs and TheirFunctionalPredictions on ResearchGate<br>5）clinvar_20140929<br>　　　　for the variants reported in the ClinVar database (version 20140929)<br>　　　　ClinVar是美国国家生物技术信息中心（NCBI）于2012年11月宣布、2013年4月正式启动的公共、免费数据库。作为核心数据库，ClinVar数据库整合了十多个不同类型数据库、通过标准的命名法来描述疾病，同时支持科研人员将数据下载到本地中，开展更为个性化的研究。在遗传变异和临床表型方面，NCBI和不同的研究组已经建立了各种各样的数据库，数据信息相对比较分散，ClinVar数据库的目的在于整合这些分散的数据、将变异、临床表型、实证数据以及功能注解与分析等四个方面的信息，通过专家评审，逐步形成一个标准的、可信的、稳定的遗传变异-临床表型相关的数据库。<br>6）snp138<br>　　　　for the dbSNP database (version 138).</p><p>注意：<br>　　(i) 第一个命令中不包含 –webfrom annovar 选项, 因此是从the UCSC Genome Browser annotation database下载文件的；<br>　　(ii) –buildver hg19 选项是针对hg19这一版的基因组的；<br>　　(iii) 运行上面命令后，在 humandb/ 目录下会多几个以 hg19为前缀的文件。</p><p>1.2 table_annovar.pl注释variants<br>输入下列命令，用之前下载好的注释数据库来注释vcf格式文件中的variants。ANNOVAR 所有注释结果都在 vcf 文件 INFO 列添加key-value。输出的csv文件将包含输入的5列主要信息以及各个数据库里的注释。</p><p>perl table_annovar.pl  humandb/ –outfile final –buildver hg19<br>  –protocol refGene,cytoBand,1000g2014oct_eur,1000g2014oct_afr,exac03,ljb26_all,clinvar_20140929,snp138<br>  –operation g,r,f,f,f,f,f,f<br>  –vcfinput<br> 参考输入的vcf文件的名称<br>　　–protocol 选项后跟注释来源数据库的准确名称<br>　　–operation选项后跟注释的类型:<br>　　　　g 表示基于基因的注释（gene-based annotation）；<br>　　　　r 表示基于区域的注释（region-based annotation）；<br>　　　　f 表示基于筛选子的注释（ filter-based annotation）；<br>　　–outfile 选项是指定输出文件的前缀</p><p>关键步骤：<br>　　1、确保注释数据库的名称正确并且是按你想要在输出文件中显示的顺序排列的；<br>　　2、确保 –operation指定的注释类型顺序和–protocol指定的数据库顺序是一致的；<br>　　3、确保每个protocal名称或注释类型之间只有一个逗号，并且没有空白。</p><p>final.hg19_multianno.vcf.输出文件应该是以个VCF格式文件，INFO那列以 key=value 形式、 ;分割成几个小区域. eg:Func.refGene=intronic;Gene.refGene=SAMD11. 每个键值对代表一个ANNOVAR注释信息。输出文件可以用为VCF格式文件设计的基因分析软件进一步处理。</p><p>final.hg19_multianno.txt. 每一行代表一个variant 。用tab分隔，多余列为加上的注释信息，顺序按 –protocol选项所设定的注释类型argument。</p><ol start="2"><li>用Annovar注释人类以外的基因组（Gene-based annotation）<br>Annovar常被用在人类基因组的注释上，其实，它也可以对人类以外的基因组数据进行注释。annovar一般只包含人类基因组注释数据库，其他的物种需要自己进行建立注释信息。</li></ol><p>2.1 以注释小鼠基因组为例<br>一般如果你想看是否有某种物种,如小鼠mm9的注释库时，命令行运行</p><p>perl annotate_variation.pl -builder mm9 -downdb avdblist -webfrom annovar ./<br>会生成一个mm9开头的文件，里面包含小鼠mm9有多少注释数据库，然后自己可以构建一个mousedb数据库 先在annovar文件夹里面创建mousedb文件夹（名字可自取），命令mkdir mousedb 然后使用annovar文件夹下的perl程序annotate_variation.pl</p><p>perl annotate_variation.pl -downdb -buildver mm9 -webfrom annovar refGene mousedb/<br>这个命令能实现的是帮忙下载mm9的refGene的文件，保存在mousedb文件下，自动解压后文件名为mm9_refGene.txt。 然后程序会提示使用以下两个命令继续建库</p><p>annotate_variation.pl –buildver mm9 –downdb seq mousedb/mm9_seq<br>retrieve_seq_from_fasta.pl mousedb/mm9_refGene.txt -seqdir mousedb/mm9_seq -format refGene -outfile mousedb/mm9_refGeneMrna.fa<br>同样在annovar文件下运行这两个perl程序</p><p>perl annotate_variation.pl –buildver mm9 –downdb seq mousedb/mm9_seq<br>通过这个命令，会在mousedb下创建文件夹mm9_seq，并且在里面下载mm9的基因组文件chromFa.tar.gz，perl程序帮忙解压后是按染色体分开的fasta格式文件。 然后继续运行perl程序</p><p>perl retrieve_seq_from_fasta.pl mousedb/mm9_refGene.txt -seqdir mousedb/mm9_seq -format refGene -outfile mousedb/mm9_refGeneMrna.fa<br>该程序会会在mousedb下创建mm9_refGeneMrna.fa文件，是根据mm9_refGene.txt的信息，重新构建成的老鼠转录表达基因fasta格式文件 这样老鼠mm9 annovar gene based注释库就弄好了 以文本文件test.input为案例进行测试 生成test.input的txt格式文件，根据annovar官网介绍，只要这最基本的五列信息就可以进行注释，五列分别染色体名称，染色体上的位置，染色体上的位置，参考基因组碱基，变异碱基。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1       19215217        19215217        T       C1       33803084        33803084        A       G1       33803198        33803198        A       G1       37499237        37499237        T       C1       37499238        37499238        T       C1       37500003        37500003        T       C1       43826936        43826936        T       C1       58853960        58853960        A       G1       58854487        58854487        A       G1       60436865        60436865        T       C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用perl程序进行gene based的注释</p><p>perl annotate_variation.pl -out test -build mm9 test.input mousedb<br>注释后会生成test.variant_function，test.exonic_variant_function和test.log文件，前两个即为所需要的文件。用这个例子输出test.exonic_variant_function文件输出为空文件，因为这些位点没有在exonic区域的，所以没有结果。如果有位点在exonic中，则在test.exonic_variant_function中会更具体的描述为同义突变还是非同义突变</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">intronic        Tfap2b  1       19215217        19215217        T       CUTR3            Bag2    1       33803084        33803084        A       GUTR3            Bag2    1       33803198        33803198        A       GUTR3            Mgat4a  1       37499237        37499237        T       CUTR3            Mgat4a  1       37499238        37499238        T       CUTR3            Mgat4a  1       37500003        37500003        T       Cintronic        Uxs1    1       43826936        43826936        T       Cintronic        Casp8   1       58853960        58853960        A       Gintronic        Casp8   1       58854487        58854487        A       Gintronic        Cyp20a1 1       60436865        60436865        T       C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 以注释大猩猩基因组（with the genome build identifier as panTro2.）为例。<br>对于gene-based annotation， ANNOVAR需要 genePred format 的 gene definition file和 FASTA format 的 transcript sequence file；</p><p>第一步：输入以下命令，下载大猩猩基因组定义文件（ gene definition file）及序列的 FASTA 文件到chimpdb/目录</p><p>perl annotate_variation.pl –downdb –buildver panTro2 gene chimpdb/<br>perl annotate_variation.pl –downdb –buildver panTro2 seq chimpdb/panTro2_seq<br>运行过程中，出现下列提示</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">---------------------------ADDITIONAL PROCEDURE-----------------------------------------------------------------------------------------------------NOTICE: the FASTA file for the genome is not available to download but can be generated by the ANNOVAR software.PLEASE RUN THE FOLLOWING TWO COMMANDS CONSECUTIVELY TO GENERATE THE FASTA FILES (you may need to change -seqdir to -seqfile for some genomes):    annotate_variation.pl --buildver panTro2 --downdb seq chimpdb/panTro2_seq    retrieve_seq_from_fasta.pl chimpdb/panTro2_refGene.txt -seqdir chimpdb/panTro2_seq -format refGene -outfile chimpdb/panTro2_refGeneMrna.fa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：注意ANNOVAR数据库中只包含人类基因组已建好的转录本，不包含其他物种的。故需要按以下命令自行建立对应物种的transcript FASTA file</p><p>perl retrieve_seq_from_fasta.pl chimpdb/panTro2_refGene.txt<br>  –seqdir chimpdb/panTro2_seq<br>  –format refGene<br>  –outfile chimpdb/panTro2_refGeneMrna.fa<br>–seqdir说明下载的序列文件的所在目录；<br>–format说明 gene definition file的格式.；<br>–outfile 指定输出mRNA 序列文件的名称；</p><p>关键：跟在–outfile后的输出文件名应该是 _refGeneMrna.fa这种形式，否则下一步找不到正确的 transcript FASTA sequence file.</p><p>第三步：注释variants，with the chimpanzee gene annotation:</p><p>perl table_annovar.pl  chimpdb/<br>  –vcfinput<br>  –outfile final<br>  –buildver panTro2<br>  –protocol refGene<br>  –operation g<br> input VCF file；<br>chimpdb/ directory of the downloaded data；</p><p>第四步：输出结果文件核对。 final.panTro2_multianno.txt file. The gene annotation for chimpanzee is added after the input variants.</p><p>关键：如果没有现成可用的gene definition file ，可以将基因预测工具产生的 GFF3 or GTF 文件转换成 gene definition file.</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><h2 id="三、构建自定义注释库"><a href="#三、构建自定义注释库" class="headerlink" title="三、构建自定义注释库"></a>三、构建自定义注释库</h2><p>ANNOVAR可以从服务器下载注释库，但是主要针对人类基因组，那么需要分析、注释其它的物种测序结果，怎么办呢，需要自建注释库。</p><p>1 以注释长牡蛎基因组为例</p><h3 id="第一步：准备工作"><a href="#第一步：准备工作" class="headerlink" title="第一步：准备工作"></a>第一步：准备工作</h3><p>首先，需要参考基因组的序列和注释文件，这里是名为Cg长牡蛎</p><p>GCF_902806645.1_cgigas_uk_roslin_v1_genomic.fna      # 长牡蛎 的参考基因组序列<br>/home/wanglab/Ywh/adductor_muscle_scar/Crassostrea_gigas.cgigas_uk_roslin_v1.61.gtf       # 长牡蛎的注释文件，我这里是gtf<br>ANNOVAR 建库需要 genePred 文件，因而需要准备几个转换 gtf 到 genePred 格式的软件</p><p>gffread           # gff3 to gtf<br>gtfToGenePred     # gtf to genePred<br>gffread的下载地址，需要自行编译。编译过程会自行下载<a href="https://github.com/gpertea/gclib%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%A2%84%E5%85%88%E4%B8%8B%E8%BD%BD%EF%BC%8C%E7%84%B6%E5%90%8E">https://github.com/gpertea/gclib，也可以预先下载，然后</a> <code>make</code> 。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">git clone https://github.com/gpertea/gffreadcd gffreadmake release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>推荐直接conda安装</p><p> <code>conda install gffread</code><br>gtfToGenePred的下载地址，已经编译好了，下载直接使用，他属于UCSC工具包，因而在conda环境安装gtfToGenePred的命令为</p><p> <code>conda install ucsc-gtftogenepred</code><br>conda直接安装gtftogenepred没成功，需要加上UCSC前缀。</p><h3 id="第二步：建立注释库"><a href="#第二步：建立注释库" class="headerlink" title="第二步：建立注释库"></a>第二步：建立注释库</h3><p>创建辣椒注释库的文件夹Cgigasdb，然后进去</p><p>mkdir Cgigasdb<br>cd Cgigasdb<br>转换gff3 为 gtf，推荐使用GTF格式，因为有些GFF3格式文件转换可能不正确</p><p>gffread Cgigas.gff -T -o Cgigas.gtf<br>转换gtf 为 GenePred</p><p>gtfToGenePred -genePredExt “/home/wanglab/Ywh/adductor_muscle_scar/ReSeq_Data/DZQD2023092909/annovar/Cgigasdb/GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gtf” Cg_refGene.txt<br>建立注释库</p><p>perl ../retrieve_seq_from_fasta.pl –format refGene –seqfile GCF_902806645.1_cgigas_uk_roslin_v1_genomic.fna –outfile Cg_refGeneMrna.fa Cg_refGene.txt<br>这样我们的建库就完成了，获得两个重要的文件</p><p>Cgigas_refGeneMrna.fa<br>Cgigas_refGene.txt<br>强调：关于文件的命名，按照常规逻辑，这两个文件肯定不能随便命名，不然annovar无法识别！摸索了一下，前缀就是下面build参数使用的名字，这里就是Cgigas，下面注释就要使用“-build Cgigas”这个参数，对于基于基因注释的txt文件命名就是refGene，连起来就是 Cgigas_refGene.txt。而fa文件前缀一样，后面有稍稍差别为refGeneMrna，连起来就是Cgigas_refGeneMrna.fa。</p><h3 id="第三步：转换需要注释的vcf文件"><a href="#第三步：转换需要注释的vcf文件" class="headerlink" title="第三步：转换需要注释的vcf文件"></a>第三步：转换需要注释的vcf文件</h3><p>BB3.HC.vcf是HaplotypeCaller得到的vcf文件，转换成适用annovar的文件格式。得到的BB3.avinput就是我们需要注释的文件</p><p>perl convert2annovar.pl -format vcf4 BB3.HC.vcf &gt; BB3.avinput</p><pre class="line-numbers language-C" data-language="C"><code class="language-C"># 将您的TSV转换为Annovar的avinput格式awk 'NR&gt;1 {print $1"\t"$2"\t"$2"\t"$3"\t"$4}' /home/wanglab/Ywh/adductor_muscle_scar/Variants/filtered_variants_thr0p7_20250902_162128.tsv &gt; filtered_variants_thr0p7_20250902_162128.avinput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ANNOVAR主要使用convert2annovar.pl程序进行转换，转换后文件是精简过的，主要包含前面提到的5列内容，如果要将原格式的文件的所有内容都包含在转换后的.avinput文件中，可以使用-includeinfo参数；如果需要分开每个sample输出单一的.avinput文件，可以使用-allsample参数，等等。</p><p>ANNOVAR还主要支持以下格式转换：</p><p>SAMtools pileup format<br>Complete Genomics format<br>GFF3-SOLiD calling format<br>SOAPsnp calling format<br>MAQ calling format<br>CASAVA calling format</p><h2 id="第四步：annotate-variation注释"><a href="#第四步：annotate-variation注释" class="headerlink" title="第四步：annotate_variation注释"></a>第四步：annotate_variation注释</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C"># 一步完成注释和表格输出perl table_annovar.pl filtered_variants_thr0p7_20250902_162128.avinput Cgigasdb/ \   -buildver Cg \   -out filtered_variants_thr0p7_20250902_162128 \   -remove \   -protocol refGene \   -operation g \   -nastring . \   -csvout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-geneanno -dbtype refGene是默认值，可以省略，那么命令也可以写成</p><p>得到结果文件：</p><p>BB3.exonic_variant_function     # 外显子区域突变的功能、类型等<br>BB3.variant_function            # 突变的基因及位置<br>BB3.log                         # 日志文件<br>第五步：table_annovar.pl注释</p><p>table_annovar.pl是ANNOVAR多个脚本的封装，可以一次性完成三种类型的注释。</p><p>我这里只有regGene类型的注释库，那么注释命令为</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">perl table_annovar.pl    BB3.avinput pepperdb/    -buildver zunla               # 使用zunla注释库  -out BB3   -remove                       # 清除所有临时文件  -protocol refGene             # 注释库类型为refgene  -operation g                  # 操作子为g  -nastring .                   # 缺省值用“.”代替  -csvout                       # 输出csv文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>table_annovar.pl也可以不经过转换，直接对vcf文件进行注释，添加-vcfinput参数就行，注释的内容将会放在vcf文件的“INFO”那一栏。但是需要注意的是不能和-csvout参数同时使用，命令如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">perl table_annovar.pl   BB3.HC.vcf   pepperdb/    -buildver zunla   -out BB3   -protocol refGene   -operation g   -nastring .    -vcfinput   -polish<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以，两种输入格式</p><p>VCF文件：用 -vcfinput指定<br>avinput<br>每行代表一个位点<br>前5列依次为：chromosome, start position, end position, the reference nucleotides, the observed nucleotides<br>reference nucleotides：不知道时可设置为0<br>observed nucleotides: insertion,deletion,block subsititution可用-表示<br>其余列：可有可无，如果有，在输出文件中会原样输出。<br>more BB3.avinput</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1       948921  948921  T       C       comments: rs15842, a SNP in 5' UTR of ISG151       13211293        13211294        TC      -       comments: rs59770105, a 2-bp deletion1       11403596        11403596        -       AT      comments: rs35561142, a 2-bp insertion1       105492231       105492231       A       ATAAA   comments: rs10552169, a block substitution1       67705958        67705958        G       A       comments: rs11209026 (R381Q), a SNP in IL23R associated <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cat example/ex1.avinput</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1   948921  948921  T   C   comments: rs15842, a SNP in 5' UTR of ISG151   1404001 1404001 G   T   comments: rs149123833, a SNP in 3' UTR of ATAD3C1   5935162 5935162 A   T   comments: rs1287637, a splice site variant in NPHP41   162736463   162736463   C   T   comments: rs1000050, a SNP in Illumina SNP arrays1   84875173    84875173    C   T   comments: rs6576700 or SNP_A-1780419, a SNP in Affymetrix SNP arrays1   13211293    13211294    TC  -   comments: rs59770105, a 2-bp deletion1   11403596    11403596    -   AT  comments: rs35561142, a 2-bp insertion1   105492231   105492231   A   ATAAA   comments: rs10552169, a block substitution1   67705958    67705958    G   A   comments: rs11209026 (R381Q), a SNP in IL23R associated with Crohn's disease2   234183368   234183368   A   G   comments: rs2241880 (T300A), a SNP in the ATG16L1 associated with Crohn's disease<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该格式每列以tab分割，最重要的地方为前5列，分别是:</p><p>染色体(Chromosome)<br>起始位置(Start)<br>结束位置(End)<br>参考等位基因(Reference Allele)<br>替代等位基因(Alternative Allele)<br>剩下为注释部分（可选）。<br>ANNOVAR主要也是依靠这5处信息对数据库进行比对，进而注释变异。</p><p>报错：</p><p>chmod 777 table_annovar.pl<br>问题依旧！</p><p>没办法，只能跑去table_annovar.pl脚本的444行看一下具体代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1.  #generate gene anno2.  my $sc;3.  $sc = $SC_PREFIX .  "annotate_variation.pl -geneanno -buildver $buildver -dbtype $protocol -outfile $tempfile.$protocol -exonsort -nofirstcodondel $queryfile $dbloc";  #20191010: add -nofirstcodondel4.  $argument and $sc .=  " $argument";5.  $intronhgvs and $sc .=  " -splicing_threshold $intronhgvs";7.  if  ($thread)  {8.  $sc .=  " -thread $thread";9.  }10.  if  ($maxgenethread)  {11.  $sc .=  " -maxgenethread $maxgenethread";12.  }14.  print STDERR "\nNOTICE: Running with system command \n";15.  system ($sc)  and  die  "Error running system command: \n";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>444行的内容为system ($sc) and die “Error running system command: \n”;<br>看得出来，这里执行了system系统命令，往上查找变量$sc的值，发现这里调用了annotate_variation.pl脚本，同样</p><p>chmod 777 annotate_variation.pl<br>为了避免别的脚本权限问题，干脆全部777</p><p>chmod 777 *<br>成功解决权限问题。</p><p>注释完的结果合并到原文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 步骤1: 为原始文件添加行号awk 'NR==1 {print "LineNumber\t"$0} NR&gt;1 {print NR-1"\t"$0}' /home/wanglab/Ywh/adductor_muscle_scar/Variants/filtered_variants_thr0p7_20250902_162128.tsv &gt; original_with_linenum.tsv# 步骤2: 为注释文件添加行号awk 'NR==1 {print "LineNumber\t"$0} NR&gt;1 {print NR-1"\t"$0}' filtered_variants_thr0p7_20250902_162128.Cg_multianno.csv &gt; anno_with_linenum.tsv# 步骤3: 基于行号合并join -t $'\t' -1 1 -2 1 original_with_linenum.tsv anno_with_linenum.tsv &gt; merged_result.tsv# 步骤4: 清理临时文件rm original_with_linenum.tsv anno_with_linenum.tsv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2 以构建拟南芥（Arabidopsis thaliana）的注释所需文件为例<br>第一步：准备<br>下载Arabidopsis 的 GTF file 和 genome FASTA file，到 ‘atdb’目录下。解压文件。 地址</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">mkdir atdb                                                                                                                                                cd atdb         wget ftp://ftp.ensemblgenomes.org/pub/release-27/plants/fasta/arabidopsis_thaliana/dna/Arabidopsis_thaliana.TAIR10.27.dna.genome.fa.gz                    wget ftp://ftp.ensemblgenomes.org/pub/release-27/plants/gtf/arabidopsis_thaliana/Arabidopsis_thaliana.TAIR10.27.gtf.gz                                                                                                                                                                                                                   gunzip Arabidopsis_thaliana.TAIR10.27.dna.genome.fa.gz             gunzip Arabidopsis_thaliana.TAIR10.27.gtf.gz  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**第二步：<br>用 gtfToGenePred 工具将 GTF file 转换 GenePred file</p><p>gtfToGenePred -genePredExt Arabidopsis_thaliana.TAIR10.27.gtf AT_refGene.txt<br>用retrieve_seq_from_fasta.pl生成 transcript FASTA file</p><p>perl ../retrieve_seq_from_fasta.pl –format refGene –seqfile Arabidopsis_thaliana.TAIR10.27.dna.genome.fa AT_refGene.txt AT_refGeneMrna.fa<br>After this step, the annotation database files needed for gene-based annotation are ready. Now you can annotate a given VCF file using the procedure starting from B(iii). Please note that the ‘–buildver’ argument should be set to ‘AT’.<br>参考<a href="http://annovar.openbioinformatics.org/en/latest/user-guide/gene/">http://annovar.openbioinformatics.org/en/latest/user-guide/gene/</a> for more details.bases and other arguments are the same as in the human genome annotation.</p><p>总脚本如下</p><p>下载物种基因序列、注释文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">wget -c ftp://ftp.ensemblgenomes.org/pub/release-27/plants/fasta/arabidopsis_thaliana/dna/Arabidopsis_thaliana.TAIR10.27.dna.genome.fa.gzwget -c ftp://ftp.ensemblgenomes.org/pub/release-27/plants/gtf/arabidopsis_thaliana/Arabidopsis_thaliana.TAIR10.27.gtf.gzgzip -d Arabidopsis_thaliana.TAIR10.27.dna.genome.fa.gzgzip -d Arabidopsis_thaliana.TAIR10.27.gtf.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>#gtf文件格式转换</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">wget -c http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/gtfToGenePredgtfToGenePred -genePredExt Arabidopsis_thaliana.TAIR10.27.gtf AT_refGene.txt # 另一种格式转换方法，https://github.com/chengcz/pyGTF# 使用软件包提供脚本build物种数据库，数据库buildver为AT，名称为refGeneperl retrieve_seq_from_fasta.pl --format refGene --seqfile Arabidopsis_thaliana.TAIR10.27.dna.genome.fa AT_refGene.txt --out AT_refGeneMrna.fa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、批量注释"><a href="#五、批量注释" class="headerlink" title="五、批量注释"></a>五、批量注释</h2><p>/home/jmzeng/bio-soft/annovar/convert2annovar.pl -format vcf4  Sample3.varscan.snp.vcf &gt; Sample3.annovar<br>/home/jmzeng/bio-soft/annovar/convert2annovar.pl -format vcf4  Sample4.varscan.snp.vcf &gt; Sample4.annovar<br>/home/jmzeng/bio-soft/annovar/convert2annovar.pl -format vcf4  Sample5.varscan.snp.vcf &gt; Sample5.annovar<br>然后用下面这个脚本批量注释</p><p>image001<br>Reading gene annotation from /home/jmzeng/bio-soft/annovar/humandb/hg19_refGene.txt … Done with 50914 transcripts (including 11516 without coding sequence annotation) for 26271 unique genes</p><p>最后查看结果可知，真正在外显子上面的突变并不多</p><p>23515 Sample3.anno.exonic_variant_function<br>23913 Sample4.anno.exonic_variant_function<br>24009 Sample5.anno.exonic_variant_function<br>annovar软件就是把我们得到的十万多个snp分类了，看看这些snp分别是基因的哪些位置，是否引起蛋白突变</p><p>downstream<br>exonic<br>exonic;splicing<br>intergenic<br>intronic<br>ncRNA_exonic<br>ncRNA_intronic<br>ncRNA_splicing<br>ncRNA_UTR3<br>ncRNA_UTR5<br>splicing<br>upstream<br>upstream;downstream<br>UTR3<br>UTR5<br>UTR5;UTR3<br>六、一步到位：table_annovar.pl 可以同时进行3种注释<br>perl table_annovar.pl example/ex1.avinput humandb/ -buildver hg19 -out myanno -remove -protocol refGene,cytoBand,exac03,avsnp147,dbnsfp30a -operation gx,r,f,f,f -nastring . -csvout -polish -xref example/gene_xref.txt<br>#-remove: remove all temporary files<br>#-operation:g,gene-based; gx,gene-based with cross-reference annotation (from -xref argument);r, region-based; f,filter-based.<br>#-nastring：没有对应注释，则输出<code>.</code><br>#-csvout:结果用,分隔；去掉则采用默认，用Tab分隔<br>#-xref: whether a known genetic disease is caused by defects in this gene (this information was suffplied in the  example/gene_xref.txt file in the command line) 这一项没有也OK</p><p>其中（每种数据库对应的类型参考官网）<br>g,gene-based,对应数据库为refGene,ensGene等<br>r,region-based,对应数据库为cytoBand等<br>f,filter-based,对应数据库为exac03,avsnp147,dbnsfp30a等</p><p>3种注释分开进行：annotate_variation.pl<br>1 gene-based<br>perl annotate_variation.pl -geneanno -dbtype refGene -buildver hg19 example/ex1.avinput humandb/  </p><p>结果文件在example/中，ex1.avinput.variant_function和ex1.avinput.exonic_variant_function<br>（1）ex1.avinput.variant_function</p><p>[root@localhost example]# head ex1.avinput.variant_function<br>UTR5    ISG15(NM_005101:c.-33T&gt;C)       1       948921  948921  T       C       comments: rs15842, a SNP in 5’ UTR of ISG15<br>UTR3    ATAD3C(NM_001039211:c.*91G&gt;T)   1       1404001 1404001 G       T       comments: rs149123833, a SNP in 3’ UTR of ATAD3C</p><p>第1列：variant effects,将变异分类，如intergenic, intronic, non-synonymous SNP, frameshift deletion, large-scale duplication等<br>第2列：基因名，Symbol，括号中为NM_22222,为refGene编号<br>其余列：输入文件ex1.avinput的内容</p><p>（2）ex1.avinput.exonic_variant_function</p><p>[root@localhost example]# head  ex1.avinput.exonic_variant_function<br>line9   nonsynonymous SNV       IL23R:NM_144701:exon9:c.G1142A:p.R381Q, 1       67705958        67705958       GA       comments: rs11209026 (R381Q), a SNP in IL23R associated with Crohn’s disease<br>line10  nonsynonymous SNV       ATG16L1:NM_017974:exon8:c.A841G:p.T281A,ATG16L1:NM_001190267:exon9:c.A550G:p.T184A,ATG16L1:NM_030803:exon9:c.A898G:p.T300A,ATG16L1:NM_001190266:exon9:c.A646G:p.T216A,ATG16L1:NM_198890:exon5:c.A409G:p.T137A,  2       234183368       234183368       A       G       comments: rs2241880 (T300A), a SNP in the ATG16L1 associated with Crohn’s disease<br>line11  nonsynonymous SNV       NOD2:NM_022162:exon4:c.C2104T:p.R702W,NOD2:NM_001293557:exon3:c.C2023T:p.R675W,16       50745926        50745926        C       T       comments: rs2066844 (R702W), a non-synonymous SNP in NOD2</p><p>第1列：该变异在input文件的行号<br>第2列：对编码基因的影响，frameshift,nonsynonymous等<br>第3列：被影响的基因或转录本,其中NM_22222,为refGene编号<br>其余列：同输入文件</p><p>用awk操作时，分隔符设定为\t；不设置时，空格也被当做分隔符，会造成错位</p><p>[root@localhost example]# head  ex1.avinput.exonic_variant_function|awk -F ‘\t’ ‘{print $2}’<br>nonsynonymous SNV<br>nonsynonymous SNV<br>nonsynonymous SNV<br>nonsynonymous SNV<br>frameshift insertion<br>frameshift deletion<br>frameshift deletion<br>stoploss<br>stopgain<br>frameshift substitution</p><p>[root@localhost example]# head  ex1.avinput.exonic_variant_function|awk ‘{print $2}’<br>nonsynonymous<br>nonsynonymous<br>nonsynonymous<br>nonsynonymous<br>frameshift<br>frameshift<br>frameshift<br>stoploss<br>stopgain<br>frameshift</p><p>2 region-based<br>perl annotate_variation.pl -regionanno -dbtype cytoBand -buildver hg19 example/ex1.avinput humandb/ </p><p>鉴定各变异的cytogenetic band,如1p36.33<br>结果文件在example中，ex1.avinput.hg19_cytoBand</p><p>[root@localhost example]# more ex1.avinput.hg19_cytoBand<br>cytoBand        1p36.33 1       948921  948921  T       C       comments: rs15842, a SNP in 5’ UTR of ISG15<br>cytoBand        1p36.33 1       1404001 1404001 G       T       comments: rs149123833, a SNP in 3’ UTR of ATAD3C<br>cytoBand        1p36.31 1       5935162 5935162 A       T       comments: rs1287637, a splice site variant in NP<br>HP4<br>cytoBand        1q23.3  1       162736463       162736463       C       T       comments: rs1000050, a SNP in Il<br>lumina SNP arrays<br>第1列：cytoBand<br>第2列：1p21.1<br>其余列：同输入文件</p><p>3 ilter<br>perl annotate_variation.pl -filter -dbtype exac03 -buildver hg19 example/ex1.avinput humandb/<br>结果文件在example/中,ex1.avinput.hg19_exac03_filtered(exac03中没有报道的位点）和ex1.avinput.hg19_exac03_dropped（exac03中报道的位点，包含其等位基因频率）</p><hr><p>比较两个文件的重复值，保留后者重复项</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">awk 'BEGIN {OFS="\t"}      NR==FNR {if(FNR&gt;1) start_values[$3] = 1; next}      FNR==1 {print; next}      $2 in start_values' annovar/merged_result.tsv filtered_variants_thr0p7_20250916_203336.tsv &gt; filtered_filtered_variants_thr0p7_20250916_203336.tsv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a href="https://www.jianshu.com/p/84c818207240">https://www.jianshu.com/p/84c818207240</a><br><a href="https://www.plob.org/article/9976.html">https://www.plob.org/article/9976.html</a></p><p>snpEff<br><a href="https://www.bioinfo-scrounger.com/archives/268/">https://www.bioinfo-scrounger.com/archives/268/</a></p><p>重要<br><a href="http://www.bio-info-trainee.com/2028.html">http://www.bio-info-trainee.com/2028.html</a><br><a href="https://www.jianshu.com/p/cea3b179b8a9">https://www.jianshu.com/p/cea3b179b8a9</a></p><p>ANNOVAR注释变异VCF结果说明<br><a href="https://www.omicsclass.com/article/464">https://www.omicsclass.com/article/464</a><br><a href="https://www.omicsclass.com/article/804">https://www.omicsclass.com/article/804</a><br><a href="http://blog.sina.com.cn/s/blog_71df25810102ybtt.html">http://blog.sina.com.cn/s/blog_71df25810102ybtt.html</a></p><p>Hui Y, Kai W. Genomic variant annotation and prioritization with ANNOVAR and wANNOVAR[J]. Nature Protocols, 2015, 10(10).</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;会得到一系列变异数据，这些变异数据只是告诉我们在基因组的某个位置发生了一段序列的改变，至于这个改变会不会影响生物学功能，我们</summary>
      
    
    
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Typecho快速修改文章图片和文件链接地址</title>
    <link href="https://0hhhhhh0.github.io/2025/09/03/50/"/>
    <id>https://0hhhhhh0.github.io/2025/09/03/50/</id>
    <published>2025-09-03T07:20:00.000Z</published>
    <updated>2025-09-03T07:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>说明<br>为了使我们的博客速度更快，图片等一些文件会采用外接的形式。但当跟换域名或CDN图片地址时，需要大批修正一切文章的援用图片链接和一些文件链接地址，手动修正又烦劳，这里就说一下通过 phpMyAdmin工具快速修正数据库文章图片，文件链接地址。</p><hr><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>如果您使用的是基于 Debian 或 Ubuntu 的 Linux 系统，可以尝试使用 apt-get 命令。例如：</p><blockquote><p>sudo apt-get update<br>sudo apt-get install phpmyadmin</p></blockquote><hr><p>The phpmyadmin package must have a database installed and configured before it c<br>with dbconfig-common.</p><p>If you are an advanced database administrator and know that you want to perform<br>database has already been installed and configured, you should refuse this optio<br>most likely be provided in /usr/share/doc/phpmyadmin.</p><p>Otherwise, you should probably choose this option.</p><p>Configure database for phpmyadmin with dbconfig-common? [yes/no] yes</p><p>Please provide a password for phpmyadmin to register with the database server. I<br>generated.</p><p>MySQL application password for phpmyadmin:</p><p>Password confirmation:</p><p>Determining localhost credentials from /etc/mysql/debian.cnf: succeeded.<br>请选择要自动配置以运行 phpMyAdmin 的网络服务器。</p><ol><li>apache2  2. lighttpd</li></ol><p>(Enter the items or ranges you want to select, separated by spaces.)</p><p>要自动重新配置的网络服务器： 2</p><p>dbconfig-common: writing config to /etc/dbconfig-common/phpmyadmin.conf</p><p>Creating config file /etc/dbconfig-common/phpmyadmin.conf with new version</p><p>Creating config file /etc/phpmyadmin/config-db.php with new version<br>checking privileges on database phpmyadmin for phpmyadmin@localhost: user creati<br>granting access to database phpmyadmin for phpmyadmin@localhost: success.<br>verifying access for phpmyadmin@localhost: success.<br>creating database phpmyadmin: success.<br>verifying database phpmyadmin exists: success.<br>populating database via sql…  done.<br>dbconfig-common: flushing administrative password<br>Lighttpd not installed, skipping<br>正在处理用于 libc-bin (2.31-13+deb11u2) 的触发器 …<br>ldconfig: /lib/libusbgx.so.2 is not a symbolic link</p><p>正在处理用于 php7.4-fpm (7.4.33-1+deb11u9) 的触发器 …<br>正在处理用于 php7.4-cli (7.4.33-1+deb11u9) 的触发器 …</p><hr><p>选择了 lighttpd (选项2) 作为Web服务器，但你的系统实际上运行的是 Nginx</p><p>下面是后续的解决步骤：</p><h3 id="第一步：手动配置-Nginx-以支持-phpMyAdmin"><a href="#第一步：手动配置-Nginx-以支持-phpMyAdmin" class="headerlink" title="第一步：手动配置 Nginx 以支持 phpMyAdmin"></a>第一步：手动配置 Nginx 以支持 phpMyAdmin</h3><p>由于自动配置失败了，我们需要手动为 Nginx 创建配置文件。</p><ol><li><p><strong>创建 phpMyAdmin 的符号链接</strong>（如果尚未存在）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/share/phpmyadmin /var/www/html/phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>编辑 Nginx 站点配置文件</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">nano</span> /etc/nginx/sites-enabled/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>在 <code>server</code> 块中添加以下 location 配置</strong>（放在PHP location块之前或之后）：</p><pre class="line-numbers language-Nginx" data-language="Nginx"><code class="language-Nginx"># phpMyAdmin 配置location /phpmyadmin {    root /usr/share/;    index index.php index.html index.htm;        location ~ ^/phpmyadmin/(.+.php)$ {        try_files $uri =404;        root /usr/share/;        fastcgi_pass unix:/run/php/php7.4-fpm.sock;        fastcgi_index index.php;        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        include /etc/nginx/fastcgi_params;    }        location ~* ^/phpmyadmin/(.+.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {        root /usr/share/;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="第二步：测试并重启-Nginx"><a href="#第二步：测试并重启-Nginx" class="headerlink" title="第二步：测试并重启 Nginx"></a>第二步：测试并重启 Nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 测试配置语法</span><span class="token function">sudo</span> nginx <span class="token parameter variable">-t</span><span class="token comment"># 如果语法正确，重启Nginx</span><span class="token function">sudo</span> systemctl restart nginx<span class="token comment"># 或者使用重载</span><span class="token function">sudo</span> nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三步：访问-phpMyAdmin"><a href="#第三步：访问-phpMyAdmin" class="headerlink" title="第三步：访问 phpMyAdmin"></a>第三步：访问 phpMyAdmin</h3><p>现在你应该可以通过浏览器访问 phpMyAdmin：</p><pre class="line-numbers language-none"><code class="language-none">http://你的服务器IP或域名/phpmyadmin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第四步：登录-phpMyAdmin"><a href="#第四步：登录-phpMyAdmin" class="headerlink" title="第四步：登录 phpMyAdmin"></a>第四步：登录 phpMyAdmin</h3><p>使用以下凭据登录：</p><ul><li><strong>用户名</strong>：phpmyadmin（或者你之前设置的MySQL用户名）</li><li><strong>密码</strong>：你刚才安装时设置的密码</li></ul><h3 id="如果遇到权限问题"><a href="#如果遇到权限问题" class="headerlink" title="如果遇到权限问题"></a>如果遇到权限问题</h3><p>如果无法访问，可能需要调整权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 调整phpMyAdmin目录权限</span><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> www-data:www-data /usr/share/phpmyadmin/<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">755</span> /usr/share/phpmyadmin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="验证MySQL连接"><a href="#验证MySQL连接" class="headerlink" title="验证MySQL连接"></a>验证MySQL连接</h3><p>如果仍然无法连接，检查MySQL用户权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 登录MySQL</span><span class="token function">sudo</span> mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span class="token comment"># 检查phpmyadmin用户权限</span>SELECT user, <span class="token function">host</span> FROM mysql.user<span class="token punctuation">;</span>SHOW GRANTS FOR <span class="token string">'phpmyadmin'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安全建议"><a href="#安全建议" class="headerlink" title="安全建议"></a>安全建议</h3><ol><li><strong>限制访问</strong>：考虑通过IP限制或HTTP认证来保护phpMyAdmin</li><li><strong>使用HTTPS</strong>：确保通过SSL访问phpMyAdmin</li><li><strong>修改URL路径</strong>：将 <code>/phpmyadmin</code> 改为不易猜测的路径</li></ol><p>这样配置后，phpMyAdmin 就应该可以正常工作了。完成后你可以通过浏览器访问并管理你的Typecho数据库，然后运行之前提到的SQL命令来批量更新图片链接。</p><p>{lamp/}</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>操作前请各位先备份一下数据库</p><p>(1)执行sql</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">UPDATE `typecho_contents` SET `text` = REPLACE(`text`,'旧域名地址','新域名地址');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <code>typecho_contents</code>  是typecho存放文章的一个表<br>(2)方法2<br><img src="/images/50/3725854188.png" alt="mf3n8p7s.png"></p><p>选中 <code>typecho_contents</code> ，然后点上面的搜索，选择查找和替换，输入之前的图片或者文件地址和之后的地址，字段选择 <code>text</code> ，确认后执行即可批量修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;说明&lt;br&gt;为了使我们的博客速度更快，图片等一些文件会采用外接的形式。但当跟换域名或CDN图片地址时，需要大批修正一切文章的援用图片链接和一些文件链接地址，手动修正又烦劳，这里就说一下通过 phpMyAdmin工具快速修正数据库文章图片，文件链接地址。&lt;/p&gt;
&lt;hr&gt;
&lt;</summary>
      
    
    
    
    <category term="WIFI" scheme="https://0hhhhhh0.github.io/categories/WIFI/"/>
    
    
  </entry>
  
  <entry>
    <title>6.筛选组内一致率90%，组间有差异的SNP位点</title>
    <link href="https://0hhhhhh0.github.io/2025/09/03/48/"/>
    <id>https://0hhhhhh0.github.io/2025/09/03/48/</id>
    <published>2025-09-03T03:32:00.000Z</published>
    <updated>2025-09-03T07:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>分析需求：</strong><br>请分析查找组间差异SNP &amp; Indel。需要找组内一致，组间具有差异的突变位点，样本一致率卡90%，即在大于90%的样本中突变型一致就认为是组内一致的突变。</p><hr><h2 id="1-筛选的命令如下"><a href="#1-筛选的命令如下" class="headerlink" title="1.筛选的命令如下"></a>1.筛选的命令如下</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">#!/bin/bash# filename: filter_variants_integrated.sh# Usage: ./filter_variants_integrated.sh [threshold] [input_file] [output_file] [include_het] [diff_mode]show_help() {    cat  "$OUTPUT_FILE"# ------------------ 主体处理 ------------------START_TIME=$(date +%s)log "INFO" "开始处理位点..."awk -v threshold="$THRESHOLD" \    -v bm_start="$BM_START" \    -v bm_end="$BM_END" \    -v wm_start="$WM_START" \    -v wm_end="$WM_END" \    -v total_variants="$TOTAL_VARIANTS" \    -v log_file="$LOG_FILE" \    -v include_het="$INCLUDE_HET" \    -v diff_mode="$DIFF_MODE" 'BEGIN {    OFS="\t"    processed = 0    passed = 0    start_time = systime()    print strftime("[%Y-%m-%d %H:%M:%S]") " [INFO] AWK processor started" &gt;&gt; log_file}NR==1 {next}  # 跳过表头{    processed++    bm_ref=0; bm_alt=0; bm_het=0; bm_total=0    wm_ref=0; wm_alt=0; wm_het=0; wm_total=0    # BM    for (i=bm_start; i 0) ? bm_alt / bm_total : 0    bm_het_ratio = (bm_total &gt; 0) ? bm_het / bm_total : 0        wm_ref_ratio = (wm_total &gt; 0) ? wm_ref / wm_total : 0    wm_alt_ratio = (wm_total &gt; 0) ? wm_alt / wm_total : 0    wm_het_ratio = (wm_total &gt; 0) ? wm_het / wm_total : 0    bm_gt = "MIXED"    wm_gt = "MIXED"    if (bm_total &gt;= 20) {        if (bm_ref_ratio &gt;= threshold) bm_gt="REF"        else if (bm_alt_ratio &gt;= threshold) bm_gt="ALT"        else if (!include_het &amp;&amp; (bm_het/bm_total &gt;= threshold)) bm_gt="HET"    }    if (wm_total &gt;= 20) {        if (wm_ref_ratio &gt;= threshold) wm_gt="REF"        else if (wm_alt_ratio &gt;= threshold) wm_gt="ALT"        else if (!include_het &amp;&amp; (wm_het/wm_total &gt;= threshold)) wm_gt="HET"    }    diff = 0    if (bm_gt != "MIXED" &amp;&amp; wm_gt != "MIXED") {        if (diff_mode=="simple") {            if (bm_gt=="REF" &amp;&amp; wm_gt=="ALT") diff=1            else if (bm_gt=="ALT" &amp;&amp; wm_gt=="REF") diff=1        } else if (diff_mode=="strict") {            if (bm_gt != wm_gt) diff=1        }    }    if (diff==1) {        print $0, bm_ref, bm_alt, bm_het, bm_total, bm_ref_ratio, bm_alt_ratio, bm_het_ratio, bm_gt, wm_ref, wm_alt, wm_het, wm_total, wm_ref_ratio, wm_alt_ratio, wm_het_ratio, wm_gt        passed++    }}END {    end_time = systime()    duration = end_time - start_time    minutes = int(duration / 60)    seconds = duration % 60    print strftime("[%Y-%m-%d %H:%M:%S]") " [INFO] Processed: " processed ", Passed: " passed &gt;&gt; log_file    print strftime("[%Y-%m-%d %H:%M:%S]") " [INFO] Pass rate: " (passed/processed)*100 "%" &gt;&gt; log_file}' "$INPUT_FILE" &gt;&gt; "$OUTPUT_FILE"# ------------------ 结果汇总 ------------------RESULT_COUNT=$(($(wc -l &lt; "$OUTPUT_FILE") - 1))log "INFO" "分析完成！ 筛选通过: $RESULT_COUNT"echo "结果输出到: $OUTPUT_FILE"echo "日志文件: $LOG_FILE"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-可视化代码"><a href="#2-可视化代码" class="headerlink" title="2. 可视化代码"></a>2. 可视化代码</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">library(tidyverse)library(vcfR)library(data.table)library(ggplot2)library(dplyr)library(tidyr)# 先读取数据（不自动解析列名）snp_data %  layout(    title = list(text = "SNP Genotype Heatmap", y = 0.98),    xaxis = list(      title = "Genomic Position",      rangeslider = list(visible = TRUE),      type = "category",      tickangle = 45    ),    yaxis = list(      title = list(text = "Sample", standoff = 30),      tickfont = list(size = 10),      automargin = TRUE,      tickmode = "array",      tickvals = rownames(heatmap_matrix),  # 直接使用样本名      ticktext = rownames(heatmap_matrix)    ),    margin = list(l = left_margin, r = 50, b = 100, t = 100)  )# 7. 输出结果 ------------------------------------------------fig  # 在RStudio中查看# 可选：保存为HTML# htmlwidgets::saveWidget(fig, "snp_heatmap.html", selfcontained = TRUE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;分析需求：&lt;/strong&gt;&lt;br&gt;请分析查找组间差异SNP &amp;amp; Indel。需要找组内一致，组间具有差异的突变位点，样本一致率卡90%，即在大于90%的样本中突变型一致就认为是组内一致的突变。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-筛选的命令如下&quot;</summary>
      
    
    
    
    <category term="默认分类" scheme="https://0hhhhhh0.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>5.各样本SNP位点信息可视化</title>
    <link href="https://0hhhhhh0.github.io/2025/08/03/40/"/>
    <id>https://0hhhhhh0.github.io/2025/08/03/40/</id>
    <published>2025-08-03T17:17:00.000Z</published>
    <updated>2025-08-03T17:19:04.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面我们对各样本的SNP位点信息进行了提取，现在我们要进行SNP位点的筛选，相对快捷的办法就是可视化，下面我们进行分析</p></blockquote><p>需要用到的R包</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">library(tidyverse)library(vcfR)library(data.table)library(ggplot2)library(dplyr)library(tidyr)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面以单个基因为例进行分析</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 先读取数据（不自动解析列名）</span>snp_data %  as.matrix()<span class="token title important"><span class="token punctuation">#</span> 5. 可视化设置 ------------------------------------------------</span><span class="token title important"><span class="token punctuation">#</span> 颜色映射</span>gt_colors %  layout(    title = list(text = "SNP Genotype Heatmap", y = 0.98),    xaxis = list(      title = "Genomic Position",      rangeslider = list(visible = TRUE),  # 横向滚动条      type = "category",  # 防止数值排序      tickangle = 45    ),    yaxis = list(      title = list(text = "Sample", standoff = 30),      tickfont = list(size = 10),      automargin = TRUE,  # 自动调整边距      tickmode = "array",      tickvals = seq_len(nrow(heatmap_matrix)),      ticktext = rownames(heatmap_matrix)    ),    margin = list(      l = left_margin,  # 动态左边距      r = 50,      b = 100,      t = 100    )  )<span class="token title important"><span class="token punctuation">#</span> 7. 输出结果 --------------------------------------------------</span><span class="token title important"><span class="token punctuation">#</span> 在RStudio中直接查看</span>print(fig)<span class="token title important"><span class="token punctuation">#</span> 保存为HTML文件</span>htmlwidgets::saveWidget(  widget = fig,  file = "snp_heatmap_complete.html",  title = "Interactive SNP Heatmap",  selfcontained = TRUE,  libdir = "lib")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下<br><img src="/images/40/2532418108.png" alt="mdvqrk99.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前面我们对各样本的SNP位点信息进行了提取，现在我们要进行SNP位点的筛选，相对快捷的办法就是可视化，下面我们进行分析&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要用到的R包&lt;/p&gt;
&lt;pre class=&quot;line-numbers langua</summary>
      
    
    
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>4.提取重测序数据中黑白肌痕组中各SNP的位点信息及基因型频率</title>
    <link href="https://0hhhhhh0.github.io/2025/08/03/32/"/>
    <id>https://0hhhhhh0.github.io/2025/08/03/32/</id>
    <published>2025-08-03T13:53:00.000Z</published>
    <updated>2025-08-03T17:19:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>相关的sh文件内容如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>!/bin/bash</span><span class="token title important"><span class="token punctuation">#</span> 用法：./extract_chromosome_snps_no_split.sh   </span>set -euo pipefail<span class="token title important"><span class="token punctuation">#</span> 彩色日志函数，蓝色时间，绿色成功，红色错误，黄色警告</span>log() {  local msg="$1"  local color="${2:-34}"  # 默认蓝色  echo -e "\033[1;${color}m[$(date '+%Y-%m-%d %H:%M:%S')]\033[0m $msg"}<span class="token title important"><span class="token punctuation">#</span> 参数检查</span>if [ $# -lt 3 ]; then  echo "Usage: $0   "  echo "Example: ./extract_chromosome_snps_no_split.sh NC_047567.1 input.vcf.gz results"  exit 1fiCHROM=$1VCF=$2PREFIX=$3GFF="../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff"<span class="token title important"><span class="token punctuation">#</span> 检查工具</span>command -v bcftools &gt;/dev/null || { log "ERROR: bcftools not found" 31; exit 1; }command -v bedtools &gt;/dev/null || { log "ERROR: bedtools not found" 31; exit 1; }command -v awk &gt;/dev/null || { log "ERROR: awk not found" 31; exit 1; }<span class="token title important"><span class="token punctuation">##########################</span></span><span class="token title important"><span class="token punctuation">#</span> STEP 1: 提取基因坐标</span><span class="token title important"><span class="token punctuation">##########################</span></span>log "STEP 1/5: Extracting gene coordinates for $CHROM..."GENE_BED="${PREFIX}_genes.bed"if [ -s "$GENE_BED" ]; then  lines=$(wc -l &lt; "$GENE_BED")  log "Found existing gene BED file ($GENE_BED, $lines lines), skipping extraction..." 33else  matched_gene_lines=$(grep -w "$CHROM" "$GFF" | awk -F'\t' '$3=="gene"')  if [ -z "$matched_gene_lines" ]; then    log "CRITICAL ERROR: No 'gene' lines found for chromosome '$CHROM'" 31    log "Possible reasons:" 31    log "1. Chromosome name不匹配 (如缺少'chr'前缀)" 31    log "2. GFF中没有gene类型注释" 31    log "Debug信息:" 31    log "-&gt; Chromosome 检查: $(grep -m1 "$CHROM" "$GFF" || echo '未找到')" 31    log "-&gt; 染色体中所有 feature 类型:" 31    grep -w "$CHROM" "$GFF" | awk -F'\t' '{print $3}' | sort | uniq -c    exit 1  fi  grep -w "$CHROM" "$GFF" | \    awk -F'\t' '$3=="gene"' | \    awk -F'\t' '{      split($9, a, ";");      gene_id="";      for (i in a) {        if (a[i] <span class="token strike"><span class="token punctuation">~</span><span class="token content"> /^gene=/) {          gsub(/^gene=/, "", a[i]); gene_id=a[i];        } else if (a[i] </span><span class="token punctuation">~</span></span> /^ID=gene-/) {          gsub(/^ID=gene-/, "", a[i]); gene_id=a[i];        }      }      print $1, $4, $5, gene_id    }' OFS='\t' &gt; "$GENE_BED"  gene_count=$(wc -l &lt; "$GENE_BED")  if [ "$gene_count" -eq 0 ]; then    log "ERROR: Gene extraction failed! No gene records written." 31    exit 1  fi  log "Successfully extracted $gene_count genes to $GENE_BED" 32fi<span class="token title important"><span class="token punctuation">##########################</span></span><span class="token title important"><span class="token punctuation">#</span> STEP 2: 提取染色体SNP</span><span class="token title important"><span class="token punctuation">##########################</span></span>log "STEP 2/5: Extracting SNPs for $CHROM..."SNP_VCF="${PREFIX}_snps.vcf.gz"if [ -s "$SNP_VCF" ]; then  variants=$(bcftools view "$SNP_VCF" | grep -v '^#' | wc -l)  log "Found existing SNP file ($SNP_VCF) with $variants variants, skipping extraction..." 33else  bcftools view -r "$CHROM" "$VCF" -Oz -o "$SNP_VCF"  bcftools index "$SNP_VCF"  variants=$(bcftools view "$SNP_VCF" | grep -v '^#' | wc -l)  log "SNPs extracted to $SNP_VCF (Total variants: $variants)" 32fi<span class="token title important"><span class="token punctuation">##########################</span></span><span class="token title important"><span class="token punctuation">#</span> STEP 3: 转换VCF格式为TSV</span><span class="token title important"><span class="token punctuation">##########################</span></span>log "STEP 3/5: Converting VCF to table..."SNP_TSV="${PREFIX}_snps.tsv"if [ -s "$SNP_TSV" ]; then  lines=$(wc -l &lt; "$SNP_TSV")  log "Found existing SNP table ($SNP_TSV) with $lines lines, skipping conversion..." 33else  bcftools query -f '%CHROM\t%POS\t%REF\t%ALT\t%QUAL[\t%GT:%AD]\n' "$SNP_VCF" &gt; "${SNP_TSV}.tmp"  <span class="token title important"><span class="token punctuation">#</span> 添加表头（样本名）</span>  echo -e "chromosome\tposition\tref\talt\tqual\t"$(bcftools query -l "$SNP_VCF" | tr '\n' '\t' | sed 's/\t$//') &gt; header.tsv  cat header.tsv "${SNP_TSV}.tmp" &gt; "$SNP_TSV"  rm header.tsv "${SNP_TSV}.tmp"  lines=$(wc -l &lt; "$SNP_TSV")  log "VCF converted to $SNP_TSV (Total lines: $lines)" 32fi<span class="token title important"><span class="token punctuation">##########################</span></span><span class="token title important"><span class="token punctuation">#</span> STEP 4: SNP注释</span><span class="token title important"><span class="token punctuation">##########################</span></span>log "STEP 4/5: Annotating SNPs with genes (single pass)..."ANNOTATED="${PREFIX}_annotated.tsv"if [ -s "$ANNOTATED" ]; then  lines=$(wc -l &lt; "$ANNOTATED")  log "Found existing annotated SNPs file ($ANNOTATED) with $lines lines, skipping annotation..." 33else  SNPS_BED=$(mktemp)  INTERSECT_OUT=$(mktemp)  <span class="token title important"><span class="token punctuation">#</span> 转换TSV到BED格式（0-based）</span>  awk -F'\t' 'BEGIN{OFS="\t"} NR&gt;1 {print $1,$2-1,$2,$0}' "$SNP_TSV" &gt; "$SNPS_BED"  log "Running bedtools intersect..." 33  bedtools intersect -a "$SNPS_BED" -b "$GENE_BED" -wa -wb &gt; "$INTERSECT_OUT"  <span class="token title important"><span class="token punctuation">#</span> 提取最终结果，保留原始字段并加gene列</span>  awk -F'\t' 'BEGIN{OFS="\t"} {    nf = NF;    for(i=4; i 0) ? bm_counts["00"]/bm_total<span class="token italic"><span class="token punctuation">*</span><span class="token content">100 : 0;    bm_het_pct = (bm_total &gt; 0) ? bm_counts["01"]/bm_total</span><span class="token punctuation">*</span></span>100 : 0;    bm_alt_pct = (bm_total &gt; 0) ? bm_counts["11"]/bm_total<span class="token italic"><span class="token punctuation">*</span><span class="token content">100 : 0;    bm_other_pct = (bm_total &gt; 0) ? bm_counts["other"]/bm_total</span><span class="token punctuation">*</span></span>100 : 0;    <span class="token code keyword">    wm_ref_pct = (wm_total &gt; 0) ? wm_counts["00"]/wm_total*100 : 0;    wm_het_pct = (wm_total &gt; 0) ? wm_counts["01"]/wm_total*100 : 0;    wm_alt_pct = (wm_total &gt; 0) ? wm_counts["11"]/wm_total*100 : 0;    wm_other_pct = (wm_total &gt; 0) ? wm_counts["other"]/wm_total*100 : 0;</span>    <span class="token code keyword">    # 输出结果（现在总和应为100%）    print $1, $2, $3, $4, $5,          sprintf("%.3f", bm_ref_pct), sprintf("%.3f", bm_het_pct), sprintf("%.3f", bm_alt_pct), sprintf("%.3f", bm_other_pct), bm_total,          sprintf("%.3f", wm_ref_pct), sprintf("%.3f", wm_het_pct), sprintf("%.3f", wm_alt_pct), sprintf("%.3f", wm_other_pct), wm_total;</span>  }' "$SNP_TSV" &gt; "$FREQ_OUT"    lines=$(wc -l &lt; "$FREQ_OUT")  log "Genotype frequency table written to $FREQ_OUT ($((lines-1)) variant lines)" 32filog "SUCCESS! Final results:" 32log "- Gene coordinates: ${GENE_BED}" 32log "- SNP VCF: ${PREFIX}_snps.vcf.gz" 32log "- Annotated SNPs: ${PREFIX}_annotated.tsv ($(wc -l &lt; ${PREFIX}_annotated.tsv) lines)" 32log "- Genotype frequencies: ${PREFIX}_genotype_freq.tsv ($(wc -l &lt; ${PREFIX}_genotype_freq.tsv) lines)" 32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相关的指令如下</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">dos2unix xxxxxx.shrm -f NC_047567.1_results_*./extract_chromosome_snps.sh NC_047567.1 Filter.snp.vcf.gz NC_047567.1_results 8./extract_chromosome_snps_2.0.sh NC_047567.1 Filter.snp.vcf.gz NC_047567.1_results<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;相关的sh文件内容如下：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-markdown&quot; data-language=&quot;markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token </summary>
      
    
    
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>3.对基因进行注释，长牡蛎注释包的构建及KEGG和GO分析</title>
    <link href="https://0hhhhhh0.github.io/2025/08/02/25/"/>
    <id>https://0hhhhhh0.github.io/2025/08/02/25/</id>
    <published>2025-08-02T17:41:00.000Z</published>
    <updated>2025-08-03T18:06:31.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面我们发现了一些显著的SNP窗口位点，下面对显著的SNP位点进行提取。</p></blockquote><h1 id="1-提取SNP位点信息"><a href="#1-提取SNP位点信息" class="headerlink" title="1.提取SNP位点信息"></a>1.提取SNP位点信息</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 设置FST阈值（例如取WEIGHTED_FST &gt; 0.2）</span>awk '$5 &gt; 0.2' fst_binned.windowed.weir.fst &gt; high_fst_windows.txt<span class="token title important"><span class="token punctuation">##</span> 检查最高FST窗口</span>sort -k5,5nr high_fst_windows.txt | head<span class="token title important"><span class="token punctuation">##</span> 从高FST结果生成BED格式（用于后续注释）</span>awk '{print $1"\t"$2"\t"$3"\t"$5}' high_fst_windows.txt &gt; high_fst_regions.bed<span class="token title important"><span class="token punctuation">##</span> 合并相邻窗口（如距离 merged_high_fst.bed</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-对提取SNP位点注释"><a href="#2-对提取SNP位点注释" class="headerlink" title="2.对提取SNP位点注释"></a>2.对提取SNP位点注释</h1><p>然后提取与基因重叠的区域（需准备reference.gtf）</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 步骤1：过滤GFF3中的基因行（注意GFF3中gene的第三列为"gene"）</span>bedtools intersect -a merged_high_fst.bed -b ../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff -wa -wb | \awk -F'\t' '$8 == "gene" {print $1,$2,$3,$12}' OFS='\t' | \awk -F'[;\t]' '{gsub(/ID=gene-/, "", $4); print $1,$2,$3,$4}' | sort | uniq &gt; fst_genes.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-提取SNP位点所在基因的ID号"><a href="#3-提取SNP位点所在基因的ID号" class="headerlink" title="3.提取SNP位点所在基因的ID号"></a>3.提取SNP位点所在基因的ID号</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">awk -F'\t' '{  match($8, /ID=gene-([^;]+)/, id_arr);  match($8, /Name=([^;]+)/, name_arr);  if (id_arr[1] &amp;&amp; name_arr[1]) {    print $1, $2, $3, id_arr[1], name_arr[1];  }}' OFS='\t' fst_genes_annotated.bed &gt; fst_gene_ids_names.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>下面为整理好的上述过程的脚本</p><p>命名为<code># annotate_fst.sh</code> </p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">#!/bin/bash# 输入文件BED="merged_high_fst.bed"GFF="../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff"# 步骤1：提取基因（直接运行，若为空则需名称映射）bedtools intersect -a $BED -b $GFF -wa -wb | \awk -F'\t' '$8 == "gene" {print $1,$2,$3,$12}' OFS='\t' | \awk -F'[;\t]' '{gsub(/ID=gene-/, "", $4); print $1,$2,$3,$4}' | sort | uniq &gt; fst_genes.txt# 步骤2：检查结果echo "=== 前10行基因 ==="head fst_genes.txtecho "=== 行数统计 ==="wc -l fst_genes.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><h1 id="4-通过基因ID提取蛋白序列"><a href="#4-通过基因ID提取蛋白序列" class="headerlink" title="4.通过基因ID提取蛋白序列"></a>4.通过基因ID提取蛋白序列</h1><p>下面为根据基因ID提取转录本序列，然后进行注释（后面不用这个，直接构建注释包进行分析，感觉更好</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">grep -E "$(paste -sd'|' missing_loc.txt)" ../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff | grep "gene" | grep -E "$(paste -sd'|' missing_loc.txt)" | grep -o "gene_biotype=[^;]*" | sort | uniq -cgrep -E "$(paste -sd'|' gene_loc_ids.txt)" ../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff | grep "protein_id=" | \sed -r 's/.<span class="token italic"><span class="token punctuation">*</span><span class="token content">protein_id=([^;]+).</span><span class="token punctuation">*</span></span>/\1/' | sort | uniq &gt; protein_ids.txtseqkit grep -f protein_ids.txt ../GCF_902806645.1_cgigas_uk_roslin_v1_protein.faa &gt; proteins_extracted/fst_genes_proteins.faagrep "^&gt;" proteins_extracted/fst_genes_proteins.faa | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现不能完全匹配所有LOC，查看哪些没匹配到</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 找所有LOC对应的protein_id</span>grep -E "$(paste -sd'|' gene_loc_ids.txt)" ../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff | grep "protein_id=" | \sed -r 's/.<span class="token italic"><span class="token punctuation">*</span><span class="token content">protein_id=([^;]+).</span><span class="token punctuation">*</span></span>/\1/' | sort | uniq &gt; protein_ids_all.txt<span class="token title important"><span class="token punctuation">#</span> 检查protein_ids.txt是否包含所有</span><span class="token blockquote punctuation">&gt;</span> comm -23 protein_ids_all.txt protein_ids.txt &gt; missing_proteins.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是上述命令整理好的查找脚本</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span>!/bin/bash</span>set -euo pipefail<span class="token title important"><span class="token punctuation">#</span> 1. 从fst_gene_ids_names.txt中提取LOC ID列表（假设第4列为LOC ID）</span>cut -f4 fst_gene_ids_names.txt | sort | uniq &gt; gene_loc_ids.txt<span class="token title important"><span class="token punctuation">#</span> 2. 从基因组注释GFF文件中筛选出这些LOC对应的protein_id</span>grep -E "$(paste -sd'|' gene_loc_ids.txt)" ../GCF_902806645.1_cgigas_uk_roslin_v1_genomic.gff | \    grep "protein_id=" | \    sed -r 's/.<span class="token italic"><span class="token punctuation">*</span><span class="token content">protein_id=([^;]+).</span><span class="token punctuation">*</span></span>/\1/' | \    sort | uniq &gt; protein_ids.txt<span class="token title important"><span class="token punctuation">#</span> 3. 使用seqkit提取对应的蛋白序列到指定文件</span>seqkit grep -f protein_ids.txt ../GCF_902806645.1_cgigas_uk_roslin_v1_protein.faa &gt; proteins_extracted/fst_genes_proteins.faa<span class="token title important"><span class="token punctuation">#</span> 4. 统计提取到的蛋白数量，确认数量</span>grep "^&gt;" proteins_extracted/fst_genes_proteins.faa | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><h1 id="5-对提取的蛋白进行注释"><a href="#5-对提取的蛋白进行注释" class="headerlink" title="5.对提取的蛋白进行注释"></a>5.对提取的蛋白进行注释</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">conda create -n eggnog3_env -c bioconda -c conda-forge eggnog-mapperconda activate eggnog3_envemapper.py -htar -xvzf eggnog_mapper_data-5.0.2.tar.gz -C ./data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">emapper.py -i proteins_extracted/fst_genes_proteins.faa \  --output fst_proteins_annotation \  --data_dir ./data \  -m diamond \  --cpu 12 \  --override<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>下面是R中的操作，主要进行KEGG和GO分析</p><h1 id="1-对前面注释的基因进行聚类分析"><a href="#1-对前面注释的基因进行聚类分析" class="headerlink" title="1.对前面注释的基因进行聚类分析"></a>1.对前面注释的基因进行聚类分析</h1><p>详细内容见 <a href="http://192.168.1.101/usr/uploads/2025/08/706163015.ipynb">Fst_2.ipynb</a><br><img src="/images/25/2038951127.png" alt="mdvyq9m6.png"><br>结果如上，没有达到我的预期，操作也较麻烦。</p><h1 id="2-构建非模式物种注释包org-Cgigas-eg-db"><a href="#2-构建非模式物种注释包org-Cgigas-eg-db" class="headerlink" title="2.构建非模式物种注释包org.Cgigas.eg.db"></a>2.构建非模式物种注释包org.Cgigas.eg.db</h1><p>详细内容见 <a href="http://192.168.1.101/usr/uploads/2025/08/3120321603.ipynb">Fst_3.ipynb</a> </p><pre><code class="markdown">library(tidyverse)library(AnnotationForge)library(readxl)emapper %  dplyr::select(GID=query,Gene_Symbol=Preferred_name,                 GO=GOs,KO=KEGG_ko,Pathway =KEGG_Pathway,                 OG=eggNOG_OGs,Gene_Name =seed_ortholog)emapper$GID %   #这是只提取有GO注释信息的行，判断的标准时GO信息不是NA，这也就是为什么前面必须将“-”替换为NA，不替换就无法进行有效过滤。  mutate(EVIDENCE = 'gigas')     #硬生生加了1列EVIDENCE，全部赋值A,凑数的。dim(gene2go)    #查看数据维度。#[1] 1523399       3#提取GID与KO信息，这里只有2列信息gene2ko% separate_rows(KO, sep = ',', convert = F) %&gt;%  dplyr::filter(!is.na(KO))dim(gene2ko)#[1] 30530     2#提取GID与Pathway信息，这里只有2列信息gene2pathway%separate_rows(Pathway, sep = ',', convert = F) %&gt;%  dplyr::filter(!is.na(Pathway)) dim(gene2pathway)#[1] 143056      2#提取GID与Gene_Symbol信息，Gene_Symbol是Preferred_name信息，这里只有2列信息gene2symbol%  dplyr::filter(!is.na(Gene_Symbol))dim(gene2symbol)#[1] 4561    2## 删除 GO ID 中的空格、制表符、换行符gene2go$GO</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前面我们发现了一些显著的SNP窗口位点，下面对显著的SNP位点进行提取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-提取SNP位点信息&quot;&gt;&lt;a href=&quot;#1-提取SNP位点信息&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>2.重测序数据分析——初步整理</title>
    <link href="https://0hhhhhh0.github.io/2025/07/31/19/"/>
    <id>https://0hhhhhh0.github.io/2025/07/31/19/</id>
    <published>2025-07-31T02:54:00.000Z</published>
    <updated>2025-08-03T17:23:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>布置好服务器后就是对重测序数据进行分析了。<br>首先，看一下我手里的数据，其实已经有公司处理好的数据了，在此，我并未对重测序下机原始数据进行分析，而是使用的公司初步过滤的 Filter.snp.vcf.gz和.tbi文件。</p></blockquote><p>前期在写重测序相关的专利，看别人专利时，发现重测序可进行Fst计算分析，绘制的图类似GWAS的曼哈顿图，遂想模仿绘制，便有了下面的一系列相关内容。</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><h1 id="一、FST和GWAS："><a href="#一、FST和GWAS：" class="headerlink" title="一、FST和GWAS："></a>一、FST和GWAS：</h1><p>首先，先介绍一下FST和GWAS，二者都是遗传学中常用的分析方法，但它们的目的和分析方式不一样。</p><ul><li>FST（Fixation Index）是用来衡量不同群体之间的遗传差异。如果两个群体在某些基因上有很大的差异，FST 值就会很高，说明这两个群体在基因组上有很大分化。</li><li>GWAS（全基因组关联研究）是用来找出基因和特定性状之间的关系。简单来说，它帮助我们发现哪些基因变异可能会影响某个性状（比如身高、疾病或壳色）。</li></ul><h2 id="以黑白壳长牡蛎为例"><a href="#以黑白壳长牡蛎为例" class="headerlink" title="以黑白壳长牡蛎为例"></a>以黑白壳长牡蛎为例</h2><p>假设我们研究的是黑壳和白壳长牡蛎，这两种牡蛎的壳色差异显著，我们分别进行 FST和 GWAS 分析，使用 黑壳牡蛎 和 白壳牡蛎 作为群体标签。<br>FST 分析：我们将所有牡蛎按壳色分成两个群体，分别是 黑壳牡蛎 和 白壳牡蛎。通过计算 FST 值，我们能发现这两个群体之间在基因组中哪些区域的差异最大。如果某个基因区域的 FST 值很高，说明这个区域可能与这两个群体的遗传差异有关。<br>GWAS 分析：这里我们把牡蛎的壳色作为 表型，看看基因组中的哪些变异（SNP）与壳色相关。我们仍然用 黑壳牡蛎 和 白壳牡蛎 作为两组样本，进行统计分析，找出哪些基因变异可能影响壳色。<br>FST 和 GWAS 的区别<br>FST 分析 主要是比较两个群体（黑壳和白壳牡蛎）在基因组上的差异，找出遗传分化最大的区域。FST 是群体层面的分析，不直接与表型（如壳色）相关。<br>GWAS 分析 关注的是表型与基因型之间的关联，目的是找出影响牡蛎壳色的具体基因变异。在这个过程中，壳色作为表型，与基因变异建立直接关系。</p><p>虽然 黑壳牡蛎 和 白壳牡蛎 都可以作为群体标签（FST）或表型分组（GWAS），但它们的分析目的不同：<br>FST 是用来研究群体之间的遗传分化，揭示哪些基因区域可能在两种牡蛎群体之间有显著差异。<br>GWAS 则是通过关联分析找出哪些基因变异直接影响牡蛎的壳色。<br>这两种方法可以互相补充，共同揭示基因和表型之间复杂的关系。</p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>虽然 <strong>FST</strong> 和 <strong>GWAS</strong> 都涉及基因组和表型之间的关系，但它们的目的和侧重点其实是有区别的。虽然在 <strong>黑壳牡蛎</strong> 和 <strong>白壳牡蛎</strong> 的例子中，确实它们的分析结果看起来有些相似，但 <strong>FST</strong> 和 <strong>GWAS</strong> 的核心概念还是有本质区别的。</p><p>我们来逐一比较一下两者的侧重点，看看为什么它们的目的不同，即使在分析黑白壳差异时，结果可能会有交集。</p><h3 id="🧬-FST-和-GWAS-的核心区别"><a href="#🧬-FST-和-GWAS-的核心区别" class="headerlink" title="🧬 FST 和 GWAS 的核心区别"></a>🧬 <strong>FST 和 GWAS 的核心区别</strong></h3><ol><li><p><strong>FST 分析</strong>：<br>FST 用来衡量<strong>不同群体之间的遗传分化</strong>。它通过比较群体间的基因频率差异，找出哪些区域在群体之间分化最显著。重点是研究群体 <strong>A</strong> 和 <strong>B</strong>（比如黑壳和白壳牡蛎）是否有不同的遗传背景，尤其是群体间的遗传结构。</p><ul><li><strong>目标</strong>：找出群体间在基因组上最显著的分化区域。</li><li><strong>侧重点</strong>：群体差异、基因变异的分布，通常不直接关注与某个特定表型（如壳色）的关联。</li></ul><p>举个例子：</p><ul><li><strong>黑壳和白壳牡蛎</strong>之间，可能会发现某些基因区域的 <strong>FST 值很高</strong>，说明这些区域在两个群体之间的遗传差异很大，但这并不意味着这些基因变异一定会影响壳色。</li></ul></li></ol><hr><ol start="2"><li><p><strong>GWAS 分析</strong>：<br>GWAS 的目的是研究基因型和<strong>特定表型</strong>之间的关联，它是通过统计分析来找出与表型（比如牡蛎壳色）相关的遗传变异。在 <strong>GWAS</strong> 中，重点是找出哪些特定的 <strong>基因变异</strong> 直接影响了我们关注的 <strong>表型</strong>（比如壳色的白色或黑色）。</p><ul><li><strong>目标</strong>：找出与表型（如壳色）相关的基因变异。</li><li><strong>侧重点</strong>：基因与表型（壳色）之间的直接关系。</li></ul><p>举个例子：</p><ul><li>在 <strong>GWAS 分析</strong> 中，我们的目标是找出哪些 <strong>SNP</strong> 直接与壳色（黑色或白色）相关。如果某个基因区域的 <strong>SNP</strong> 在黑壳牡蛎和白壳牡蛎之间有显著差异，那么我们会认为这个变异可能与壳色性状相关。</li></ul></li></ol><hr><h3 id="🧩-区别的关键点："><a href="#🧩-区别的关键点：" class="headerlink" title="🧩 区别的关键点："></a>🧩 <strong>区别的关键点</strong>：</h3><table><thead><tr><th>项目</th><th>FST</th><th>GWAS</th></tr></thead><tbody><tr><td><strong>目标</strong></td><td>研究群体间的遗传分化，找出群体间差异最大的基因区域</td><td>找出与特定表型（如壳色）相关的基因变异</td></tr><tr><td><strong>关注点</strong></td><td>群体的遗传结构差异</td><td>基因与表型的直接关联</td></tr><tr><td><strong>分析方式</strong></td><td>比较不同群体的基因频率差异，计算 <strong>FST 值</strong></td><td>将基因型数据与表型数据结合，进行 <strong>关联分析</strong></td></tr><tr><td><strong>最终结果</strong></td><td>找出遗传分化较大的区域</td><td>找到影响表型的基因变异（SNP）</td></tr></tbody></table><h3 id="🌿-简单总结："><a href="#🌿-简单总结：" class="headerlink" title="🌿 简单总结："></a>🌿 <strong>简单总结：</strong></h3><ul><li><p><strong>FST</strong> 分析关注的是群体之间<strong>遗传结构</strong>的差异，它告诉你 <strong>哪些基因区域</strong> 在不同群体（黑壳和白壳牡蛎）之间分化最大，<strong>但并不直接关注这些区域是否与表型（壳色）相关</strong>。</p></li><li><p><strong>GWAS</strong> 直接关注的是基因和表型之间的关联，它告诉你 <strong>哪些特定的基因变异</strong> 与壳色变化有直接关系，<strong>并且是针对表型的分析</strong>。</p></li></ul><h3 id="🔄-为什么这两者有重叠但不完全相同："><a href="#🔄-为什么这两者有重叠但不完全相同：" class="headerlink" title="🔄 为什么这两者有重叠但不完全相同："></a>🔄 <strong>为什么这两者有重叠但不完全相同：</strong></h3><ul><li>如果你在 <strong>FST 分析</strong> 中发现某个区域的 <strong>FST 值很高</strong>，这表明该区域可能在群体间存在显著差异。</li><li>然后，如果你再做 <strong>GWAS</strong> 分析，发现这个区域的变异确实与 <strong>壳色</strong> 相关，那么就可以确定这个基因区域<strong>可能影响壳色</strong>，而且它是群体分化的热点。</li></ul><p>因此，<strong>FST</strong> 主要是用来筛选出潜在的遗传分化区域，而 <strong>GWAS</strong> 是用来验证这些区域与表型的关联。</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>下面我们进行相关的FST分析</p><h1 id="二、FST计算"><a href="#二、FST计算" class="headerlink" title="二、FST计算"></a>二、FST计算</h1><p>最头疼的一步，布置环境，安装分析所用的软件包。<br>plink1.9和plink2.0均未成功分析，遂使用vcftools进行处理。</p><p>文件为 Filter.snp.vcf.gz，如果需要解压就使用下面方法</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">gunzip  Filter.snp.vcf.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vcftools使用mamba构建新环境</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">conda install -n base -c conda-forge mamba  # 安装mambamamba create -n vcftools_env -c bioconda vcftools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">vcftools --vcf Filter.snp.vcf \         --weir-fst-pop BM.txt \         --weir-fst-pop WM.txt \         --out BM_vs_WM_fst<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得出BM_vs_WM_fst.weir.fst文件</p><p>然后在R中进行绘图。</p><pre class="line-numbers language-R" data-language="R"><code class="language-R">library(ggplot2)fst %  summarise(center = (min(pos_cum) + max(pos_cum)) / 2)# 设置显著阈值线（例如 top 1%）fst_threshold %  # 调整抽样比例(1-5%)  ungroup()# 2. 直接使用plot_ly() + scattergl模式（最佳性能）p %layout(  xaxis = list(    title = "Chromosome",    tickvals = axis_df$center,    ticktext = axis_df$CHROM  ),  yaxis = list(title = "FST"),  hoverlabel = list(bgcolor = "white")) %&gt;%config(  displayModeBar = TRUE,  scrollZoom = TRUE)p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/19/3703765276.png" alt="mdvvhepw.png"><br>结果文件200多M，太大了，浏览器卡的几乎无法正常浏览，遂放弃。</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><blockquote><p>下面尝试过滤后再分析</p></blockquote><p>画图结果显示SNP位点过多，需要再次处理</p><p>文件其实已经是公司过滤过的数据了，数据量较大，再过滤一次。</p><h2 id="1-使用-vcftools-或-bcftools-进行-SNP-过滤"><a href="#1-使用-vcftools-或-bcftools-进行-SNP-过滤" class="headerlink" title="1. 使用 vcftools 或 bcftools 进行 SNP 过滤"></a>1. 使用 vcftools 或 bcftools 进行 SNP 过滤</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash"># 基本质量过滤 vcftools --vcf  Filter.snp.vcf \         --minQ 30 \         --min-meanDP 10 \         --max-meanDP 100 \         --min-alleles 2 \         --max-alleles 2 \         --maf 0.05 \         --max-missing 0.9 \         --recode \         --out filtered<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-使用-PLINK-进行FST计算"><a href="#2-使用-PLINK-进行FST计算" class="headerlink" title="2. 使用 PLINK 进行FST计算"></a>2. 使用 PLINK 进行FST计算</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 转换为 PLINK 格式</span>plink --vcf filtered.recode.vcf --make-bed --out filtered_plink<span class="token title important"><span class="token punctuation">##</span> 计算群体间 FST</span>plink --bfile filtered_plink \      --fst \      --within pop_info_fixed.tsv \      --out fst_results \      --allow-extra-chr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-筛选显著-FST-位点"><a href="#3-筛选显著-FST-位点" class="headerlink" title="3.筛选显著 FST 位点"></a>3.筛选显著 FST 位点</h2><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 提取 FST &gt; 0.05 的位点（阈值根据研究设定）</span> awk '$5 &gt; 0.05 {print $2}' fst_results.fst &gt; high_fst_snps.txt <span class="token title important"><span class="token punctuation">##</span> 统计高 FST 位点数量</span> wc -l high_fst_snps.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-可视化-FST-分布（R-代码）"><a href="#4-可视化-FST-分布（R-代码）" class="headerlink" title="4.可视化 FST 分布（R 代码）"></a>4.可视化 FST 分布（R 代码）</h2><pre class="line-numbers language-R" data-language="R"><code class="language-R">library(ggplot2)# 读取结果fst %  # 布局设置  layout(    legend = list(      font = list(size = 10),  # 统一增大所有图例项字体      itemclick = TRUE        # 可选：禁用图例项点击隐藏    ),    title = list(      text = "Genome-wide FST Manhattan Plot",      x = 0.05, y = 0.98    ),    xaxis = list(      title = "Genomic Position (Mb)",      showgrid = FALSE,      tickvals = plot_data %&gt;%         group_by(CHROM) %&gt;%         summarise(center = median(POS/1e6)) %&gt;%         pull(center),        ticktext = main_chroms,      # ticktext = str_remove(main_chroms, "NC_")        tickangle = -45,  # ← 关键参数：标签倾斜45度（负号表示逆时针）        tickfont = list(size = 8),  # 可选：调整标签字体大小        ticklen = 5,  # 刻度线长度        tickwidth = 1,  # 刻度线粗细        showgrid = FALSE    ),    yaxis = list(      title = "Weighted FST",      range = c(0, max(plot_data$WEIGHTED_FST) * 1.1)    ),    hoverlabel = list(      bgcolor = "white",      font = list(size = 10)    ),    legend = list(      orientation = "h",      x = 0.5, y = 1.1,      bgcolor = "rgba(255,255,255,0.8)")    ,    margin = list(t = 80)  # 顶部留白  ) %&gt;%  # 交互功能  highlight(    "plotly_selected",    opacityDim = 0.2,    selected = attrs_selected(      marker = list(size = 15, color = "black"),      textfont = list(weight = "bold"))  )# 5. 输出结果 --------------------------------------------------------------# 显示图表p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/19/1902442139.png" alt="mdvwczfp.png"></p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>可以看到有些窗口FST值较高，我想筛选SNP进行验证，如何继续做呢？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;布置好服务器后就是对重测序数据进行分析了。&lt;br&gt;首先，看一下我手里的数据，其实已经有公司处理好的数据了，在此，我并未对重测序下机原始数据进行分析，而是使用的公司初步过滤的 Filter.snp.vcf.gz和.tbi文件。&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="多组学" scheme="https://0hhhhhh0.github.io/categories/%E5%A4%9A%E7%BB%84%E5%AD%A6/"/>
    
    <category term="重测序" scheme="https://0hhhhhh0.github.io/categories/%E5%A4%9A%E7%BB%84%E5%AD%A6/%E9%87%8D%E6%B5%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>1.NPC内网穿透——Linux</title>
    <link href="https://0hhhhhh0.github.io/2025/07/24/18/"/>
    <id>https://0hhhhhh0.github.io/2025/07/24/18/</id>
    <published>2025-07-24T14:45:00.000Z</published>
    <updated>2025-08-03T14:07:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>历时半个月，浅浅学习了一下重测序数据的分析流程，为防止遗忘，特写此后几篇文章，以便后续回忆参考。</p></blockquote><blockquote><p>要进行重测序数据分析，首要的是搞一台服务器，恰好课题组有一台服务器，但问题是只能在内网访问，遂采用NPC进行内网穿透，实现异地访问使用。</p></blockquote><p>用到的软件<br><a href="https://kmxo.lanzoub.com/iF7O730413eb">linux-npc.zip - 蓝奏云</a><br><a href="https://d-jy.net/docs/nps/?lang=zh#/use">使用教程</a><br>共两个步骤<br>1.下载npc客户端后修改 npc.conf文件<br>模板参考<br>修改前</p><pre class="line-numbers language-none"><code class="language-none">[common]server_addr=填写服务器IP地址:8024conn_type=tcpvkey=唯一验证密钥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例如下：<br>修改前</p><p><img src="/images/18/953241429.png" alt="mdqu8nxa.png"></p><p>修改后</p><p><img src="/images/18/1669145814.png" alt="mdqu91bc.png"></p><p>2.在文件目录中执行以下命令需要修改ip和密钥<br>（不要修改服务端口和删除空格）</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li>无配置文件模式（推荐）<br>详细命令行参数</li></ol><p>📌 适用于</p><p>快速连接 NPS 服务器<br>所有配置均在 Web 管理端完成<br>客户端仅需运行一条命令<br>📌 普通连接（TCP 模式）</p><p> <code>./npc -server=ip:8024 -vkey=web界面中显示的密钥 -type=tcp</code> </p><p>📌 TLS 加密连接（安全模式）</p><p> <code>./npc -server=ip:8025 -vkey=web界面中显示的密钥 -type=tls</code> </p><p>📌 连接多个服务端</p><p> <code>./npc install -server=xx:12,yy:34 -vkey=xx,yy -type=tcp,tls</code> </p><p>📌 说明：</p><p>默认端口 8024 为非 TLS 端口，用于普通 TCP 连接<br>如果 -type=tls，必须使用 8025 作为 TLS 端口，否则连接失败</p><ol start="2"><li>注册到系统服务（开机启动 &amp; 守护进程）<br>📌 适用于</li></ol><p>保证 NPC 在服务器重启后自动运行<br>无需手动启动，后台运行<br>Linux/macOS</p><pre class="line-numbers language-none"><code class="language-none"># 普通连接（TCP）sudo ./npc install -server=ip:8024 -vkey=xxx -type=tcp -log=off# TLS 加密连接（安全模式）sudo ./npc install -server=ip:8025 -vkey=xxx -type=tls -log=off# 连接多个服务端sudo ./npc install -server=xx:12,yy:34 -vkey=xx,yy -type=tcp,tls -log=off# 启动服务sudo npc start# 停止服务sudo npc stop# 卸载（修改参数时需要先卸载再重新注册） sudo npc uninstall <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>后面就是开放相应的端口，实现远程访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;历时半个月，浅浅学习了一下重测序数据的分析流程，为防止遗忘，特写此后几篇文章，以便后续回忆参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;要进行重测序数据分析，首要的是搞一台服务器，恰好课题组有一台服务器，但问题是只能在</summary>
      
    
    
    
    <category term="默认分类" scheme="https://0hhhhhh0.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次清空SMART修复群晖报故障的硬盘</title>
    <link href="https://0hhhhhh0.github.io/2024/12/08/9/"/>
    <id>https://0hhhhhh0.github.io/2024/12/08/9/</id>
    <published>2024-12-08T04:56:00.000Z</published>
    <updated>2025-07-31T03:33:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>事先说明，虽然这篇文章内容大量注水，但是文中涉及的操作有风险，想要照葫芦画瓢的童鞋，请谨慎对待，切记提前备份重要数据。小姐姐们不见了别找我，我这里可不生产小姐姐</p><div style="height:3px;background:linear-gradient(90deg,#ff6c6c,#73aaff);margin:2rem 0;border-radius:2px;"></div><p>好，让我们进入正题，凡事都有个前因后果，先说说起因</p><p>前几天，群晖里一块希捷的2T硬盘报告故障，查看一下SMART信息，发现是End_to_End计数达到阈值，于是把硬盘抽出来接到Windows下用HDTune再次确认，确实见红了 但是用SeaTools扫描，各种长短检测都能通过，希捷这又是什么操作</p><p>HDTune忘记截图了，借用网上的一张图说明一下是哪一项见红HDTune忘记截图了，借用网上的一张图说明一下是哪一项见红<br><img src="/images/9/762531194.png" alt="m4f55w5m.png"><br>最后用MHDD扫描过后，发现硬盘并没有坏块，那么是什么原因导致的B8 End_to_End计数增加呢？各种说法都有，有说是硬盘上的缓存坏掉了，有说是SATA线接触不良导致，有说是缓存到磁盘的数据包校验出错，反正各种说法都有，具体硬盘SMART里如何判断这个值的，估计也只有硬盘厂家知道，所以就不要纠结了。但是就这样淘汰掉一块2T的硬盘？是不是太浪费了？记一次清空SMART修复群晖报故障的硬盘 </p><p>垃圾佬没别的本事，就是爱折腾，于是先尝试了低格整块硬盘，插回群晖还是报故障，看来只能祭出本垃圾佬的终极大杀器USB转TTL神器和给神器属性加成的TTL杜邦线了，没错，就是下面这俩玩意，马粑粑家几块钱一个，随便挑随便选记一次清空SMART修复群晖报故障的硬盘 </p><p>如果你的电脑是第一次插入USB转TTL神器，要先安装驱动，并像下图这样在属性里设置好端口的波特率为38400</p><p>安装好驱动的USB转TTL安装好驱动的USB转TTL</p><p>端口的设置，第一项要设置为 <strong>38400</strong> 端口的设置<br><img src="/images/9/413614975.png" alt="m4f59zrr.png"><br>第一项要设置为 38400</p><p>硬盘上TTL口的接法硬盘上TTL口的接法<br><img src="/images/9/231601982.png" alt="m4f5akz6.png"></p><p>USB转TTL的接法USB转TTL的接法<br><img src="http://hhhh.ywhywhywh.top/usr/uploads/2024/12/4065335586.png" alt="m4f5awqp.png"></p><p>接好了之后，让我们先把USB转TTL插入电脑的USB口，打开你的putty，像下图这样设置，如果你的USB转TTL在电脑上识别出来是COM4或者COM5这样的，请按你自己的实际情况设置COM口，Speed设置为38400，然后点open</p><p>putty设置putty设置</p><p>这时你会看到一个黑麻麻的窗口，什么都没有记一次清空SMART修复群晖报故障的硬盘 别着急，这时我们再接上电源线，记住，只接电源线。</p><p>不要接SATA数据线，不要接SATA数据线，不要接SATA数据线，重要的事情说三遍</p><p>另外，接电源线最好是用电源上引出来的原生SATA电源线，尽量不要用4pin转SATA的电源转换线</p><p>接上电源线后接上电源线后<br><img src="/images/9/2870995132.png" alt="m4f5bgip.png"></p><p>当你接上硬盘电源线后再看Putty会发现有回显了，当停在(P)SATA Reset后，说明硬盘已经启动完成了，这是可以按Ctrl+z激活终端，这时就会进入到希捷硬盘的F3工厂模式</p><p>按下Ctrl+z后进入F3工厂模式按下Ctrl+z后进入F3工厂模式<br><img src="/images/9/1842945658.png" alt="m4f5bqet.png"></p><p>这时如果只是清零SMART那只要输入两个命令/1和N1就能搞定</p><p>输入/1进入1模式<br><img src="/images/9/391565786.png" alt="m4f5c1cz.png"><br>输入/1进入1模式</p><p>在/1模式下输入N1，看到回显Clear SMART is completed，这时硬盘的SMART值已经被清零了，这时你可以拔掉电源线和TTL线，关机把硬盘接回电源线和SATA线（其实你不关机也行，重新接回SATA线和电源线就行，我经常这样干</p><p>这时在我们再用HDTune查看硬盘的SMART值会发现：马达启停次数，硬盘通电时间，马达旋转重试次数，点到点错误计数，接口CRC错误计数，等等等等的很多参数都已经变成0了</p><p>这是我的硬盘清零后的效果这是我的硬盘清零后的效果</p><p>看看我这个硬盘SMART清零后的效果，“启动/停止次数”因为之前清零SMART后拔插过一次电源线，所以这里计数是1</p><p>当然，有一些参数比如：原始读取错误率，磁头飞行时间等这些没有清零，这些都写在SMART的G-list里，要完全清掉需要在F3工厂模式里进入2模式停掉马达电机，清除G表，然后重建SMART和硬盘索引区到硬盘固件内才行</p><p>这硬盘有固件锁<br><img src="/images/9/1367509578.png" alt="m4f5ehrp.png"></p><p>这硬盘有固件锁</p><p>但是如果你像上图我这块硬盘一样，在进入2模式输入Z想停止电机，返回Diagnostic Port Locked的话，说明这块硬盘有固件锁。被锁了固件是无法清零G表的，这也是希捷为了限制一些返厂硬盘和一些奸商通过改写G表来充当新硬盘坑人做的限制。当然，道高一尺魔高一丈，如果你有PC3000的软件和红卡或者MRT的话，固件锁其实也是可以解开的，这时候你就真的可以为所欲为了</p><p>好了，本次折腾到此记录完毕，剩下的自然是把硬盘继续插回群晖里，把小姐姐们请回来</p><p>仅以此文说明硬盘的SMART是可以清零的，硬盘SMART里的G表也是可以清零的，整个SMART是完全可以清除然后重建成刚出厂的样子的，甚至SMART还是可以通过工厂模式改写成你想要的任何样子的，所以二手硬盘水很深很深，请各位谨慎选择</p><p>最后，此文仅以记录过程为目的，请某些头脑比较发达的朋友不要想着用学会了，拿旧硬盘把SMART清零了去坑人，既然有办法清零那肯定是有办法验出来的</p><p>最后的最后，如果你只是本着不想浪费的原则，想清掉SMART上的错误，让这块硬盘继续发挥余热，建议最好清零SMART后的硬盘不要存放重要数据，同时注意时常关注一下硬盘状态，毕竟一块硬盘如果SMART某项报错了，那硬盘肯定是有一些问题的，所以如果有一天你硬盘里的小姐姐们灰飞烟灭了，千万别怪我没有提醒</p><p>哦，还有个温馨提醒，USB转TTL的神器最好是选择CH340G芯片的，别选RS232的，别问我为什么，都是泪</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事先说明，虽然这篇文章内容大量注水，但是文中涉及的操作有风险，想要照葫芦画瓢的童鞋，请谨慎对待，切记提前备份重要数据。小姐姐们不见了别找我，我这里可不生产小姐姐&lt;/p&gt;
&lt;div style=&quot;height:3px;background:linear-gradient(90</summary>
      
    
    
    
    <category term="默认分类" scheme="https://0hhhhhh0.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>GPT 学术优化</title>
    <link href="https://0hhhhhh0.github.io/2024/12/06/8/"/>
    <id>https://0hhhhhh0.github.io/2024/12/06/8/</id>
    <published>2024-12-06T11:09:00.000Z</published>
    <updated>2024-12-06T11:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><p>安装方法：直接运行 (Windows, Linux or MacOS)<br>下载项目</p><blockquote><p>git clone –depth=1 <a href="https://github.com/binary-husky/gpt_academic.git">https://github.com/binary-husky/gpt_academic.git</a><br>cd gpt_academic<br>配置API_KEY等变量</p></blockquote><p>在config.py中，配置API KEY等变量。特殊网络环境设置方法、Wiki-项目配置说明。</p><p>「 程序会优先检查是否存在名为config_private.py的私密配置文件，并用其中的配置覆盖config.py的同名配置。如您能理解以上读取逻辑，我们强烈建议您在config.py同路径下创建一个名为config_private.py的新配置文件，并使用config_private.py配置项目，从而确保自动更新时不会丢失配置 」。</p><p>「 支持通过环境变量配置项目，环境变量的书写格式参考docker-compose.yml文件或者我们的Wiki页面。配置读取优先级: 环境变量 &gt; config_private.py &gt; config.py 」。</p><p>安装依赖</p><h4 id="（选择I-如熟悉python-python推荐版本-3-9-3-11）"><a href="#（选择I-如熟悉python-python推荐版本-3-9-3-11）" class="headerlink" title="（选择I: 如熟悉python, python推荐版本 3.9 ~ 3.11）"></a>（选择I: 如熟悉python, python推荐版本 3.9 ~ 3.11）</h4><p>备注：使用官方pip源或者阿里pip源, 临时换源方法：</p><blockquote><p>python -m pip install -r requirements.txt -i <a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a></p></blockquote><blockquote><p>python -m pip install -r requirements.txt</p></blockquote><h4 id="（选择II-使用Anaconda）步骤也是类似的-https-www-bilibili-com-video-BV1rc411W7Dr-："><a href="#（选择II-使用Anaconda）步骤也是类似的-https-www-bilibili-com-video-BV1rc411W7Dr-：" class="headerlink" title="（选择II: 使用Anaconda）步骤也是类似的 (https://www.bilibili.com/video/BV1rc411W7Dr)："></a>（选择II: 使用Anaconda）步骤也是类似的 (<a href="https://www.bilibili.com/video/BV1rc411W7Dr)%EF%BC%9A">https://www.bilibili.com/video/BV1rc411W7Dr)：</a></h4><blockquote><p>conda create -n gptac_venv python=3.11    # 创建anaconda环境<br>conda activate gptac_venv                 # 激活anaconda环境</p></blockquote><blockquote><p>python -m pip install -r requirements.txt # 这个步骤和pip安装一样的步骤</p></blockquote><p>如果需要支持清华ChatGLM2/复旦MOSS/RWKV作为后端，请点击展开此处<br>运行</p><blockquote><p>python main.py</p></blockquote><p>使用第三方API、Azure等、文心一言、星火等，见Wiki页面</p><p>云服务器远程部署避坑指南。 请访问云服务器远程部署wiki</p><p>在其他平台部署&amp;二级网址部署</p><p>使用Sealos一键部署。<br>使用WSL2（Windows Subsystem for Linux 子系统）。请访问部署wiki-2<br>如何在二级网址（如<a href="http://localhost/subpath%EF%BC%89%E4%B8%8B%E8%BF%90%E8%A1%8C%E3%80%82%E8%AF%B7%E8%AE%BF%E9%97%AEFastAPI%E8%BF%90%E8%A1%8C%E8%AF%B4%E6%98%8E">http://localhost/subpath）下运行。请访问FastAPI运行说明</a></p><p>Advanced Usage<br>I：自定义新的便捷按钮（学术快捷键）<br>现在已可以通过UI中的界面外观菜单中的自定义菜单添加新的便捷按钮。如果需要在代码中定义，请使用任意文本编辑器打开core_functional.py，添加如下条目即可：</p><p>“超级英译中”: {<br>    # 前缀，会被加在你的输入之前。例如，用来描述你的要求，例如翻译、解释代码、润色等等<br>    “Prefix”: “请翻译把下面一段内容成中文，然后用一个markdown表格逐一解释文中出现的专有名词：\n\n”,</p><pre><code># 后缀，会被加在你的输入之后。例如，配合前缀可以把你的输入内容用引号圈起来。"Suffix": "",</code></pre><p>},</p><p>II：自定义函数插件<br>编写强大的函数插件来执行任何你想得到的和想不到的任务。 本项目的插件编写、调试难度很低，只要您具备一定的python基础知识，就可以仿照我们提供的模板实现自己的插件功能。 详情请参考函数插件指南。</p><p>⭐Latex/Arxiv论文翻译功能⭐<br> ===&gt;<br>虚空终端（从自然语言输入中，理解用户意图+自动调用其他插件）<br>步骤一：输入 “ 请调用插件翻译PDF论文，地址为<a href="https://openreview.net/pdf?id=rJl0r3R9KX">https://openreview.net/pdf?id=rJl0r3R9KX</a> ”<br>步骤二：点击“虚空终端”</p><p>模块化功能设计，简单的接口却能支持强大的功能</p><p>译解其他开源项目</p><p>装饰live2d的小功能（默认关闭，需要修改config.py）</p><p>OpenAI图像生成</p><p>基于mermaid的流图、脑图绘制</p><p>已知问题<br>某些浏览器翻译插件干扰此软件前端的运行<br>官方Gradio目前有很多兼容性问题，请务必使用requirement.txt安装Gradio</p><p>III：主题<br>可以通过修改THEME选项（config.py）变更主题</p><p>Chuanhu-Small-and-Beautiful 网址</p><p>访问GPT-Academic的在线服务并支持我们<br>V：参考与学习<br>代码中参考了很多其他优秀项目中的设计，顺序不分先后：</p><h1 id="清华ChatGLM2-6B"><a href="#清华ChatGLM2-6B" class="headerlink" title="清华ChatGLM2-6B:"></a>清华ChatGLM2-6B:</h1><p><a href="https://github.com/THUDM/ChatGLM2-6B">https://github.com/THUDM/ChatGLM2-6B</a></p><h1 id="清华JittorLLMs"><a href="#清华JittorLLMs" class="headerlink" title="清华JittorLLMs:"></a>清华JittorLLMs:</h1><p><a href="https://github.com/Jittor/JittorLLMs">https://github.com/Jittor/JittorLLMs</a></p><h1 id="ChatPaper"><a href="#ChatPaper" class="headerlink" title="ChatPaper:"></a>ChatPaper:</h1><p><a href="https://github.com/kaixindelele/ChatPaper">https://github.com/kaixindelele/ChatPaper</a></p><h1 id="Edge-GPT"><a href="#Edge-GPT" class="headerlink" title="Edge-GPT:"></a>Edge-GPT:</h1><p><a href="https://github.com/acheong08/EdgeGPT">https://github.com/acheong08/EdgeGPT</a></p><h1 id="ChuanhuChatGPT"><a href="#ChuanhuChatGPT" class="headerlink" title="ChuanhuChatGPT:"></a>ChuanhuChatGPT:</h1><p><a href="https://github.com/GaiZhenbiao/ChuanhuChatGPT">https://github.com/GaiZhenbiao/ChuanhuChatGPT</a></p><h1 id="Oobabooga-one-click-installer"><a href="#Oobabooga-one-click-installer" class="headerlink" title="Oobabooga one-click installer:"></a>Oobabooga one-click installer:</h1><p><a href="https://github.com/oobabooga/one-click-installers">https://github.com/oobabooga/one-click-installers</a></p><h1 id="More："><a href="#More：" class="headerlink" title="More："></a>More：</h1><p><a href="https://github.com/gradio-app/gradio">https://github.com/gradio-app/gradio</a><br><a href="https://github.com/fghrsh/live2d_demo">https://github.com/fghrsh/live2d_demo</a></p><p>下载项目<br>git命令下载</p><blockquote><p>git clone <a href="https://github.com/binary-husky/chatgpt_academic.git">https://github.com/binary-husky/chatgpt_academic.git</a></p></blockquote><p>github下载 download zip<br>ChatGPT学术优化项目地址:<a href="https://github.com/binary-husky/chatgpt_academic">https://github.com/binary-husky/chatgpt_academic</a></p><p>安装项目环境<br>这里是通过Anaconda Prompt创建环境</p><p>创建环境</p><blockquote><p>conda create -n chatgpt-academic python=3.11.0</p></blockquote><p>输入y，回车安装！</p><p>进入环境</p><blockquote><p>conda activate chatgpt-academic</p></blockquote><p>安装依赖<br>先进入到项目的根目录</p><blockquote><p>python -m pip install -r requirements.txt</p></blockquote><p>PS：我这里是可以正常安装的，因为项目要求gradio&gt;= <strong>3.23</strong> ，有些可能报错。需要先下载python的whl文件再进行安装。地址<a href="https://pypi.org/project/gradio/#files">https://pypi.org/project/gradio/#files</a></p><p>下载保存到你的项目根目录，在通过</p><blockquote><p>pip install gradio-3.24.1-py3-none-any.whl</p></blockquote><p>当我们安装好gradio之后，把requirements.txt文件中gradio注释</p><p>重新运行</p><blockquote><p>python -m pip install -r requirements.txt</p></blockquote><p>此致项目需要的环境就安装完成了！</p><p>打开解压的项目<br>这里以Vscode为例，配置config.py文件</p><p>配置API_KEY<br>打开你的科学上网助手，我这里使用是Clash是可以的（个人感觉路线选择美国的代理更好）<br>进入<a href="https://platform.openai.com/account/api-keys">https://platform.openai.com/account/api-keys</a></p><p>将创建的秘钥复制到config.py文件的API_KEY变量，秘钥配置完成！</p><p>配置代理网络的地址<br>第一步：进入网址<a href="https://ipapi.co/json/">https://ipapi.co/json/</a><br>第二步：打开开发者工具（Google浏览器快捷键Ctrl+Shift+i）,点击网络，按一下Ctrl+r，可以看到一个json文件</p><p>第三步：点击json文件</p><p>第四步：将这个地址复制到config.py文件中的proxies</p><p>运行项目<br>项目所需的环境、秘钥、代理全部配置好就可以运行项目了</p><blockquote><p>python main.py</p></blockquote><p>浏览器输入Running on local URL</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Installation&quot;&gt;&lt;a href=&quot;#Installation&quot; class=&quot;headerlink&quot; title=&quot;Installation&quot;&gt;&lt;/a&gt;Installation&lt;/h1&gt;&lt;p&gt;安装方法：直接运行 (Windows, Linux or M</summary>
      
    
    
    
    <category term="默认分类" scheme="https://0hhhhhh0.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>openipc goke7205v200</title>
    <link href="https://0hhhhhh0.github.io/2024/12/03/7/"/>
    <id>https://0hhhhhh0.github.io/2024/12/03/7/</id>
    <published>2024-12-03T04:47:00.000Z</published>
    <updated>2024-12-04T12:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="保存原始固件"><a href="#保存原始固件" class="headerlink" title="保存原始固件"></a>保存原始固件</h1><hr><h2 id="备份您的原始固件，请不要跳过这个步骤！"><a href="#备份您的原始固件，请不要跳过这个步骤！" class="headerlink" title="备份您的原始固件，请不要跳过这个步骤！"></a>备份您的原始固件，请不要跳过这个步骤！</h2><p>OpenIPC U-Boot 会覆盖原始的加密分区，因此无法恢复为出厂固件，除非您拥有此特定摄像机的完整闪存备份！要创建完整的固件备份，请启动 TFTP 服务器并在引导加载程序 shell 中执行这些命令。</p><blockquote><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python"> # Enter commands line by line! Do not copy and paste multiple lines at once!setenv ipaddr 192.168.15.169; setenv serverip 192.168.15.105mw.b 0x42000000 0xff 0x1000000sf probe 0; sf read 0x42000000 0x0 0x1000000tftpput 0x42000000 0x1000000 backup-gk7205v200-nor16m.bin# if there is no tftpput but tftp then run this instead tftp 0x42000000 backup-gk7205v200-nor16m.bin 0x1000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>有关详细信息，请参阅项目 wiki 中的安装说明。</p><h1 id="烧录完整的-OpenIPC-固件"><a href="#烧录完整的-OpenIPC-固件" class="headerlink" title="烧录完整的 OpenIPC 固件"></a>烧录完整的 OpenIPC 固件</h1><h2 id="下载-OpenIPC-固件-Ultimate"><a href="#下载-OpenIPC-固件-Ultimate" class="headerlink" title="下载 OpenIPC 固件 (Ultimate)"></a>下载 OpenIPC 固件 (Ultimate)</h2><p>for Goke GK7205V200 with 16MB NOR flash</p><p>完整的固件由引导加载程序、内核和根文件系统组成，也适用于使用编程器烧写闪存芯片。 请注意，完整固件不包含预设环境。你还需要添加自己的MAC地址、IP地址等设置。</p><blockquote><h1 id="Enter-commands-line-by-line-Do-not-copy-and-paste-multiple-lines-at-once"><a href="#Enter-commands-line-by-line-Do-not-copy-and-paste-multiple-lines-at-once" class="headerlink" title="Enter commands line by line! Do not copy and paste multiple lines at once!"></a>Enter commands line by line! Do not copy and paste multiple lines at once!</h1><p>setenv ipaddr 192.168.15.169; setenv serverip 192.168.15.105<br>mw.b 0x42000000 0xff 0x1000000<br>tftpboot 0x42000000 openipc-gk7205v200-ultimate-16mb.bin</p><h1 id="if-there-is-no-tftpboot-but-tftp-then-run-this-instead"><a href="#if-there-is-no-tftpboot-but-tftp-then-run-this-instead" class="headerlink" title="if there is no tftpboot but tftp then run this instead"></a>if there is no tftpboot but tftp then run this instead</h1><p>tftp 0x42000000 openipc-gk7205v200-ultimate-16mb.bin<br>sf probe 0; sf lock 0;<br>sf erase 0x0 0x1000000; sf write 0x42000000 0x0 0x1000000<br>reset</p></blockquote><p>摄像机将自动重启并使用全新的引导加载程序启动。</p><p>注意准备中断并进入引导程序的命令行。 在引导加载程序的命令行中，根据您的闪存大小和类型重新映射 ROM 分区。</p><blockquote><h1 id="Enter-commands-line-by-line-Do-not-copy-and-paste-multiple-lines-at-once-1"><a href="#Enter-commands-line-by-line-Do-not-copy-and-paste-multiple-lines-at-once-1" class="headerlink" title="Enter commands line by line! Do not copy and paste multiple lines at once!"></a>Enter commands line by line! Do not copy and paste multiple lines at once!</h1><p>run setnor16m</p></blockquote><h1 id="恭喜！此时，您已经安装了-OpenIPC-固件-Ultimate-。"><a href="#恭喜！此时，您已经安装了-OpenIPC-固件-Ultimate-。" class="headerlink" title="恭喜！此时，您已经安装了 OpenIPC 固件 (Ultimate)。"></a>恭喜！此时，您已经安装了 OpenIPC 固件 (Ultimate)。</h1><p>在端口 85 ( <a href="http://192.168.15.169:85/">http://192.168.15.169:85/</a> ) 上打开摄像机的 Web 界面并使用登录root和密码12345登录。登录后将要求您设置自己的安全密码。通过以下方式访问摄像机ssh 或 UART 使用与上述相同的登录名和密码。</p><hr><p>打开web界面后，更新固件，更新完后调整majestic、sensor与设备型号对应。</p><h1 id="majestic"><a href="#majestic" class="headerlink" title="majestic"></a>majestic</h1><p>openipc未开源部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;保存原始固件&quot;&gt;&lt;a href=&quot;#保存原始固件&quot; class=&quot;headerlink&quot; title=&quot;保存原始固件&quot;&gt;&lt;/a&gt;保存原始固件&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;备份您的原始固件，请不要跳过这个步骤！&quot;&gt;&lt;a href=&quot;#备份您的原始固件，请不要跳</summary>
      
    
    
    
    <category term="折腾" scheme="https://0hhhhhh0.github.io/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="openipc" scheme="https://0hhhhhh0.github.io/tags/openipc/"/>
    
  </entry>
  
</feed>
